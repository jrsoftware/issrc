<?xml version="1.0" ?>
<!DOCTYPE ishelp SYSTEM "isetup.dtd">

<!--
  Inno Setup
  Copyright (C) 1997-2019 Jordan Russell
  Portions by Martijn Laan
  For conditions of distribution and use, see LICENSE.TXT.
-->

<ishelp version="1">

<!-- Table of contents -->

<contents>
  <contentstopic title="What is Inno Setup?" topic="whatisinnosetup" />
  <contentstopic title="Documentation Conventions" topic="conventions" />
  <contentstopic title="Creating Installations" topic="creatinginstallations" />
  <contentstopic title="Script Format Overview" topic="scriptformatoverview" />
  <contentstopic title="Parameters in Sections" topic="params" />
  <contentstopic title="Constants" topic="consts" />
  <contentstopic title="Common Parameters" topic="commonparams" />
  <contentstopic title="Components and Tasks Parameters" topic="componentstasksparams" />
  <contentsheading title="Setup Script Sections">
    <contentstopic title="[Setup] section" topic="setupsection" />
    <contentsheading title="[Setup] section directives" />
    <contentstopic title="[Types] section" topic="typessection" />
    <contentstopic title="[Components] section" topic="componentssection" />
    <contentstopic title="[Tasks] section" topic="taskssection" />
    <contentstopic title="[Dirs] section" topic="dirssection" />
    <contentstopic title="[Files] section" topic="filessection" />
    <contentstopic title="[Icons] section" topic="iconssection" />
    <contentstopic title="[INI] section" topic="inisection" />
    <contentstopic title="[InstallDelete] section" topic="installdeletesection" />
    <contentstopic title="[Languages] section" topic="languagessection" />
    <contentstopic title="[Messages] section" topic="messagessection" />
    <contentstopic title="[CustomMessages] section" topic="custommessagessection" />
    <contentstopic title="[LangOptions] section" topic="langoptionssection" />
    <contentstopic title="[Registry] section" topic="registrysection" />
    <contentstopic title="[Run] section" topic="runsection" />
    <contentstopic title="[UninstallDelete] section" topic="uninstalldeletesection" />
    <contentstopic title="[UninstallRun] section" topic="runsection" />
  </contentsheading>
  <contentsheading title="Pascal Scripting">
    <contentstopic title="Introduction" topic="scriptintro" />
    <contentstopic title="Creating the [Code] Section" topic="scriptcreating" />
    <contentstopic title="Event Functions" topic="scriptevents" />
    <contentstopic title="Scripted Constants" topic="scriptconstants" />
    <contentstopic title="Check Parameters" topic="scriptcheck" />
    <contentstopic title="BeforeInstall and AfterInstall Parameters" topic="scriptinstall" />
    <contentstopic title="Uninstall Code" topic="scriptuninstall" />
    <contentstopic title="Examples" topic="scriptexamples" />
    <contentstopic title="Support Functions Reference" topic="scriptfunctions" />
    <contentstopic title="Support Classes Reference" topic="scriptclasses" />
    <contentstopic title="Using Custom Wizard Pages" topic="scriptpages" />
    <contentstopic title="Using DLLs and .NET assemblies" topic="scriptdll" />
    <contentstopic title="Using COM Automation objects" topic="scriptautomation" />
  </contentsheading>
  <contentsheading title="Other Information">
    <contentstopic title="Unicode Inno Setup" topic="unicode" />
    <contentstopic title="Non Administrative Install Mode" topic="admininstallmode" />
    <contentstopic title="64-bit Install Mode" topic="32vs64bitinstalls" />
    <contentstopic title="64-bit Installation Limitations" topic="64bitlimitations" />
    <contentstopic title="Wizard Pages" topic="wizardpages" />
    <contentstopic title="Installation Order" topic="installorder" />
    <contentstopic title="Unsafe Files" topic="unsafefiles" />
    <contentstopic title="Compiler Command Line Execution" topic="compilercmdline" />
    <contentstopic title="Setup Command Line Parameters" topic="setupcmdline" />
    <contentstopic title="Uninstaller Command Line Parameters" topic="uninstcmdline" />
    <contentstopic title="Setup Exit Codes" topic="setupexitcodes" />
    <contentstopic title="Uninstaller Exit Codes" topic="uninstexitcodes" />
    <contentstopic title="Miscellaneous Notes" topic="technotes" />
    <contentstopic title="Example Scripts" topic="examples" />
    <contentstopic title="Frequently Asked Questions" topic="faq" />
    <contentstopic title="Contributors" topic="credits" />
    <contentstopic title="Support Inno Setup" topic="donate" />
  </contentsheading>
</contents>



<!-- Topics -->

<topic name="whatisinnosetup" title="What is Inno Setup?">
<keyword value="What is Inno Setup?" />
<body>

<p>
<b>Inno Setup version 6.0.3</b><br/>
<b>Copyright &copy; 1997-2019 Jordan Russell. All rights reserved.</b><br/>
<b>Portions Copyright &copy; 2000-2019 Martijn Laan. All rights reserved.</b><br/>
<extlink href="http://www.jrsoftware.org/">Inno Setup home page</extlink>
</p>

<p><br/>
Inno Setup is a <i>free</i> installer for Windows programs by Jordan Russell and Martijn Laan. First introduced in 1997, Inno Setup today rivals and even surpasses many commercial installers in feature set and stability.</p>

<p><br/>
<b><i>Key features:</i></b></p>

<ul>

<li>Support for every Windows release since 2006, including: Windows 10, Windows 10 on ARM, Windows Server 2019, Windows Server 2016, Windows 8.1, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, and Windows Vista. (No service packs are required.)</li>

<li>Extensive support for installation of <link topic="32vs64bitinstalls">64-bit</link> applications on the 64-bit editions of Windows. The x64, ARM64 and Itanium architectures are all supported.</li>

<li>Extensive support for both administrative and <link topic="admininstallmode">non administrative installations</link> installations.</li>

<li>Supports creation of a single EXE to install your program for easy online distribution. <link topic="setup_diskspanning">Disk spanning</link> is also supported.</li>

<li>Resizable standard Windows wizard interface.</li>

<li>Customizable setup <link topic="typessection">types</link>, e.g. Full, Minimal, Custom.</li>

<li>Complete <link topic="setup_uninstallable">uninstall</link> capabilities.</li>

<li>Installation of <link topic="filessection">files</link>:<br/>
Includes integrated support for "deflate", bzip2, and 7-Zip LZMA/LZMA2 file <link topic="setup_compression">compression</link>. The installer has the ability to compare file version info, replace in-use files, use shared file counting, register DLL/OCX's and type libraries, and install fonts.</li>

<li>Creation of <link topic="iconssection">shortcuts</link> anywhere, including in the Start Menu and on the desktop.</li>

<li>Creation of <link topic="registrysection">registry</link> and <link topic="inisection">.INI</link> entries.</li>

<li><link topic="runsection">Running</link> other programs before, during or after install.</li>

<li>Support for <link topic="languagessection">multilingual</link> installs, including right-to-left language support.</li>

<li>Support for <link topic="setup_password">passworded</link> and <link topic="setup_encryption">encrypted</link> installs.</li>

<li>Support for <link topic="setup_signtool">digitally signed</link> installs and uninstalls, including dual signing (SHA1 &amp; SHA256).</li>

<li><link topic="setupcmdline" anchor="SILENT">Silent install</link> and <link topic="uninstcmdline" anchor="SILENT">silent uninstall</link>.</li>

<li><link topic="unicode">Unicode installs</link>.</li>

<li>Integrated preprocessor option for advanced compile-time customization.</li>

<li>Integrated <link topic="scriptintro">Pascal scripting</link> engine option for advanced run-time install and uninstall customization.</li>

<li>Full source code is available from <extlink href="https://github.com/jrsoftware/issrc">GitHub</extlink>.</li>

<li>Tiny footprint: only about 1.3 mB overhead with all features included.</li>

<li>All features are fully documented.</li>

<li>Used by <extlink href="https://code.visualstudio.com">Microsoft Visual Studio Code</extlink> and <extlink href="https://www.embarcadero.com/products/delphi">Embarcardero Delphi</extlink>.</li>

</ul>

<p><br/>
<b><i>Is it really free of charge, even for commercial use?</i></b></p>

<p>Yes, it may be used completely free of charge, even when deploying commercial applications.</p>

<p>(Note: "Completely free of charge" must not be confused with "completely free". Inno Setup is copyrighted software, <i>not</i> public domain software. There are some restrictions on distribution and use; see the LICENSE.TXT file for details.)</p>

</body>
</topic>



<topic name="conventions" title="Documentation Conventions">
<keyword value="Documentation Conventions" />
<body>

<table>
<tr>
  <td><tt>monospaced text</tt></td>
  <td><p>When you see monospaced text in the documentation, it refers to text you would type in a <link topic="creatinginstallations">script</link> file.</p></td>
</tr>
</table>

</body>
</topic>



<topic name="creatinginstallations" title="Creating Installations">
<keyword value="Creating Installations" />
<body>

<p>Installations are created by means of <i>scripts</i>, which are ASCII or UTF-8 encoded text files with a format somewhat similar to .INI files. (No, it's not as complicated as you might be thinking!).</p>

<p>Scripts have an ".iss" (meaning Inno Setup Script) extension. The script controls every aspect of the installation. It specifies which files are to be installed and where, what shortcuts are to be created and what they are to be named, and so on.</p>

<p>Script files are usually edited from inside the Setup Compiler program. After you have finishing writing the script, the next and final step is select "Compile" in the Setup Compiler. What this does is create a complete, ready-to-run Setup program based on your script. By default, this is created in a directory named "Output" under the directory containing the script.</p>

<p>To give you an idea of how this all works, start the Setup Compiler, click <i>File | Open</i>, and select one of the script files in the Examples subdirectory located under the Inno Setup directory. (It may be helpful to use the sample scripts as a template for your own scripts.)</p>

<p><br/><b>See also:</b><br/>
<link topic="scriptformatoverview">Script Format Overview</link>
</p>

</body>
</topic>



<topic name="scriptformatoverview" title="Script Format Overview">
<keyword value="Script Format Overview" />
<keyword value="#include" anchor="include" />
<keyword value="include" anchor="include" />
<keyword value="#preproc" anchor="preproc" />
<keyword value="preproc" anchor="preproc" />
<keyword value="Comments" />
<body>

<p>Inno Setup Scripts are arranged into <i>sections</i>. Each section controls a different aspect of the installation. A section is started by specifying the name of the section enclosed in square brackets <tt>[]</tt>. Inside each section is any number of <i>entries</i>.</p>

<p>There are two different main types of sections: those such as [Setup] whose entries contain directive names and values (in the form <tt>Directive=Value</tt>), and those such as [Files] whose entries are divided into <link topic="params">parameters</link>.</p>

<p>Here is an example:</p>

<precode>
[Setup]
AppName=My Program

[Files]
Source: "MYPROG.EXE"; DestDir: "{app}"
</precode>

<p>Note that it is legal to specify multiple sections of the same name.</p>

<p>You can put "comments" in the script (which are ignored by the compiler) by placing a semicolon at the beginning of a line. For example:</p>

<precode>
; This is a comment. I could put reminders to myself here...
</precode>

<p>A C-like <a name="include"><tt>#include</tt></a> directive is supported, which pulls in lines from a separate file into the script at the position of the <tt>#include</tt> directive. The syntax is:</p>

<precode>
#include "filename.txt"
</precode>

<p>If the filename is not fully qualified, the compiler will look for it in the same directory as the file containing the <tt>#include</tt> directive. The filename may be prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>

<p>A <a name="preproc"><tt>#preproc</tt></a> directive is supported, which specifies whether to use the built-in preprocessor which only supports the above <tt>#include</tt> directive or to use Inno Setup Preprocessor (ISPP) which supports many more directives. The syntax is:</p>
<precode>
#preproc builtin
#preproc ispp
</precode>

<p>By default, scripts use ISPP if available, and .isl files use the built-in preprocessor.</p>

<p><br/><b>See also:</b><br/>
<link topic="params">Parameters in Sections</link><br/>
<link topic="consts">Constants</link><br/>
<link topic="commonparams">Common Parameters</link><br/>
<link topic="componentstasksparams">Components and Tasks Parameters</link><br/>
<link topic="setupsection">[Setup] section</link><br/>
<link topic="typessection">[Types] section</link><br/>
<link topic="componentssection">[Components] section</link><br/>
<link topic="taskssection">[Tasks] section</link><br/>
<link topic="dirssection">[Dirs] section</link><br/>
<link topic="filessection">[Files] section</link><br/>
<link topic="iconssection">[Icons] section</link><br/>
<link topic="inisection">[INI] section</link><br/>
<link topic="installdeletesection">[InstallDelete] section</link><br/>
<link topic="languagessection">[Languages] section</link><br/>
<link topic="messagessection">[Messages] section</link><br/>
<link topic="custommessagessection">[CustomMessages] section</link><br/>
<link topic="langoptionssection">[LangOptions] section</link><br/>
<link topic="registrysection">[Registry] section</link><br/>
<link topic="runsection">[Run] section</link><br/>
<link topic="uninstalldeletesection">[UninstallDelete] section</link><br/>
<link topic="runsection">[UninstallRun] section</link><br/>
<link topic="scriptintro">Pascal Scripting: Introduction</link>
</p>

</body>
</topic>



<topic name="params" title="Parameters in Sections">
<keyword value="Parameters in Sections" />
<body>

<p>All of the sections in a script, with the exception of <tt>[Setup]</tt>, <tt>[Messages]</tt>, <tt>[CustomMessages]</tt>, <tt>[LangOptions]</tt>, and <tt>[Code]</tt>, contain lines separated into <i>parameters</i>. The following is an example of a <tt>[Files]</tt> section:</p>

<precode>
[Files]
Source: "MYPROG.EXE"; DestDir: "{app}"
Source: "MYPROG.CHM"; DestDir: "{app}"
Source: "README.TXT"; DestDir: "{app}"; Flags: isreadme
</precode>

<p>Each parameter consists of a name, followed by a colon, and then a value. Unless otherwise noted, parameters are optional in that they assume a default value if they are not specified. Multiple parameters on a line are separated by semicolons, and can be listed in any order.</p>

<p>The value of a parameter is traditionally surrounded in double quotes (<tt>"</tt>) when it contains a user-defined string, such as a filename. Using quotes is not required, though, but by doing so it makes it possible to embed leading and trailing spaces in the value, as well as semicolons and double-quote characters.</p>

<p>To embed a double-quote character inside a quoted value, use two consecutive double-quote characters. For example:</p>

<precode>
"This "" contains "" embedded "" quotes"
</precode>

<p>The Setup Compiler would see that as:</p>

<precode>
This " contains " embedded " quotes
</precode>

<p>If you want the value of a parameter to be a single double-quote character, use four double-quote characters: <tt>""""</tt>. The outer two are needed to surround the string in quotes; the inner two are used to embed a single double-quote character.</p>

</body>
</topic>



<topic name="consts" title="Constants">
<keyword value="Constants" />
<keyword value="{\}" anchor="bs" />
<keyword value="{%NAME}" anchor="name" />
<keyword value="{app}" anchor="app" />
<keyword value="{autoappdata}" anchor="autoappdata" />
<keyword value="{autocf}" anchor="autocf" />
<keyword value="{autocf32}" anchor="autocf32" />
<keyword value="{autocf64}" anchor="autocf64" />
<keyword value="{autodesktop}" anchor="autodesktop" />
<keyword value="{autodocs}" anchor="autodocs" />
<keyword value="{autopf}" anchor="autopf" />
<keyword value="{autopf32}" anchor="autopf32" />
<keyword value="{autopf64}" anchor="autopf64" />
<keyword value="{autoprograms}" anchor="autoprograms" />
<keyword value="{autostartmenu}" anchor="autostartmenu" />
<keyword value="{autostartup}" anchor="autostartup" />
<keyword value="{autotemplates}" anchor="autotemplates" />
<keyword value="{cf}" anchor="cf" />
<keyword value="{commoncf32}" anchor="commoncf32" />
<keyword value="{cf32}" anchor="cf32" />
<keyword value="{commoncf64}" anchor="commoncf64" />
<keyword value="{cf64}" anchor="cf64" />
<keyword value="{cm:...}" anchor="cm" />
<keyword value="{cmd}" anchor="cmd" />
<keyword value="{commonappdata}" anchor="commonappdata" />
<keyword value="{commondesktop}" anchor="commondesktop" />
<keyword value="{commondocs}" anchor="commondocs" />
<keyword value="{commonprograms}" anchor="commonprograms" />
<keyword value="{commonstartmenu}" anchor="commonstartmenu" />
<keyword value="{commonstartup}" anchor="commonstartup" />
<keyword value="{commontemplates}" anchor="commontemplates" />
<keyword value="{computername}" anchor="computername" />
<keyword value="{dao}" anchor="dao" />
<keyword value="{dotnet11}" anchor="dotnet11" />
<keyword value="{dotnet20}" anchor="dotnet20" />
<keyword value="{dotnet2032}" anchor="dotnet2032" />
<keyword value="{dotnet2064}" anchor="dotnet2064" />
<keyword value="{dotnet40}" anchor="dotnet40" />
<keyword value="{dotnet4032}" anchor="dotnet4032" />
<keyword value="{dotnet4064}" anchor="dotnet4064" />
<keyword value="{drive:...}" anchor="drive" />
<keyword value="{fonts}" anchor="fonts" />
<keyword value="{group}" anchor="group" />
<keyword value="{groupname}" anchor="groupname" />
<keyword value="{hwnd}" anchor="hwnd" />
<keyword value="{ini:...}" anchor="ini" />
<keyword value="{language}" anchor="language" />
<keyword value="{localappdata}" anchor="localappdata" />
<keyword value="{log}" anchor="log" />
<keyword value="{param:...}" anchor="param" />
<keyword value="{commonpf}" anchor="commonpf" />
<keyword value="{pf}" anchor="pf" />
<keyword value="{commonpf32}" anchor="commonpf32" />
<keyword value="{pf32}" anchor="pf32" />
<keyword value="{commonpf64}" anchor="commonpf64" />
<keyword value="{pf64}" anchor="pf64" />
<keyword value="{reg:...}" anchor="reg" />
<keyword value="{sd}" anchor="sd" />
<keyword value="{src}" anchor="src" />
<keyword value="{srcexe}" anchor="srcexe" />
<keyword value="{sys}" anchor="sys" />
<keyword value="{sysnative}" anchor="sysnative" />
<keyword value="{sysuserinfoname}" anchor="sysuserinfoname" />
<keyword value="{sysuserinfoorg}" anchor="sysuserinfoorg" />
<keyword value="{syswow64}" anchor="syswow64" />
<keyword value="{tmp}" anchor="tmp" />
<keyword value="{uninstallexe}" anchor="uninstallexe" />
<keyword value="{userappdata}" anchor="userappdata" />
<keyword value="{usercf}" anchor="usercf" />
<keyword value="{userdesktop}" anchor="userdesktop" />
<keyword value="{userdocs}" anchor="userdocs" />
<keyword value="{userfavorites}" anchor="userfavorites" />
<keyword value="{userinfoname}" anchor="userinfoname" />
<keyword value="{userinfoorg}" anchor="userinfoorg" />
<keyword value="{userinfoserial}" anchor="userinfoserial" />
<keyword value="{username}" anchor="username" />
<keyword value="{userpf}" anchor="userpf" />
<keyword value="{userprograms}" anchor="userprograms" />
<keyword value="{usersendto}" anchor="usersendto" />
<keyword value="{sendto}" anchor="usersendto" />
<keyword value="{userstartmenu}" anchor="userstartmenu" />
<keyword value="{userstartup}" anchor="userstartup" />
<keyword value="{usertemplates}" anchor="usertemplates" />
<keyword value="{win}" anchor="win" />
<keyword value="{wizardhwnd}" anchor="wizardhwnd" />
<body>

<p>The majority of the script entries can have <i>constants</i> embedded in them. These are predefined strings enclosed in brace characters <tt>{ }</tt>. Setup or Uninstall translates the constants to their literal values, depending on the user's choices and system configuration. For example, <tt>{win}</tt>, as described below, would translate to "C:\WINDOWS" on most systems.</p>

<p>A "{" character is treated as the start of the constant. If you want to use that actual character in a place where constants are supported, you must use two consecutive "{" characters. (You do not need to double "}" characters.)</p>

<p>When a backslash immediately follows a constant, Setup or Uninstall will automatically remove the backslash if the value of the constant ends in a backslash already. Thus, if the value of a particular constant is "C:\", <tt>{<i>constantname</i>}\file</tt> will translate to "C:\file", not "C:\\file". If you want to prevent this from happening, enclose the backslash in <tt>{ }</tt> characters, e.g. <tt>{app}{\}</tt>.</p>

<p>The following is the list of supported constants.</p>

<heading>Directory Constants</heading>

<dl>

<dt><b><a name="app">{app}</a></b></dt>
<dd>
<p>The application directory, which the user selects on the <i>Select Destination Location</i> page of the wizard.<br/>
For example: If you used <tt>{app}\MYPROG.EXE</tt> on an entry and the user selected "C:\MYPROG" as the application directory, Setup will translate it to "C:\MYPROG\MYPROG.EXE".</p>
</dd>

<dt><b><a name="win">{win}</a></b></dt>
<dd>
<p>The system's Windows directory.<br/>
For example: If you used <tt>{win}\MYPROG.INI</tt> on an entry and the system's Windows directory is "C:\WINDOWS", Setup or Uninstall will translate it to "C:\WINDOWS\MYPROG.INI".</p>
</dd>

<dt><b><a name="sys">{sys}</a></b></dt>
<dd>
<p>The system's System32 directory.<br/>
For example: If you used <tt>{sys}\CTL3D32.DLL</tt> on an entry and the system's Windows System directory is "C:\WINDOWS\SYSTEM", Setup or Uninstall will translate it to "C:\WINDOWS\SYSTEM\CTL3D32.DLL".</p>
<p>On 64-bit Windows, by default, the System32 path returned by this constant maps to the directory containing 32-bit system files, just like on 32-bit Windows. (This can be overridden by enabling <link topic="32vs64bitinstalls">64-bit install mode</link>.)</p>
</dd>

<dt><b><a name="sysnative">{sysnative}</a></b></dt>
<dd>
<p>On 64-bit Windows, the directory containing 64-bit system files. On 32-bit Windows, the directory containing 32-bit system files.</p>
</dd>

<dt><b><a name="syswow64">{syswow64}</a></b></dt>
<dd>
<p>On 64-bit Windows, the system's SysWOW64 directory, typically "C:\WINDOWS\SysWOW64". This is the actual directory in which 32-bit system files reside. On 32-bit Windows, 32-bit system files do not reside in a separate SysWOW64 directory, so this constant will resolve to the same directory as <tt>{sys}</tt> if used there.</p>
<p>Do not use this constant unless you have a specific need to obtain the name of the actual directory in which 32-bit system files reside. Gratuitously using <tt>{syswow64}</tt> in places where <tt>{sys}</tt> will suffice may cause problems. (See the documentation for the <link topic="filessection">[Files]</link> section's <tt>sharedfile</tt> flag for one example.)</p>
</dd>

<dt><b><a name="src">{src}</a></b></dt>
<dd>
<p>The directory in which the Setup files are located.<br/>
For example: If you used <tt>{src}\MYPROG.EXE</tt> on an entry and the user is installing from "S:\", Setup will translate it to "S:\MYPROG.EXE".</p>
</dd>

<dt><b><a name="sd">{sd}</a></b></dt>
<dd>
<p>System Drive. The drive Windows is installed on, typically "C:". This directory constant is equivalent to the <i>SystemDrive</i> environment variable.</p>
</dd>

<dt><b><a name="commonpf">{commonpf}</a></b></dt>
<dd>
<p>Program Files. The path of the system's Program Files directory. <tt>{commonpf}</tt> is equivalent to <tt>{commonpf32}</tt> unless the install is running in <link topic="32vs64bitinstalls">64-bit install mode</link>, in which case it is equivalent to <tt>{commonpf64}</tt>.</p>
</dd>

<dt><b><a name="commonpf32">{commonpf32}</a></b></dt>
<dd>
<p>32-bit Program Files. The path of the system's 32-bit Program Files directory, typically "C:\Program Files" on 32-bit Windows and "C:\Program Files (x86)" on 64-bit Windows.</p>
</dd>

<dt><b><a name="commonpf64">{commonpf64}</a></b></dt>
<dd>
<p>64-bit Windows only: 64-bit Program Files. The path of the system's 64-bit Program Files directory, typically "C:\Program Files". An exception will be raised if an attempt is made to expand this constant on 32-bit Windows.</p>
</dd>

<dt><b><a name="commoncf">{commoncf}</a></b></dt>
<dd>
<p>Common Files. The path of the system's Common Files directory. <tt>{commoncf}</tt> is equivalent to <tt>{commoncf32}</tt> unless the install is running in <link topic="32vs64bitinstalls">64-bit install mode</link>, in which case it is equivalent to <tt>{commoncf64}</tt>.</p>
</dd>

<dt><b><a name="commoncf32">{commoncf32}</a></b></dt>
<dd>
<p>32-bit Common Files. The path of the system's 32-bit Common Files directory, typically "C:\Program Files\Common Files" on 32-bit Windows and "C:\Program Files (x86)\Common Files" on 64-bit Windows.</p>
</dd>

<dt><b><a name="commoncf64">{commoncf64}</a></b></dt>
<dd>
<p>64-bit Windows only: 64-bit Common Files. The path of the system's 64-bit Common Files directory, typically "C:\Program Files\Common Files". An exception will be raised if an attempt is made to expand this constant on 32-bit Windows.</p>
</dd>

<dt><b><a name="tmp">{tmp}</a></b></dt>
<dd>
<p>Temporary directory used by Setup or Uninstall. This is <i>not</i> the value of the user's TEMP environment variable. It is a subdirectory of the user's temporary directory which is created by Setup or Uninstall at startup (with a name like "C:\WINDOWS\TEMP\IS-xxxxx.tmp"). All files and subdirectories in this directory are deleted when Setup or Uninstall exits. During Setup, this is primarily useful for extracting files that are to be executed in the [Run] section but aren't needed after the installation.</p>
</dd>

<dt><b><a name="fonts">{fonts}</a></b></dt>
<dd>
<p>Fonts directory. Normally named "FONTS" under the Windows directory.</p>
</dd>

<dt><b><a name="dao">{dao}</a></b></dt>
<dd>
<p>DAO directory. This is equivalent to <tt>{commoncf}\Microsoft Shared\DAO</tt>.</p>
</dd>

<dt><b><a name="dotnet11">{dotnet11}</a></b></dt>
<dd>
<p>32-bit .NET Framework version 1.1 root directory.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 1.1 present.</p>
</dd>

<dt><b><a name="dotnet20">{dotnet20}</a></b></dt>
<dd>
<p>.NET Framework version 2.0-3.5 root directory. <tt>{dotnet20}</tt> is equivalent to <tt>{dotnet2032}</tt> unless the install is running in <link topic="32vs64bitinstalls">64-bit install mode</link>, in which case it is equivalent to <tt>{dotnet2064}</tt>.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 2.0-3.5 present.</p>
</dd>

<dt><b><a name="dotnet2032">{dotnet2032}</a></b></dt>
<dd>
<p>32-bit .NET Framework version 2.0-3.5 root directory.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 2.0-3.5 present.</p>
</dd>

<dt><b><a name="dotnet2064">{dotnet2064}</a></b></dt>
<dd>
<p>64-bit Windows only: 64-bit .NET Framework version 2.0-3.5 root directory.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 2.0-3.5 present.</p>
</dd>

<dt><b><a name="dotnet40">{dotnet40}</a></b></dt>
<dd>
<p>.NET Framework version 4.0 and later root directory. <tt>{dotnet40}</tt> is equivalent to <tt>{dotnet4032}</tt> unless the install is running in <link topic="32vs64bitinstalls">64-bit install mode</link>, in which case it is equivalent to <tt>{dotnet4064}</tt>.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 4.0 or later present.</p>
</dd>

<dt><b><a name="dotnet4032">{dotnet4032}</a></b></dt>
<dd>
<p>32-bit .NET Framework version 4.0 and later root directory.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 4.0 or later present.</p>
</dd>

<dt><b><a name="dotnet4064">{dotnet4064}</a></b></dt>
<dd>
<p>64-bit Windows only: 64-bit .NET Framework version 4.0 and later root directory.</p>
<p>An exception will be raised if an attempt is made to expand this constant on a system with no .NET Framework version 4.0 or later present.</p>
</dd>

</dl>

<heading>Shell Folder Constants</heading>

<p>Inno Setup supports another set of directory constants, referred to as <i>shell folder constants</i>. They can be used in the same way as the other directory constants.</p>

<p>The "common" constants refer to the <i>All Users</i> profile.</p>

<p>The "user" constants refer to the profile of the user running Setup. This user is often not the same as the currently logged-in user, so use the "user" constants with caution.</p>

<!-- <p>Except where otherwise noted, shell folder constants work on all versions of Windows that Inno Setup supports.</p> -->

<dl>

<dt><b><a name="group">{group}</a></b></dt>
<dd>
<p>The path to the Start Menu folder, as selected by the user on Setup's <i>Select Start Menu Folder</i> wizard page. This folder is created in the <i>All Users</i> profile unless the installation is running in <link topic="admininstallmode">non administrative install mode</link>, in which case it is created in the current user's profile.</p>
</dd>

<dt><b><a name="localappdata">{localappdata}</a></b></dt>
<dd>
<p>The path to the local (nonroaming) Application Data folder.</p>
</dd>

<dt><b><a name="userappdata">{userappdata}</a></b> &amp; <b><a name="commonappdata">{commonappdata}</a></b></dt>
<dd>
<p>The path to the Application Data folder.</p>
</dd>

<dt><b><a name="usercf">{usercf}</a></b></dt>
<dd>
<p>The path to the current user's Common Files directory. Only Windows 7 and later supports <tt>{usercf}</tt>; if used on previous Windows versions, it will translate to the same directory as <tt>{localappdata}\Programs\Common</tt>.</p>
</dd>

<dt><b><a name="userdesktop">{userdesktop}</a></b> &amp; <b><a name="commondesktop">{commondesktop}</a></b></dt>
<dd>
<p>The path to the desktop folder.</p>
</dd>

<dt><b><a name="userdocs">{userdocs}</a></b> &amp; <b><a name="commondocs">{commondocs}</a></b></dt>
<dd>
<p>The path to the My Documents folder.</p>
</dd>

<dt><b><a name="userfavorites">{userfavorites}</a></b></dt>
<dd>
<p>The path to the current user's Favorites folder. (There is no common Favorites folder.)</p>
</dd>

<dt><b><a name="userpf">{userpf}</a></b></dt>
<dd>
<p>The path to the current user's Program Files directory. Only Windows 7 and later supports <tt>{userpf}</tt>; if used on previous Windows versions, it will translate to the same directory as <tt>{localappdata}\Programs</tt>.</p>
</dd>

<dt><b><a name="userprograms">{userprograms}</a></b> &amp; <b><a name="commonprograms">{commonprograms}</a></b></dt>
<dd>
<p>The path to the Programs folder on the Start Menu.</p>
</dd>

<dt><b><a name="usersendto">{usersendto}</a></b></dt>
<dd>
<p>The path to the current user's Send To folder. (There is no common Send To folder.)</p>
</dd>

<dt><b><a name="userstartmenu">{userstartmenu}</a></b> &amp; <b><a name="commonstartmenu">{commonstartmenu}</a></b></dt>
<dd>
<p>The path to the top level of the Start Menu.</p>
</dd>

<dt><b><a name="userstartup">{userstartup}</a></b> &amp; <b><a name="commonstartup">{commonstartup}</a></b></dt>
<dd>
<p>The path to the Startup folder on the Start Menu.</p>
</dd>

<dt><b><a name="usertemplates">{usertemplates}</a></b> &amp; <b><a name="commontemplates">{commontemplates}</a></b></dt>
<dd>
<p>The path to the Templates folder.</p>
</dd>

</dl>

<heading>Auto Constants</heading>

<p>Besides the "common" and "user" constants, Inno Setup also supports "auto" constants. These automatically map to their "common" form unless the installation is running in <link topic="admininstallmode">non administrative install mode</link>, in which case they map to their "user" form.</p>
<p>It is recommended you always use these "auto" constants when possible to avoid mistakes.</p>

<indent>
<table>
<tr><td></td><td><u>Administrative</u></td><td><u>Non administrative</u></td></tr>
<tr><td><tt><a name="autoappdata">autoappdata</a></tt></td><td><tt>commonappdata</tt></td><td><tt>userappdata</tt></td></tr>
<tr><td><tt><a name="autocf">autocf</a></tt></td><td><tt>commoncf</tt></td><td><tt>usercf</tt></td></tr>
<tr><td><tt><a name="autocf32">autocf32</a></tt></td><td><tt>commoncf32</tt></td><td><tt>usercf</tt></td></tr>
<tr><td><tt><a name="autocf64">autocf64</a></tt></td><td><tt>commoncf64</tt></td><td><tt>usercf</tt></td></tr>
<tr><td><tt><a name="autodesktop">autodesktop</a></tt></td><td><tt>commondesktop</tt></td><td><tt>userdesktop</tt></td></tr>
<tr><td><tt><a name="autodocs">autodocs</a></tt></td><td><tt>commondocs</tt></td><td><tt>userdocs</tt></td></tr>
<tr><td><tt><a name="autopf">autopf</a></tt></td><td><tt>commonpf</tt></td><td><tt>userpf</tt></td></tr>
<tr><td><tt><a name="autopf32">autopf32</a></tt></td><td><tt>commonpf32</tt></td><td><tt>userpf</tt></td></tr>
<tr><td><tt><a name="autopf64">autopf64</a></tt></td><td><tt>commonpf64</tt></td><td><tt>userpf</tt></td></tr>
<tr><td><tt><a name="autoprograms">autoprograms</a></tt></td><td><tt>commonprograms</tt></td><td><tt>userprograms</tt></td></tr>
<tr><td><tt><a name="autostartmenu">autostartmenu</a></tt></td><td><tt>commonstartmenu</tt></td><td><tt>userstartmenu</tt></td></tr>
<tr><td><tt><a name="autostartup">autostartup</a></tt></td><td><tt>commonstartup</tt></td><td><tt>userstartup</tt></td></tr>
<tr><td><tt><a name="autotemplates">autotemplates</a></tt></td><td><tt>commontemplates</tt></td><td><tt>usertemplates</tt></td></tr>
</table>
</indent>

<heading>Renamed Constants</heading>

<p>Inno Setup 6 renamed some of the directory and shell folder constants. The old names are still supported, but it is recommended to update your scripts to the new names (or the "auto" form) and the compiler will issue a warning if you don't.</p>

<indent>
<table>
<tr><td><u>Old name</u></td><td><u>New name</u></td></tr>
<tr><td><tt><a name="cf">cf</a></tt></td><td><tt>commoncf</tt></td></tr>
<tr><td><tt><a name="cf32">cf32</a></tt></td><td><tt>commoncf32</tt></td></tr>
<tr><td><tt><a name="cf64">cf64</a></tt></td><td><tt>commoncf64</tt></td></tr>
<tr><td><tt><a name="pf">pf</a></tt></td><td><tt>commonpf</tt></td></tr>
<tr><td><tt><a name="pf32">pf32</a></tt></td><td><tt>commonpf32</tt></td></tr>
<tr><td><tt><a name="pf64">pf64</a></tt></td><td><tt>commonpf64</tt></td></tr>
<tr><td><tt><a name="sendto">sendto</a></tt></td><td><tt>usersendto</tt></td></tr>
</table>
</indent>

<heading>Other Constants</heading>

<dl>

<dt><b><a name="bs">{\}</a></b></dt>
<dd>
<p>A backslash character. See the note at the top of this page for an explanation of what the difference between using <tt>{\}</tt> and only a <tt>\</tt> is.</p>
</dd>

<dt><b><a name="name">{%<i>NAME</i>|<i>DefaultValue</i>}</a></b></dt>
<dd>
<p>Embeds the value of an environment variable.</p>
<ul>
<li><i>NAME</i> specifies the name of the environment variable to use.</li>
<li><i>DefaultValue</i> determines the string to embed if the specified variable does not exist on the user's system.</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li><i>NAME</i> and <i>DefaultValue</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<examples>
<pre>
{%COMSPEC}
{%PROMPT|$P$G}
</pre>
</examples>
</dd>

<dt><b><a name="cmd">{cmd}</a></b></dt>
<dd>
<p>The full pathname of the system's standard command interpreter, <i>Windows\System32\</i>cmd.exe. Note that the COMSPEC environment variable is not used when expanding this constant.</p>
</dd>

<dt><b><a name="computername">{computername}</a></b></dt>
<dd>
<p>The name of the computer the Setup or Uninstall program is running on (as returned by the Windows <i>GetComputerName</i> function).</p>
</dd>

<dt><b><a name="drive">{drive:<i>Path</i>}</a></b></dt>
<dd>
<p>Extracts and returns the drive letter and colon (e.g. "C:") from the specified path. In the case of a UNC path, it returns the server and share name (e.g. "\\SERVER\SHARE").</p>
<ul>
<li><i>Path</i> specifies the path.</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li><i>Path</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<examples>
<pre>
{drive:{src}}
{drive:c:\path\file}
{drive:\\server\share\path\file}
</pre>
</examples>
</dd>

<dt><b><a name="groupname">{groupname}</a></b></dt>
<dd>
<p>The name of the folder the user selected on Setup's <i>Select Start Menu Folder</i> wizard page. This differs from <tt>{group}</tt> in that it is only the name; it does not include a path.</p>
</dd>

<dt><b><a name="hwnd">{hwnd}</a></b></dt>
<dd>
<p><i>(Special-purpose)</i> Translates to the window handle of the Setup program's background window.</p>
</dd>

<dt><b><a name="wizardhwnd">{wizardhwnd}</a></b></dt>
<dd>
<p><i>(Special-purpose)</i> Translates to the window handle of the Setup wizard window. This handle is set to '0' if the window handle isn't available at the time the translation is done.</p>
</dd>

<dt><b><a name="ini">{ini:<i>Filename</i>,<i>Section</i>,<i>Key</i>|<i>DefaultValue</i>}</a></b></dt>
<dd>
<p>Embeds a value from an .INI file.</p>
<ul>
<li><i>Filename</i> specifies the name of the .INI file to read from.</li>
<li><i>Section</i> specifies the name of the section to read from.</li>
<li><i>Key</i> specifies the name of the key to read.</li>
<li><i>DefaultValue</i> determines the string to embed if the specified key does not exist.</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li><i>Filename, Section,</i> and <i>Key</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<example>
<pre>{ini:{win}\MyProg.ini,Settings,Path|{autopf}\My Program}</pre>
</example>
</dd>

<dt><b><a name="language">{language}</a></b></dt>
<dd>
<p>The internal name of the selected language. See the <link topic="languagessection">[Languages] section</link> documentation for more information.</p>
</dd>

<dt><b><a name="cm">{cm:<i>MessageName</i>}</a></b><br/>
<b>{cm:<i>MessageName</i>,<i>Arguments</i>}</b></dt>
<dd>
<p>Embeds a custom message value based on the active language.</p>
<ul>
<li><i>MessageName</i> specifies the name of custom message to read from. See the <link topic="custommessagessection">[CustomMessages] section</link> documentation for more information.</li>
<li><i>Arguments</i> optionally specifies a comma separated list of arguments to the message value.</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li>Each argument in <i>Arguments</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<example>
<pre>{cm:LaunchProgram,Inno Setup}</pre>
</example>
<p>The example above translates to "Launch Inno Setup" if English is the active language.</p>
</dd>

<dt><b><a name="reg">{reg:HK<i>xx</i>\<i>SubkeyName</i>,<i>ValueName</i>|<i>DefaultValue</i>}</a></b></dt>
<dd>
<p>Embeds a registry value.</p>
<ul>
<li>HK<i>xx</i> specifies the root key; see the <link topic="registrysection">[Registry]</link> section documentation for a list of possible root keys.</li>
<li><i>SubkeyName</i> specifies the name of the subkey to read from.</li>
<li><i>ValueName</i> specifies the name of the value to read; leave <i>ValueName</i> blank if you wish to read the "default" value of a key.</li>
<li><i>DefaultValue</i> determines the string to embed if the specified registry value does not exist, or is not a string type (REG_SZ or REG_EXPAND_SZ).</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li><i>SubkeyName, ValueName,</i> and <i>DefaultValue</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<example>
<pre>{reg:HKLM\Software\My Program,Path|{autopf}\My Program}</pre>
</example>
</dd>

<dt><b><a name="param">{param:<i>ParamName</i>|<i>DefaultValue</i>}</a></b></dt>
<dd>
<p>Embeds a command line parameter value.</p>
<ul>
<li><i>ParamName</i> specifies the name of the command line parameter to read from.</li>
<li><i>DefaultValue</i> determines the string to embed if the specified command line parameter does not exist, or its value could not be determined.</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li><i>ParamName</i> and <i>DefaultValue</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<example>
<pre>{param:Path|{autopf}\My Program}</pre>
</example>
<p>The example above translates to <tt>c:\My Program</tt> if the command line <tt>/Path="c:\My Program"</tt> was specified.</p>
</dd>

<dt><b><a name="srcexe">{srcexe}</a></b></dt>
<dd>
<p>The full pathname of the Setup program file, e.g. "C:\SETUP.EXE".</p>
</dd>

<dt><b><a name="uninstallexe">{uninstallexe}</a></b></dt>
<dd>
<p>The full pathname of the uninstall program extracted by Setup, e.g. "C:\Program Files\My Program\unins000.exe". This constant is typically used in an [Icons] section entry for creating an Uninstall icon. It is only valid if <tt>Uninstallable</tt> is <tt>yes</tt> (the default setting).</p>
</dd>

<dt><b><a name="sysuserinfoname">{sysuserinfoname}</a></b><br/>
<b><a name="sysuserinfoorg">{sysuserinfoorg}</a></b></dt>
<dd>
<p>The name and organization, respectively, that Windows is registered to. This information is read from the registry.</p>
</dd>

<dt><b><a name="userinfoname">{userinfoname}</a></b><br/>
<b><a name="userinfoorg">{userinfoorg}</a></b><br/>
<b><a name="userinfoserial">{userinfoserial}</a></b></dt>
<dd>
<p>The name, organization and serial number, respectively, that the user entered on the <i>User Information</i> wizard page (which can be enabled via the <tt>UserInfoPage</tt> directive). Typically, these constants are used in [Registry] or [INI] entries to save their values for later use.</p>
</dd>

<dt><b><a name="username">{username}</a></b></dt>
<dd>
<p>The name of the user who is running Setup or Uninstall program (as returned by the <i>GetUserName</i> function).</p>
</dd>

<dt><b><a name="log">{log}</a></b></dt>
<dd>
<p>The log file name, or an empty string if <link topic="setup_setuplogging">logging</link> is not enabled.</p>
</dd>

</dl>

</body>
</topic>



<topic name="commonparams" title="Common Parameters">
<keyword value="Common Parameters" />
<body>

<p>There are three optional <link topic="params">parameters</link> that are supported by all sections whose entries are separated into parameters. They are:</p>

<paramlist>

<param name="Languages">
<p>A space separated list of language names, telling Setup to which languages the entry belongs. If the end user selects a language from this list, the entry is processed (for example: the file is installed).</p>
<p>An entry without a <tt>Languages</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>
<p>Besides space separated lists, you may also use boolean expressions. See <link topic="componentstasksparams">Components and Tasks parameters</link> for examples of boolean expressions.</p>
<example>
<pre>Languages: en nl</pre>
</example>
</param>

<param name="MinVersion">
<p>A minimum <link topic="winvernotes">Windows version</link> for the entry to be processed. If you use "0" then the entry will never be processed. <link topic="buildnumnotes">Build numbers and/or service pack levels</link> may be included. This overrides any <tt>MinVersion</tt> directive in the script's <tt>[Setup]</tt> section.</p>
<p>An entry without a <tt>MinVersion</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>
<example>
<pre>MinVersion: 6.2</pre>
</example>
</param>

<param name="OnlyBelowVersion">
<p>Essentially the opposite of <tt>MinVersion</tt>. Specifies the minimum <link topic="winvernotes">Windows version</link> for the entry <i>not</i> to be processed. For example, if you put <tt>6.2</tt> and the user is running Windows 7, the entry <i>will</i> be processed, but if the user is running Windows 8 (which reports its version as 6.2) or later, it will <i>not</i> be processed. Putting "0" means there is no upper version limit. <link topic="buildnumnotes">Build numbers and/or service pack levels</link> may be included. This overrides any <tt>OnlyBelowVersion</tt> directive in the script's <tt>[Setup]</tt> section.</p>
<p>An entry without an <tt>OnlyBelowVersion</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>
<example>
<pre>OnlyBelowVersion: 6.2</pre>
</example>
</param>

</paramlist>

</body>
</topic>



<topic name="componentstasksparams" title="Components and Tasks Parameters">
<keyword value="Components and Tasks Parameters" />
<body>

<p>There are two optional <link topic="params">parameters</link> that are supported by all sections whose entries are separated into parameters, except [Types], [Components] and [Tasks]. They are:</p>

<paramlist>

<param name="Components">
<p>A space separated list of component names, telling Setup to which components the entry belongs. If the end user selects a component from this list, the entry is processed (for example: the file is installed).</p>
<p>An entry without a <tt>Components</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>
<example>
<pre>
[Files]
Source: "MYPROG.EXE"; DestDir: "{app}"; Components: main
Source: "MYPROG.CHM"; DestDir: "{app}"; Components: help
Source: "README.TXT"; DestDir: "{app}"
</pre>
</example>
</param>

<param name="Tasks">
<p>A space separated list of task names, telling Setup to which task the entry belongs. If the end user selects a task from this list, the entry is processed (for example: the file is installed).</p>
<p>An entry without a <tt>Tasks</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>
<p>Note that the <i>Don't create a Start Menu folder</i> checkbox on the <i>Select Start Menu Folder</i> wizard page doesn't affect [Icons] entries that have <tt>Tasks</tt> parameters since they have their own checkboxes.</p>
<example>
<pre>
[Icons]
Name: "{group}\My Program"; Filename: "{app}\MyProg.exe"; Components: main; Tasks: startmenu
Name: "{group}\My Program Help"; Filename: "{app}\MyProg.chm"; Components: help; Tasks: startmenu
Name: "{commondesktop}\My Program"; Filename: "{app}\MyProg.exe"; Components: main; Tasks: desktopicon
</pre>
</example>
</param>

</paramlist>

<p><br/>
Besides space separated lists, you may also use boolean expressions as Components and Tasks parameters. Supported operators include <tt>not</tt>, <tt>and</tt>, and <tt>or</tt>. For example:</p>

<precode>
[Components]
Name: a; Description: a
Name: b; Description: b

[Tasks]
Name: p; Description: a or b; Components: a or b
Name: q; Description: a and b; Components: a and b
Name: r; Description: not a or b; Components: not a or b
Name: s; Description: not (a or b); Components: not (a or b)
Name: t; Description: a or b - old style; Components: a b
</precode>

</body>
</topic>



<topic name="setupsection" title="[Setup] section">
<keyword value="[Setup] section" />
<keyword value="Setup" />
<body>

<p>This section contains global settings used by the installer and uninstaller. Certain directives are required for any installation you create. Here is an example of a <tt>[Setup]</tt> section:</p>

<precode>
[Setup]
AppName=My Program
AppVersion=1.5
DefaultDirName={autopf}\My Program
DefaultGroupName=My Program
</precode>

<p>By default, any leading or trailing whitespace in a directive's value will be stripped. It is possible to avoid this by surrounding the directive's value in double quotes (<tt>"</tt>).</p>

<p><br/>The following directives can be placed in the <tt>[Setup]</tt> section:</p>

<p>(<b>bold</b> = required)</p>

<heading>Compiler-related</heading>

<ul appearance="compact">
<li><link topic="setup_aslrcompatible">ASLRCompatible</link></li>
<li><link topic="setup_compression">Compression</link></li>
<li><link topic="setup_compressionthreads">CompressionThreads</link></li>
<li><link topic="setup_depcompatible">DEPCompatible</link></li>
<li><link topic="setup_diskclustersize">DiskClusterSize</link></li>
<li><link topic="setup_diskslicesize">DiskSliceSize</link></li>
<li><link topic="setup_diskspanning">DiskSpanning</link></li>
<li><link topic="setup_encryption">Encryption</link></li>
<li><link topic="setup_internalcompresslevel">InternalCompressLevel</link></li>
<li><link topic="setup_lzmaalgorithm">LZMAAlgorithm</link></li>
<li><link topic="setup_lzmablocksize">LZMABlockSize</link></li>
<li><link topic="setup_lzmadictionarysize">LZMADictionarySize</link></li>
<li><link topic="setup_lzmamatchfinder">LZMAMatchFinder</link></li>
<li><link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link></li>
<li><link topic="setup_lzmanumfastbytes">LZMANumFastBytes</link></li>
<li><link topic="setup_lzmauseseparateprocess">LZMAUseSeparateProcess</link></li>
<li><link topic="setup_mergeduplicatefiles">MergeDuplicateFiles</link></li>
<li><link topic="setup_output">Output</link></li>
<li><link topic="setup_outputbasefilename">OutputBaseFilename</link></li>
<li><link topic="setup_outputdir">OutputDir</link></li>
<li><link topic="setup_outputmanifestfile">OutputManifestFile</link></li>
<li><link topic="setup_reservebytes">ReserveBytes</link></li>
<li><link topic="setup_signeduninstaller">SignedUninstaller</link></li>
<li><link topic="setup_signeduninstallerdir">SignedUninstallerDir</link></li>
<li><link topic="setup_signtool">SignTool</link></li>
<li><link topic="setup_signtoolminimumtimebetween">SignToolMinimumTimeBetween</link></li>
<li><link topic="setup_signtoolretrycount">SignToolRetryCount</link></li>
<li><link topic="setup_signtoolretrydelay">SignToolRetryDelay</link></li>
<li><link topic="setup_signtoolrunminimized">SignToolRunMinimized</link></li>
<li><link topic="setup_slicesperdisk">SlicesPerDisk</link></li>
<li><link topic="setup_solidcompression">SolidCompression</link></li>
<li><link topic="setup_sourcedir">SourceDir</link></li>
<li><link topic="setup_terminalservicesaware">TerminalServicesAware</link></li>
<li><link topic="setup_useduserareaswarning">UsedUserAreasWarning</link></li>
<li><link topic="setup_usesetupldr">UseSetupLdr</link></li>
<li><link topic="setup_versioninfocompany">VersionInfoCompany</link></li>
<li><link topic="setup_versioninfocopyright">VersionInfoCopyright</link></li>
<li><link topic="setup_versioninfodescription">VersionInfoDescription</link></li>
<li><link topic="setup_versioninfooriginalfilename">VersionInfoOriginalFileName</link></li>
<li><link topic="setup_versioninfoproductname">VersionInfoProductName</link></li>
<li><link topic="setup_versioninfoproducttextversion">VersionInfoProductTextVersion</link></li>
<li><link topic="setup_versioninfoproductversion">VersionInfoProductVersion</link></li>
<li><link topic="setup_versioninfotextversion">VersionInfoTextVersion</link></li>
<li><link topic="setup_versioninfoversion">VersionInfoVersion</link></li>
</ul>

<heading>Installer-related</heading>

<p><b>Functional:</b> These directives affect the operation of the Setup program, or are saved and used later by the uninstaller.</p>

<ul appearance="compact">
<li><link topic="setup_allowcancelduringinstall">AllowCancelDuringInstall</link></li>
<li><link topic="setup_allownetworkdrive">AllowNetworkDrive</link></li>
<li><link topic="setup_allownoicons">AllowNoIcons</link></li>
<li><link topic="setup_allowrootdirectory">AllowRootDirectory</link></li>
<li><link topic="setup_allowuncpath">AllowUNCPath</link></li>
<li><link topic="setup_alwaysrestart">AlwaysRestart</link></li>
<li><link topic="setup_alwaysshowcomponentslist">AlwaysShowComponentsList</link></li>
<li><link topic="setup_alwaysshowdironreadypage">AlwaysShowDirOnReadyPage</link></li>
<li><link topic="setup_alwaysshowgrouponreadypage">AlwaysShowGroupOnReadyPage</link></li>
<li><link topic="setup_alwaysusepersonalgroup">AlwaysUsePersonalGroup</link></li>
<li><link topic="setup_appenddefaultdirname">AppendDefaultDirName</link></li>
<li><link topic="setup_appenddefaultgroupname">AppendDefaultGroupName</link></li>
<li><link topic="setup_appcomments">AppComments</link></li>
<li><link topic="setup_appcontact">AppContact</link></li>
<li><link topic="setup_appid">AppId</link></li>
<li><link topic="setup_appmodifypath">AppModifyPath</link></li>
<li><link topic="setup_appmutex">AppMutex</link></li>
<li><link topic="setup_appname"><b>AppName</b></link></li>
<li><link topic="setup_apppublisher">AppPublisher</link></li>
<li><link topic="setup_apppublisherurl">AppPublisherURL</link></li>
<li><link topic="setup_appreadmefile">AppReadmeFile</link></li>
<li><link topic="setup_appsupportphone">AppSupportPhone</link></li>
<li><link topic="setup_appsupporturl">AppSupportURL</link></li>
<li><link topic="setup_appupdatesurl">AppUpdatesURL</link></li>
<li><link topic="setup_appvername">AppVerName</link></li>
<li><link topic="setup_appversion"><b>AppVersion</b></link></li>
<li><link topic="setup_architecturesallowed">ArchitecturesAllowed</link></li>
<li><link topic="setup_architecturesinstallin64bitmode">ArchitecturesInstallIn64BitMode</link></li>
<li><link topic="setup_changesassociations">ChangesAssociations</link></li>
<li><link topic="setup_changesenvironment">ChangesEnvironment</link></li>
<li><link topic="setup_closeapplications">CloseApplications</link></li>
<li><link topic="setup_closeapplicationsfilter">CloseApplicationsFilter</link></li>
<li><link topic="setup_createappdir">CreateAppDir</link></li>
<li><link topic="setup_createuninstallregkey">CreateUninstallRegKey</link></li>
<li><link topic="setup_defaultdialogfontname">DefaultDialogFontName</link></li>
<li><link topic="setup_defaultdirname">DefaultDirName</link></li>
<li><link topic="setup_defaultgroupname">DefaultGroupName</link></li>
<li><link topic="setup_defaultuserinfoname">DefaultUserInfoName</link></li>
<li><link topic="setup_defaultuserinfoorg">DefaultUserInfoOrg</link></li>
<li><link topic="setup_defaultuserinfoserial">DefaultUserInfoSerial</link></li>
<li><link topic="setup_direxistswarning">DirExistsWarning</link></li>
<li><link topic="setup_disabledirpage">DisableDirPage</link></li>
<li><link topic="setup_disablefinishedpage">DisableFinishedPage</link></li>
<li><link topic="setup_disableprogramgrouppage">DisableProgramGroupPage</link></li>
<li><link topic="setup_disablereadymemo">DisableReadyMemo</link></li>
<li><link topic="setup_disablereadypage">DisableReadyPage</link></li>
<li><link topic="setup_disablestartupprompt">DisableStartupPrompt</link></li>
<li><link topic="setup_disablewelcomepage">DisableWelcomePage</link></li>
<li><link topic="setup_enabledirdoesntexistwarning">EnableDirDoesntExistWarning</link></li>
<li><link topic="setup_extradiskspacerequired">ExtraDiskSpaceRequired</link></li>
<li><link topic="setup_infoafterfile">InfoAfterFile</link></li>
<li><link topic="setup_infobeforefile">InfoBeforeFile</link></li>
<li><link topic="setup_languagedetectionmethod">LanguageDetectionMethod</link></li>
<li><link topic="setup_licensefile">LicenseFile</link></li>
<li><link topic="setup_minversion">MinVersion</link></li>
<li><link topic="setup_onlybelowversion">OnlyBelowVersion</link></li>
<li><link topic="setup_password">Password</link></li>
<li><link topic="setup_privilegesrequired">PrivilegesRequired</link></li>
<li><link topic="setup_privilegesrequiredoverridesallowed">PrivilegesRequiredOverridesAllowed</link></li>
<li><link topic="setup_restartapplications">RestartApplications</link></li>
<li><link topic="setup_restartifneededbyrun">RestartIfNeededByRun</link></li>
<li><link topic="setup_setuplogging">SetupLogging</link></li>
<li><link topic="setup_setupmutex">SetupMutex</link></li>
<li><link topic="setup_showlanguagedialog">ShowLanguageDialog</link></li>
<li><link topic="setup_timestamprounding">TimeStampRounding</link></li>
<li><link topic="setup_timestampsinutc">TimeStampsInUTC</link></li>
<li><link topic="setup_touchdate">TouchDate</link></li>
<li><link topic="setup_touchtime">TouchTime</link></li>
<li><link topic="setup_uninstallable">Uninstallable</link></li>
<li><link topic="setup_uninstalldisplayicon">UninstallDisplayIcon</link></li>
<li><link topic="setup_uninstalldisplayname">UninstallDisplayName</link></li>
<li><link topic="setup_uninstalldisplaysize">UninstallDisplaySize</link></li>
<li><link topic="setup_uninstallfilesdir">UninstallFilesDir</link></li>
<li><link topic="setup_uninstalllogmode">UninstallLogMode</link></li>
<li><link topic="setup_uninstallrestartcomputer">UninstallRestartComputer</link></li>
<li><link topic="setup_updateuninstalllogappname">UpdateUninstallLogAppName</link></li>
<li><link topic="setup_usepreviousappdir">UsePreviousAppDir</link></li>
<li><link topic="setup_usepreviousgroup">UsePreviousGroup</link></li>
<li><link topic="setup_usepreviouslanguage">UsePreviousLanguage</link></li>
<li><link topic="setup_usepreviousprivileges">UsePreviousPrivigeles</link></li>
<li><link topic="setup_useprevioussetuptype">UsePreviousSetupType</link></li>
<li><link topic="setup_useprevioustasks">UsePreviousTasks</link></li>
<li><link topic="setup_useprevioususerinfo">UsePreviousUserInfo</link></li>
<li><link topic="setup_userinfopage">UserInfoPage</link></li>
</ul>

<p><b>Cosmetic:</b> These directives only affect the appearance of the Setup program.</p>

<ul appearance="compact">
<li><link topic="setup_appcopyright">AppCopyright</link></li>
<li><link topic="setup_backcolor">BackColor</link></li>
<li><link topic="setup_backcolor">BackColor2</link></li>
<li><link topic="setup_backcolordirection">BackColorDirection</link></li>
<li><link topic="setup_backsolid">BackSolid</link></li>
<li><link topic="setup_flatcomponentslist">FlatComponentsList</link></li>
<li><link topic="setup_setupiconfile">SetupIconFile</link></li>
<li><link topic="setup_showcomponentsizes">ShowComponentSizes</link></li>
<li><link topic="setup_showtaskstreelines">ShowTasksTreeLines</link></li>
<li><link topic="setup_windowshowcaption">WindowShowCaption</link></li>
<li><link topic="setup_windowstartmaximized">WindowStartMaximized</link></li>
<li><link topic="setup_windowresizable">WindowResizable</link></li>
<li><link topic="setup_windowvisible">WindowVisible</link></li>
<li><link topic="setup_wizardimagealphaformat">WizardImageAlphaFormat</link></li>
<li><link topic="setup_wizardimagefile">WizardImageFile</link></li>
<li><link topic="setup_wizardimagestretch">WizardImageStretch</link></li>
<li><link topic="setup_wizardresizable">WizardResizable</link></li>
<li><link topic="setup_wizardsizepercent">WizardSizePercent</link></li>
<li><link topic="setup_wizardsmallimagefile">WizardSmallImageFile</link></li>
<li><link topic="setup_wizardstyle">WizardStyle</link></li>
</ul>

<heading>Obsolete</heading>

<p>These directives are obsolete and should not be used in any new scripts.</p>

<ul appearance="compact">
<li><link topic="setup_alwayscreateuninstallicon">AlwaysCreateUninstallIcon</link></li>
<li><link topic="setup_disableappenddir">DisableAppendDir</link></li>
<li><link topic="setup_dontmergeduplicatefiles">DontMergeDuplicateFiles</link></li>
<li><link topic="setup_messagesfile">MessagesFile</link></li>
<li><link topic="setup_uninstalliconfile">UninstallIconFile</link></li>
<li><link topic="setup_uninstalliconname">UninstallIconName</link></li>
<li><link topic="setup_uninstallstyle">UninstallStyle</link></li>
<li><link topic="setup_wizardimagebackcolor">WizardImageBackColor</link></li>
<li><link topic="setup_wizardsmallimagebackcolor">WizardSmallImageBackColor</link></li>
</ul>

</body>
</topic>



<topic name="typessection" title="[Types] section">
<keyword value="[Types] section" />
<keyword value="Types" />
<body>

<p>This section is optional. It defines all of the setup types Setup will show on the <i>Select Components</i> page of the wizard. During compilation a set of default setup types is created if you define components in a <link topic="componentssection">[Components] section</link> but don't define types. If you are using the default (English) messages file, these types are the same as the types in the example below.</p>

<p>Here is an example of a <tt>[Types]</tt> section:</p>

<precode>
[Types]
Name: "full"; Description: "Full installation"
Name: "compact"; Description: "Compact installation"
Name: "custom"; Description: "Custom installation"; Flags: iscustom
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Name" required="yes">
<p>The internal name of the type. Used as parameter for components in the [Components] section to instruct Setup to which types a component belongs.</p>
<example>
<pre>Name: "full"</pre>
</example>
</param>

<param name="Description" required="yes">
<p>The description of the type, which can include constants. This description is shown during installation.</p>
<example>
<pre>Description: "Full installation"</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="iscustom">
<p>Instructs Setup that the type is a custom type. Whenever the end user manually changes the components selection during installation, Setup will set the setup type to the custom type. Note that if you don't define a custom type, Setup will only allow the user to choose a setup type and he/she can no longer manually select/unselect components.</p>
<p>Only one type may include this flag.</p>
</flag>
</flaglist>

<example>
<pre>Flags: iscustom</pre>
</example>

</param>

</paramlist>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="componentssection" title="[Components] section">
<keyword value="[Components] section" />
<keyword value="Components" />
<body>

<p>This section is optional. It defines all of the components Setup will show on the <i>Select Components</i> page of the wizard for setup type customization.</p>

<p>By itself a component does nothing: it needs to be 'linked' to other installation entries. See <link topic="componentstasksparams">Components and Tasks Parameters</link>.</p>

<p>Here is an example of a <tt>[Components]</tt> section:</p>

<precode>
[Components]
Name: "main"; Description: "Main Files"; Types: full compact custom; Flags: fixed
Name: "help"; Description: "Help Files"; Types: full
Name: "help\english"; Description: "English"; Types: full
Name: "help\dutch"; Description: "Dutch"; Types: full
</precode>

<p>The example above generates four components: A "main" component which gets installed if the end user selects a type with name "full" or "compact" and a "help" component which has two child components and only gets installed if the end user selects the "full" type.</p>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Name" required="yes">
<p>The internal name of the component.</p>
<p>The total number of \ or / characters in the name of the component is called the level of the component. Any component with a level of 1 or more is a child component. The component listed before the child component with a level of 1 less than the child component, is the parent component. Other components with the same parent component as the child component are sibling components.</p>
<p>A child component can't be selected if its parent component isn't selected. A parent component can't be selected if none of its children are selected, unless a <tt>Components</tt> parameter directly references the parent component or the parent component includes the <tt>checkablealone</tt> flag.</p>
<p>If sibling components have the <tt>exclusive</tt> flag, only one of them can be selected.</p>
<example>
<pre>Name: "help"</pre>
</example>
</param>

<param name="Description" required="yes">
<p>The description of the component, which can include constants. This description is shown to the end user during installation.</p>
<example>
<pre>Description: "Help Files"</pre>
</example>
</param>

<param name="Types">
<p>A space separated list of types this component belongs to. If the end user selects a type from this list, this component will be installed.</p>
<p>If the <tt>fixed</tt> flag isn't used (see below), any custom types (types using the <tt>iscustom</tt> flag) in this list are ignored by Setup.</p>
<example>
<pre>Types: full compact</pre>
</example>
</param>

<param name="ExtraDiskSpaceRequired">
<p>The extra disk space required by this component, similar to the <link topic="setup_extradiskspacerequired">ExtraDiskSpaceRequired</link> directive for the [Setup] section.</p>
<example>
<pre>ExtraDiskSpaceRequired: 0</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="checkablealone">
<p>Specifies that the component can be checked when none of its children are. By default, if no <tt>Components</tt> parameter directly references the component, unchecking all of the component's children will cause the component to become unchecked.</p>
</flag>
<flag name="dontinheritcheck">
<p>Specifies that the component should not automatically become checked when its parent is checked. Has no effect on top-level components, and cannot be combined with the <tt>exclusive</tt> flag.</p>
</flag>
<flag name="exclusive">
<p>Instructs Setup that this component is mutually exclusive with sibling components that also have the <tt>exclusive</tt> flag.</p>
</flag>
<flag name="fixed">
<p>Instructs Setup that this component can not be manually selected or unselected by the end user during installation.</p>
</flag>
<flag name="restart">
<p>Instructs Setup to ask the user to restart the system if this component is installed, regardless of whether this is necessary (for example because of [Files] section entries with the <tt>restartreplace</tt> flag). Like <link topic="setup_alwaysrestart">AlwaysRestart</link> but per component.</p>
</flag>
<flag name="disablenouninstallwarning">
<p>Instructs Setup not to warn the user that this component will not be uninstalled after he/she deselected this component when it's already installed on his/her machine.</p>
<p>Depending on the complexity of your components, you can try to use the [InstallDelete] section and this flag to automatically 'uninstall' deselected components.</p>
</flag>
</flaglist>

<example>
<pre>Flags: fixed</pre>
</example>

</param>

</paramlist>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="taskssection" title="[Tasks] section">
<keyword value="[Tasks] section" />
<keyword value="Tasks" />
<body>

<p>This section is optional. It defines all of the user-customizable tasks Setup will perform during installation. These tasks appear as check boxes and radio buttons on the <i>Select Additional Tasks</i> wizard page.</p>

<p>By itself a task does nothing: it needs to be 'linked' to other installation entries. See <link topic="componentstasksparams">Components and Tasks Parameters</link>.</p>

<p>Here is an example of a <tt>[Tasks]</tt> section:</p>

<precode>
[Tasks]
Name: desktopicon; Description: "Create a &amp;desktop icon"; GroupDescription: "Additional icons:"; Components: main
Name: desktopicon\common; Description: "For all users"; GroupDescription: "Additional icons:"; Components: main; Flags: exclusive
Name: desktopicon\user; Description: "For the current user only"; GroupDescription: "Additional icons:"; Components: main; Flags: exclusive unchecked
Name: quicklaunchicon; Description: "Create a &amp;Quick Launch icon"; GroupDescription: "Additional icons:"; Components: main; Flags: unchecked
Name: associate; Description: "&amp;Associate files"; GroupDescription: "Other tasks:"; Flags: unchecked
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Name" required="yes">
<p>The internal name of the task.</p>
<p>The total number of \ or / characters in the name of the task is called the level of the task. Any task with a level of 1 or more is a child task. The task listed before the child task with a level of 1 less than the child task, is the parent task. Other tasks with the same parent task as the child task are sibling tasks.</p>
<p>A child task can't be selected if its parent task isn't selected. A parent task can't be selected if none of its children are selected, unless a <tt>Tasks</tt> parameter directly references the parent task or the parent task includes the <tt>checkablealone</tt> flag.</p>
<p>If sibling tasks have the <tt>exclusive</tt> flag, only one of them can be selected.</p>
<example>
<pre>Name: "desktopicon"</pre>
</example>
</param>

<param name="Description" required="yes">
<p>The description of the task, which can include constants. This description is shown to the end user during installation.</p>
<example>
<pre>Description: "Create a &amp;desktop icon"</pre>
</example>
</param>

<param name="GroupDescription">
<p>The group description of a group of tasks, which can include constants. Consecutive tasks with the same group description will be grouped below a text label. The text label shows the group description.</p>
<example>
<pre>GroupDescription: "Additional icons"</pre>
</example>
</param>

<param name="Components">
<p>A space separated list of components this task belongs to. If the end user selects a component from this list, this task will be shown. A task entry without a Components parameter is always shown.</p>
<example>
<pre>Components: main</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="checkablealone">
<p>Specifies that the task can be checked when none of its children are. By default, if no <tt>Tasks</tt> parameter directly references the task, unchecking all of the task's children will cause the task to become unchecked.</p>
</flag>
<flag name="checkedonce">
<p>Instructs Setup that this task should be unchecked initially when Setup finds a previous version of the <link topic="sameappnotes">same application</link> is already installed.</p>
<p>If the <tt>UsePreviousTasks [Setup]</tt> section directive is <tt>no</tt>, this flag is effectively disabled.</p>
</flag>
<flag name="dontinheritcheck">
<p>Specifies that the task should not automatically become checked when its parent is checked. Has no effect on top-level tasks, and cannot be combined with the <tt>exclusive</tt> flag.</p>
</flag>
<flag name="exclusive">
<p>Instructs Setup that this task is mutually exclusive with sibling tasks that also have the <tt>exclusive</tt> flag.</p>
</flag>
<flag name="restart">
<p>Instructs Setup to ask the user to restart the system at the end of installation if this task is selected, regardless of whether it is necessary (for example because of [Files] section entries with the <tt>restartreplace</tt> flag). Like <link topic="setup_alwaysrestart">AlwaysRestart</link> but per task.</p>
</flag>
<flag name="unchecked">
<p>Instructs Setup that this task should be unchecked initially.</p>
</flag>
</flaglist>

<example>
<pre>Flags: unchecked</pre>
</example>

</param>

</paramlist>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="dirssection" title="[Dirs] section">
<keyword value="[Dirs] section" />
<keyword value="Dirs" />
<body>

<p>This optional section defines any additional directories Setup is to create <i>besides</i> the application directory the user chooses, which is created automatically. Creating subdirectories underneath the main application directory is a common use for this section.</p>

<p>Note that you aren't required to explicitly create directories before installing files to them using the [Files] section, so this section is primarily useful for creating empty directories.</p>

<p>Here is an example of a <tt>[Dirs]</tt> section:</p>

<precode>
[Dirs]
Name: "{app}\data"
Name: "{app}\bin"
</precode>

<p>The example above will, after Setup creates the application directory, create two subdirectories underneath the application directory.</p>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Name" required="yes">
<p>The name of the directory to create, which normally will start with one of the directory constants.</p>
<example>
<pre>Name: "{app}\MyDir"</pre>
</example>
</param>

<param name="Attribs">
<p>Specifies additional attributes for the directory. This can include one or more of the following: <tt>readonly</tt>, <tt>hidden</tt>, <tt>system</tt>, <tt>notcontentindexed</tt>. If this parameter is not specified, Setup does not assign any special attributes to the directory.</p>
<p>If the directory already exists, the specified attributes will be combined with the directory's existing attributes.</p>
<example>
<pre>Attribs: hidden system</pre>
</example>
</param>

<param name="Permissions">
<p>Specifies additional permissions to grant in the directory's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>
<p>For this parameter to have an effect the directory must be located on a partition that supports ACLs (such as NTFS), and the current user must be able to change the permissions on the directory. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>
<p>This parameter should <i>only</i> be used on directories private to your application. Never change the ACLs on top-level directories like <tt>{sys}</tt> or <tt>{commonpf}</tt>, otherwise you can open up security holes on your users' systems.</p>
<p>In addition, it is recommended that you avoid using this parameter to grant write access on directories containing program files. Granting, for example, <tt>everyone-modify</tt> permission on the <tt>{app}</tt> directory will allow unprivileged users to tamper with your application's program files; this creates the potential for a privilege escalation vulnerability. (However, it is safe to change the permissions on a subdirectory of your application's directory which does not contain program files, e.g. <tt>{app}\data</tt>.)</p>
<p>The specified permissions are set regardless of whether the directory existed prior to installation.</p>
<p>This parameter can include one or more space separated values in the format:</p>
<indent><p><tt><link topic="usergroupids">&lt;user or group identifier&gt;</link>-&lt;access type&gt;</tt></p></indent>
<p>The following access types are supported for the [Dirs] section:</p>
<flaglist>
<flag name="full">
<p>Grants "Full Control" permission, which is the same as <tt>modify</tt> (see below), but additionally allows the specified user/group to take ownership of the directory and change its permissions. Use sparingly; generally, <tt>modify</tt> is sufficient.</p>
</flag>
<flag name="modify">
<p>Grants "Modify" permission, which allows the specified user/group to read, execute, create, modify, and delete files in the directory and its subdirectories.</p>
</flag>
<flag name="readexec">
<p>Grants "Read &amp; Execute" permission, which allows the specified user/group to read and execute files in the directory and its subdirectories.</p>
</flag>
</flaglist>
<example>
<pre>Permissions: users-modify</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="deleteafterinstall">
<p>Instructs Setup to create the directory as usual, but then delete it once the installation is completed (or aborted) if it's empty. This can be useful when extracting temporary data needed by a program executed in the script's [Run] section.</p>
<p>This flag will not cause directories that already existed before installation to be deleted.</p>
</flag>
<flag name="setntfscompression">
<p>Instructs Setup to enable NTFS compression on the directory. If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>
<p>If the directory already exists, the compression state of any files present in the directory will not be changed.</p>
</flag>
<flag name="uninsalwaysuninstall">
<p>Instructs the uninstaller to always attempt to delete the directory if it's empty. Normally the uninstaller will only try to delete the directory if it didn't already exist prior to installation.</p>
</flag>
<flag name="uninsneveruninstall">
<p>Instructs the uninstaller to not attempt to delete the directory. By default, the uninstaller deletes any directory specified in the [Dirs] section if it is empty.</p>
</flag>
<flag name="unsetntfscompression">
<p>Instructs Setup to disable NTFS compression on the directory. If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>
<p>If the directory already exists, the compression state of any files present in the directory will not be changed.</p>
</flag>
</flaglist>

<example>
<pre>Flags: uninsneveruninstall</pre>
</example>

</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="filessection" title="[Files] section">
<keyword value="[Files] section" />
<keyword value="Files" />
<body>

<p>This optional section defines any files Setup is to install on the user's system.</p>

<p>Here is an example of a <tt>[Files]</tt> section:</p>

<precode>
[Files]
Source: "CTL3DV2.DLL"; DestDir: "{sys}"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "MYPROG.EXE"; DestDir: "{app}"
Source: "MYPROG.CHM"; DestDir: "{app}"
Source: "README.TXT"; DestDir: "{app}"; Flags: isreadme
</precode>

<p>See the <i>Remarks</i> section at the bottom of this topic for some important notes.</p>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Source" required="yes">
<p>The name of the <i>source file</i>. The compiler will prepend the path of your installation's <link topic="sourcedirectorynotes">source directory</link> if you do not specify a fully qualified pathname.</p>
<p>This can be a wildcard to specify a group of files in a single entry. When a wildcard is used, all files matching it use the same options.</p>
<p>When the flag <tt>external</tt> is specified, <tt>Source</tt> must be the full pathname of an existing file (or wildcard) on the distribution media or the user's system (e.g. "{src}\license.ini").</p>
<p>Constants may only be used when the <tt>external</tt> flag is specified, because the compiler does not do any constant translating itself.</p>
<examples>
<pre>
Source: "MYPROG.EXE"
Source: "Files\*"
</pre>
</examples>
</param>

<param name="DestDir" required="yes">
<p>The directory where the file is to be installed on the user's system. Will almost always begin with one of the directory constants. If the specified path does not already exist on the user's system, it will be created automatically, and removed automatically during uninstallation if empty.</p>
<examples>
<pre>
DestDir: "{app}"
DestDir: "{app}\subdir"
</pre>
</examples>
</param>

<param name="DestName">
<p>This parameter specifies a new name for the file when it is installed on the user's system. By default, Setup uses the name from the <tt>Source</tt> parameter, so in most cases it's not necessary to specify this parameter.</p>
<example>
<pre>DestName: "MYPROG2.EXE"</pre>
</example>
</param>

<param name="Excludes">
<p>Specifies a list of patterns to exclude, separated by commas. This parameter cannot be combined with the <tt>external</tt> flag.</p>
<p>Patterns may include wildcard characters ("*" and "?"). Note that unlike the <tt>Source</tt> parameter, a simple Unix-style pattern matching routine is used for <tt>Excludes</tt>. Dots in the pattern are always significant, thus "*.*" will not exclude a file with no extension (instead, use just "*"). Also, question marks always match exactly one character, thus "?????" will not exclude files with names less than five characters long.</p>
<p>If a pattern starts with a backslash ("\") it is matched against the start of a path name, otherwise it is matched against the end of a path name. Thus "\foo" will only exclude a file named "foo" at the base of the tree. On the other hand, "foo" will exclude any file named "foo" anywhere in the tree.</p>
<p>The patterns may include backslashes. "foo\bar" will exclude both "foo\bar" and "subdir\foo\bar". "\foo\bar" will only exclude "foo\bar".</p>
<examples>
<pre>
Source: "*"; Excludes: "*.~*"
Source: "*"; Excludes: "*.~*,\Temp\*"; Flags: recursesubdirs
</pre>
</examples>
</param>

<param name="ExternalSize">
<p>This parameter must be combined with the <tt>external</tt> flag and specifies the size of the external file in bytes. If this parameter is not specified, Setup retrieves the file size at startup. Primarily useful for files that aren't available at startup, for example files located on a second disk when <link topic="setup_diskspanning">disk spanning</link> is being used.</p>
<example>
<pre>
ExternalSize: 1048576; Flags: external
</pre>
</example>
</param>

<param name="CopyMode">
<p>You should not use this parameter in any new scripts. This parameter was deprecated and replaced by flags in Inno Setup 3.0.5:</p>
<p>
<tt>CopyMode: normal -&gt; Flags: promptifolder</tt><br/>
<tt>CopyMode: alwaysskipifsameorolder -&gt; </tt>no flags<br/>
<tt>CopyMode: onlyifdoesntexist -&gt; Flags: onlyifdoesntexist</tt><br/>
<tt>CopyMode: alwaysoverwrite -&gt; Flags: ignoreversion</tt><br/>
<tt>CopyMode: dontcopy -&gt; Flags: dontcopy</tt>
</p>
<p>What was <tt>CopyMode: alwaysskipifsameorolder</tt> is now the default behavior. (The previous default was <tt>CopyMode: normal</tt>.)</p>
</param>

<param name="Attribs">
<p>Specifies additional attributes for the file. This can include one or more of the following: <tt>readonly</tt>, <tt>hidden</tt>, <tt>system</tt>, <tt>notcontentindexed</tt>. If this parameter is not specified, Setup does not assign any special attributes to the file.</p>
<example>
<pre>Attribs: hidden system</pre>
</example>
</param>

<param name="Permissions">
<p>Specifies additional permissions to grant in the file's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>
<p>For this parameter to have an effect the file must be located on a partition that supports ACLs (such as NTFS), and the current user must be able to change the permissions on the file. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>
<p>This parameter should <i>only</i> be used on files private to your application. Never change the ACLs on shared system files, otherwise you can open up security holes on your users' systems.</p>
<p>The specified permissions are set regardless of whether the file existed prior to installation.</p>
<p>This parameter can include one or more space separated values in the format:</p>
<indent><p><tt><link topic="usergroupids">&lt;user or group identifier&gt;</link>-&lt;access type&gt;</tt></p></indent>
<p>The following access types are supported for the [Files] section:</p>
<flaglist>
<flag name="full">
<p>Grants "Full Control" permission, which is the same as <tt>modify</tt> (see below), but additionally allows the specified user/group to take ownership of the file and change its permissions. Use sparingly; generally, <tt>modify</tt> is sufficient.</p>
</flag>
<flag name="modify">
<p>Grants "Modify" permission, which allows the specified user/group to read, execute, modify, and delete the file.</p>
</flag>
<flag name="readexec">
<p>Grants "Read &amp; Execute" permission, which allows the specified user/group to read and execute the file.</p>
</flag>
</flaglist>
<example>
<pre>Permissions: users-modify</pre>
</example>
</param>

<param name="FontInstall">
<p>Tells Setup the file is a font that needs to be installed. The value of this parameter is the name of the font as stored in the registry or WIN.INI. This must be exactly the same name as you see when you double-click the font file in Explorer. Note that Setup will automatically append " (TrueType)" to the end of the name.</p>
<p>If the file is not a TrueType font, you must specify the flag <tt>fontisnttruetype</tt> in the Flags parameter.</p>
<p>It's recommended that you use the flags <tt>onlyifdoesntexist</tt> and <tt>uninsneveruninstall</tt> when installing fonts to the {fonts} directory.</p>
<p>To successfully install a font, the user must be a member of the Administrators groups.</p>
<p>For compatibility with 64-bit Windows, fonts should not be installed to the <tt>{sys}</tt> directory. Use <tt>{fonts}</tt> as the destination directory instead.</p>
<example>
<pre>Source: "OZHANDIN.TTF"; DestDir: "{fonts}"; FontInstall: "Oz Handicraft BT"; Flags: onlyifdoesntexist uninsneveruninstall</pre>
</example>
</param>

<param name="StrongAssemblyName">
<p>Specifies the strong assembly name of the file. Used by Uninstall only.</p>
<p>This parameter is ignored if the <tt>gacinstall</tt> flag isn't also specified.</p>
<example>
<pre>StrongAssemblyName: "MyAssemblyName, Version=1.0.0.0, Culture=neutral, PublicKeyToken=abcdef123456, ProcessorArchitecture=MSIL"</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="32bit">
<p>Causes the <tt>{sys}</tt> constant to map to the 32-bit System directory when used in the <tt>Source</tt> and <tt>DestDir</tt> parameters, the <tt>regserver</tt> and <tt>regtypelib</tt> flags to treat the file as 32-bit, and the <tt>sharedfile</tt> flag to update the 32-bit SharedDLLs registry key. This is the default behavior in <link topic="32vs64bitinstalls">32-bit install mode</link>.</p>
</flag>
<flag name="64bit">
<p>Causes the <tt>{sys}</tt> constant to map to the 64-bit System directory when used in the <tt>Source</tt> and <tt>DestDir</tt> parameters, the <tt>regserver</tt> and <tt>regtypelib</tt> flags to treat the file as 64-bit, and the <tt>sharedfile</tt> flag to update the 64-bit SharedDLLs registry key. This is the default behavior in <link topic="32vs64bitinstalls">64-bit install mode</link>.</p>
</flag>
<flag name="allowunsafefiles">
<p>Disables the compiler's automatic checking for <link topic="unsafefiles">unsafe files</link>. It is strongly recommended that you DO NOT use this flag, unless you are absolutely sure you know what you're doing.</p>
</flag>
<flag name="comparetimestamp">
<p><i>(Not recommended; see below)</i><br/>
Instructs Setup to proceed to comparing time stamps if the file being installed already exists on the user's system, and at least one of the following conditions is true:</p>
<ul>
<li>Neither the existing file nor the file being installed has version info.</li>
<li>The <tt>ignoreversion</tt> flag is also used on the entry.</li>
<li>The <tt>replacesameversion</tt> flag isn't used, and the existing file and the file being installed have the same version number (as determined by the files' version info).</li>
</ul>
<p>If the existing file has an older time stamp than the file being installed, the existing file will replaced. Otherwise, it will not be replaced.</p>
<p>Use of this flag is <i>not recommended</i> except as a last resort, because there is an inherent issue with it: NTFS partitions store time stamps in UTC (unlike FAT partitions), which causes local time stamps -- what Inno Setup works with by default -- to shift whenever a user changes their system's time zone or when daylight saving time goes into or out of effect. This can create a situation where files are replaced when the user doesn't expect them to be, or not replaced when the user expects them to be.</p>
</flag>
<flag name="confirmoverwrite">
<p>Always ask the user to confirm before replacing an existing file.</p>
</flag>
<flag name="createallsubdirs">
<p>By default the compiler skips empty directories when it recurses subdirectories searching for the <tt>Source</tt> filename/wildcard. This flag causes these directories to be created at install time (just like if you created [Dirs] entries for them).</p>
<p>Must be combined with <tt>recursesubdirs</tt>.</p>
</flag>
<flag name="deleteafterinstall">
<p>Instructs Setup to install the file as usual, but then delete it once the installation is completed (or aborted). This can be useful for extracting temporary data needed by a program executed in the script's [Run] section.</p>
<p>This flag will not cause existing files that weren't replaced during installation to be deleted.</p>
<p>This flag cannot be combined with the <tt>isreadme</tt>, <tt>regserver</tt>, <tt>regtypelib</tt>, <tt>restartreplace</tt>, <tt>sharedfile</tt>, or <tt>uninsneveruninstall</tt> flags.</p>
</flag>
<flag name="dontcopy">
<p>Don't copy the file to the user's system during the normal file copying stage but do statically compile the file into the installation. This flag is useful if the file is handled by the [Code] section exclusively and extracted using <link topic="isxfunc_ExtractTemporaryFile">ExtractTemporaryFile</link>.</p>
</flag>
<flag name="dontverifychecksum">
<p>Prevents Setup from verifying the file checksum after extraction. Use this flag on files you wish to modify while already compiled into Setup.</p>
<p>Must be combined with <tt>nocompression</tt>.</p>
</flag>
<flag name="external">
<p>This flag instructs Inno Setup not to statically compile the file specified by the <tt>Source</tt> parameter into the installation files, but instead copy from an existing file on the distribution media or the user's system. See the <tt>Source</tt> parameter description for more information.</p>
</flag>
<flag name="fontisnttruetype">
<p>Specify this flag if the entry is installing a <i>non-TrueType</i> font with the <tt>FontInstall</tt> parameter.</p>
</flag>
<flag name="gacinstall">
<p>Install the file into the .NET Global Assembly Cache. When used in combination with <tt>sharedfile</tt>, the file will only be uninstalled when the reference count reaches zero.</p>
<p>To uninstall the file Uninstaller uses the strong assembly name specified by parameter <tt>StrongAssemblyName</tt>.</p>
<p>An exception will be raised if an attempt is made to use this flag on a system with no .NET Framework present.</p>
</flag>
<flag name="ignoreversion">
<p>Don't compare version info at all; replace existing files regardless of their version number.</p>
<p>This flag should only be used on files private to your application, <i>never</i> on shared system files.</p>
</flag>
<flag name="isreadme">
<p>File is the "README" file. Only <i>one</i> file in an installation can have this flag. When a file has this flag, the user will asked if he/she would like to view the README file after the installation has completed. If Yes is chosen, Setup will open the file, using the default program for the file type. For this reason, the README file should always end with an extension like .txt, .wri, or .doc.</p>
<p>Note that if Setup has to restart the user's computer (as a result of installing a file with the flag <tt>restartreplace</tt> or if the <tt>AlwaysRestart</tt> <tt>[Setup]</tt> section directive is <tt>yes</tt>), the user will not be given an option to view the README file.</p>
</flag>
<flag name="nocompression">
<p>Prevents the compiler from attempting to compress the file. Use this flag on file types that you know can't benefit from compression (for example, JPEG images) to speed up the compilation process and save a few bytes in the resulting installation.</p>
</flag>
<flag name="noencryption">
<p>Prevents the file from being stored encrypted. Use this flag if you have enabled encryption (using the [Setup] section directive <tt>Encryption</tt>) but want to be able to extract the file using the [Code] section support function <link topic="isxfunc_ExtractTemporaryFile">ExtractTemporaryFile</link> before the user has entered the correct password.</p>
</flag>
<flag name="noregerror">
<p>When combined with either the <tt>regserver</tt> or <tt>regtypelib</tt> flags, Setup will not display any error message if the registration fails.</p>
</flag>
<flag name="onlyifdestfileexists">
<p>Only install the file if a file of the same name already exists on the user's system. This flag may be useful if your installation is a patch to an existing installation, and you don't want files to be installed that the user didn't already have.</p>
</flag>
<flag name="onlyifdoesntexist">
<p>Only install the file if it doesn't already exist on the user's system.</p>
</flag>
<flag name="overwritereadonly">
<p>Always overwrite a read-only file. Without this flag, Setup will ask the user if an existing read-only file should be overwritten.</p>
</flag>
<flag name="promptifolder">
<p>By default, when a file being installed has an older version number (or older time stamp, when the <tt>comparetimestamp</tt> flag is used) than an existing file, Setup will not replace the existing file. (See the <i>Remarks</i> section at the bottom of this topic for more details.) When this flag is used, Setup will ask the user whether the file should be replaced, with the default answer being to keep the existing file.</p>
</flag>
<flag name="recursesubdirs">
<p>Instructs the compiler or Setup to also search for the <tt>Source</tt> filename/wildcard in subdirectories under the <tt>Source</tt> directory.</p>
</flag>
<flag name="regserver">
<p>Register the DLL/OCX file. With this flag set, Setup will call the DllRegisterServer function exported by the DLL/OCX file, and the uninstaller will call DllUnregisterServer prior to removing the file. When used in combination with <tt>sharedfile</tt>, the DLL/OCX file will only be unregistered when the reference count reaches zero.</p>
<p>In <link topic="32vs64bitinstalls">64-bit install mode</link>, the file is assumed to be a 64-bit image and will be registered inside a 64-bit process. You can override this by specifying the <tt>32bit</tt> flag.</p>
<p>See the <i>Remarks</i> at the bottom of this topic for more information.</p>
</flag>
<flag name="regtypelib">
<p>Register the type library (.tlb). The uninstaller will unregister the type library (unless the flag <tt>uninsneveruninstall</tt> is specified). As with the <tt>regserver</tt> flag, when used in combination with <tt>sharedfile</tt>, the file will only be unregistered by the uninstaller when the reference count reaches zero.</p>
<p>In <link topic="32vs64bitinstalls">64-bit install mode</link> running on an x64 edition of Windows, the type library will be registered inside a 64-bit process. You can override this by specifying the <tt>32bit</tt> flag.</p>
<p>Registering type libraries in 64-bit mode on Itanium editions of Windows is not supported.</p>
<p>See the <i>Remarks</i> at the bottom of this topic for more information.</p>
</flag>
<flag name="replacesameversion">
<p>When this flag is used and the file already exists on the user's system and it has the same version number as the file being installed, Setup will compare the files and replace the existing file if their contents differ.</p>
<p>The default behavior (i.e. when this flag isn't used) is to not replace an existing file with the same version number.</p>
</flag>
<flag name="restartreplace">
<p>When an existing file needs to be replaced, and it is in use (locked) by another running process, Setup will by default display an error message. This flag tells Setup to instead register the file to be replaced the next time the system is restarted (by calling MoveFileEx or by creating an entry in WININIT.INI). When this happens, the user will be prompted to restart their computer at the end of the installation process.</p>
<p><b>NOTE:</b> This flag has no effect if the user does not have administrative privileges. Therefore, when using this flag, it is recommended that you leave the <link topic="setup_privilegesrequired">PrivilegesRequired</link> [Setup] section directive at the default setting of <tt>admin</tt>.</p>
</flag>
<flag name="setntfscompression">
<p>Instructs Setup to enable NTFS compression on the file (even if it didn't replace the file). If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>
</flag>
<flag name="sharedfile">
<p>Specifies that the file is shared among multiple applications, and should only be removed at uninstall time if no other applications are using it. Most files installed to the Windows System directory should use this flag, including .OCX, .BPL, and .DPL files.</p>
<p>Windows' standard shared file reference-counting mechanism (located in the registry under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\SharedDLLs) is used to keep track of how many applications depend on the file. Each time the file is installed, the reference count for the file is incremented. (This happens regardless of whether the installer actually replaces the file on disk.) When an application using the file is uninstalled, the reference count is decremented. If the count reaches zero, the file is deleted (with the user's confirmation, unless the <tt>uninsnosharedfileprompt</tt> flag is also specified).</p>
<p>If Setup is run more than once, the reference count for the file will be incremented more than once. The uninstaller will decrement the reference count the same number of times, however, so no references are leaked (provided the <link topic="setup_uninstalllogmode">UninstallLogMode</link> [Setup] section directive isn't changed from its default setting of <tt>append</tt>).</p>
<p>When this flag is used, do not specify <tt>{syswow64}</tt> in the <tt>DestDir</tt> parameter; use <tt>{sys}</tt> instead. Even though <tt>{sys}</tt> and <tt>{syswow64}</tt> map to the same underlying directory in <link topic="32vs64bitinstalls">32-bit install mode</link>, the path name must exactly match what every other existing installer is using; otherwise, a second reference count for the file would be created, which could result in the file being removed prematurely. If you need to install a shared file to the 32-bit System directory in <link topic="32vs64bitinstalls">64-bit install mode</link>, specify <tt>{sys}</tt> in the <tt>DestDir</tt> parameter and additionally include the <tt>32bit</tt> flag.</p>
</flag>
<flag name="sign">
<p>This flag instructs the compiler to digitally sign the original source files before storing them. Ignored if [Setup] section directive <link topic="setup_signtool">SignTool</link> is not set.</p>
</flag>
<flag name="signonce">
<p>This flag instructs the compiler to digitally sign the original source files before storing them, but only if the files are not already signed. Ignored if [Setup] section directive <link topic="setup_signtool">SignTool</link> is not set.</p>
</flag>
<flag name="skipifsourcedoesntexist">
<p>This flag instructs the compiler -- or Setup, if the <tt>external</tt> flag is also used -- to silently skip over the entry if the source file does not exist, instead of displaying an error message.</p>
</flag>
<flag name="solidbreak">
<p>When <link topic="setup_solidcompression">solid compression</link> is enabled, this flag instructs the compiler to finalize the current compression stream and begin a new one before compressing the file(s) matched by <tt>Source</tt>. This allows Setup to seek to the file instantly without having to decompress any preceding files first. May be useful in a large, multi-component installation if you find too much time is being spent decompressing files belonging to components that weren't selected.</p>
</flag>
<flag name="sortfilesbyextension">
<p>This flag instructs the compiler to compress the found files sorted by extension before it sorts by path name. This potentially decreases the size of Setup if <link topic="setup_solidcompression">solid compression</link> is also used.</p>
</flag>
<flag name="sortfilesbyname">
<p>This flag instructs the compiler to compress the found files sorted by name before it sorts by path name. This potentially decreases the size of Setup if <link topic="setup_solidcompression">solid compression</link> is also used. If <tt>sortfilesbyextension</tt> is also used, files are first sorted by extension.</p>
</flag>
<flag name="touch">
<p>This flag causes Setup to set the time/date stamp of the installed file(s) to that which is specified by the <link topic="setup_touchdate">TouchDate</link> and <link topic="setup_touchtime">TouchTime</link> [Setup] section directives.</p>
<p>This flag has no effect if combined with the <tt>external</tt> flag.</p>
</flag>
<flag name="uninsnosharedfileprompt">
<p>When uninstalling the shared file, automatically remove the file if its reference count reaches zero instead of asking the user. Must be combined with the <tt>sharedfile</tt> flag to have an effect.</p>
</flag>
<flag name="uninsremovereadonly">
<p>When uninstalling the file, remove any read-only attribute from the file before attempting to delete it.</p>
</flag>
<flag name="uninsrestartdelete">
<p>When this flag is used and the file is in use at uninstall time, the uninstaller will queue the file to be deleted when the system is restarted, and at the end of the uninstallation process ask the user if he/she wants to restart. This flag can be useful when uninstalling things like shell extensions which cannot be programmatically stopped. Note that administrative privileges are required for this flag to have an effect.</p>
</flag>
<flag name="uninsneveruninstall">
<p>Never remove the file. This flag can be useful when installing very common shared files that shouldn't be deleted under any circumstances, such as MFC DLLs.</p>
<p>Note that if this flag is combined with the <tt>sharedfile</tt> flag, the file will never be deleted at uninstall time but the reference count will still be properly decremented.</p>
</flag>
<flag name="unsetntfscompression">
<p>Instructs Setup to disable NTFS compression on the file (even if it didn't replace the file). If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>
</flag>
</flaglist>

<example>
<pre>Flags: isreadme</pre>
</example>

</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

<heading>Remarks</heading>

<p>If a file already exists on the user's system, it by default will be replaced according to the following rules:</p>
<ol>
<li>If the existing file is an older version than the file being installed (as determined by the files' version info), the existing file will be replaced.</li>
<li>If the existing file is the same version as the file being installed, the existing file will not be replaced, except if the <tt>replacesameversion</tt> flag is used and the content of the two files differs.</li>
<li>If the existing file is a newer version than the file being installed, or if the existing file has version info but the file being installed does not, the existing file will not be replaced.</li>
<li>If the existing file does not have version info, it will be replaced.</li>
</ol>
<p>Certain flags such as <tt>onlyifdoesntexist</tt>, <tt>ignoreversion</tt>, and <tt>promptifolder</tt> alter the aforementioned rules.</p>

<p>If Setup is unable to replace an existing file because it is in use by another process, it will make up to 4 additional attempts to replace the file, delaying one second before each attempt. If all attempts fail, an error message will be displayed.</p>

<p>Setup registers all files with the <tt>regserver</tt> or <tt>regtypelib</tt> flags as the last step of installation. However, if the <tt>[Setup]</tt> section directive <tt>AlwaysRestart</tt> is <tt>yes</tt>, or if there are files with the <tt>restartreplace</tt> flag, all files get registered on the next reboot (by creating an entry in Windows' <i>RunOnce</i> registry key).</p>

<p>When files with a .HLP extension (Windows help files) are uninstalled, the corresponding .GID and .FTS files are automatically deleted as well. Similarly, when a .CHM (HTML Help) file is deleted, any .CHW (generated index) file is automatically deleted.</p>

</body>
</topic>



<topic name="iconssection" title="[Icons] section">
<keyword value="[Icons] section" />
<keyword value="Icons" />
<body>

<p>This optional section defines any shortcuts Setup is to create in the Start Menu and/or other locations, such as the desktop.</p>

<p>Here is an example of an <tt>[Icons]</tt> section:</p>

<precode>
[Icons]
Name: "{group}\My Program"; Filename: "{app}\MYPROG.EXE"; WorkingDir: "{app}"
Name: "{group}\Uninstall My Program"; Filename: "{uninstallexe}"
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Name" required="yes">
<p>The name and location of the shortcut to create. Any of the shell folder constants or directory constants may be used in this parameter.</p>
<p>Keep in mind that shortcuts are stored as literal files so any characters not allowed in normal filenames can't be used here. Also, because it's not possible to have two files with the same name, it's therefore not possible to have two shortcuts with the same name.</p>
<examples>
<pre>
Name: "{group}\My Program"
Name: "{group}\Subfolder\My Program"
Name: "{commondesktop}\My Program"
Name: "{commonprograms}\My Program"
Name: "{commonstartup}\My Program"
</pre>
</examples>
</param>

<param name="Filename" required="yes">
<p>The command line filename for the shortcut, which normally begins with a directory constant.</p>
<p>In addition to file and folder names, URLs (web site addresses) may also be specified. When a URL is specified, Setup will create an "Internet Shortcut" (.url) file, and ignore the <tt>Parameters</tt>, <tt>WorkingDir</tt>, <tt>HotKey</tt>, and <tt>Comment</tt> parameters.</p>
<p>On 64-bit Windows, note that the <tt>{sys}</tt> constant will map to the native 64-bit System directory when the shortcut is launched by a 64-bit process, such as Windows Explorer. This is true regardless of whether the install is running in <link topic="32vs64bitinstalls">64-bit install mode</link>. To create a shortcut that always points to the 32-bit System directory, use <tt>{syswow64}</tt> instead. (The same applies to the <tt>WorkingDir</tt> and <tt>IconFilename</tt> parameters.)</p>
<examples>
<pre>
Filename: "{app}\MYPROG.EXE"
Filename: "{uninstallexe}"
Filename: "{app}\FolderName"
Filename: "http://www.example.com/"
</pre>
</examples>
</param>

<param name="Parameters">
<p>Optional command line parameters for the shortcut, which can include constants.</p>
<example>
<pre>Parameters: "/play filename.mid"</pre>
</example>
</param>

<param name="WorkingDir">
<p>The working (or <i>Start In</i>) directory for the shortcut, which specifies the initial current directory for the program. This parameter can include constants.</p>
<p>If this parameter is not specified or is blank, Setup will try to extract a directory name from the <tt>Filename</tt> parameter. If that fails (unlikely), the working directory will be set to <tt>{sys}</tt>.</p>
<example>
<pre>WorkingDir: "{app}"</pre>
</example>
</param>

<param name="HotKey">
<p>The hot key (or "shortcut key") setting for the shortcut, which is a combination of keys with which the program can be started.</p>
<p>Note: If you change the shortcut key and reinstall the application, Windows may continue to recognize old shortcut key(s) until you log off and back on or restart the system.</p>
<example>
<pre>HotKey: "ctrl+alt+k"</pre>
</example>
</param>

<param name="Comment">
<p>Specifies the <i>Comment</i> (or "description") field of the shortcut, which determines the popup hint for it. This parameter can include constants.</p>
<example>
<pre>Comment: "This is my program"</pre>
</example>
</param>

<param name="IconFilename">
<p>The filename of a custom icon (located on the user's system) to be displayed. This can be an executable image (.exe, .dll) containing icons or a .ico file. If this parameter is not specified or is blank, Windows will use the file's default icon. This parameter can include constants.</p>
<example>
<pre>IconFilename: "{app}\myicon.ico"</pre>
</example>
<p>Note: when Setup is running on 64-bit Windows, it will automatically replace <tt>{commonpf32}\</tt>'s value in the filename with '%ProgramFiles(x86)%\' to work around a bug in 64-bit Windows: 64-bit Windows replaces it with '%ProgramFiles%\' instead which is incorrect.</p>
</param>

<param name="IconIndex">
<p>Zero-based index of the icon to use in the file specified by <tt>IconFilename</tt>. Defaults to <tt>0</tt>.</p>
<p>If <tt>IconIndex</tt> is non-zero and <tt>IconFilename</tt> is not specified or is blank, it will act as if <tt>IconFilename</tt> is the same as <tt>Filename</tt>.</p>
<example>
<pre>IconIndex: 0</pre>
</example>
</param>

<param name="AppUserModelID">
<p>Specifies the Windows 7 (or later) Application User Model ID for the shortcut. Ignored on earlier Windows versions. This parameter can include constants.</p>
<example>
<pre>AppUserModelID: "MyCompany.MyProg"</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="closeonexit">
<p>When this flag is set, Setup will set the "Close on Exit" property of the shortcut. This flag only has an effect if the shortcut points to an MS-DOS application (if it has a .pif extension, to be specific). If neither this flag nor the <tt>dontcloseonexit</tt> flags are specified, Setup will not attempt to change the "Close on Exit" property.</p>
</flag>
<flag name="createonlyiffileexists">
<p>When this flag is set, the installer will only try to create the icon if the file specified by the <tt>Filename</tt> parameter exists.</p>
</flag>
<flag name="dontcloseonexit">
<p>Same as <tt>closeonexit</tt>, except it causes Setup to uncheck the "Close on Exit" property.</p>
</flag>
<flag name="excludefromshowinnewinstall">
<p>Prevents the Start menu entry for the new shortcut from receiving a highlight on Windows 7 and additionally prevents the new shortcut from being automatically pinned the Start screen on Windows 8 (or later). Ignored on earlier Windows versions.</p>
</flag>
<flag name="foldershortcut">
<p>Creates a special type of shortcut known as a "Folder Shortcut". Normally, when a shortcut to a folder is present on the Start Menu, clicking the item causes a separate Explorer window to open showing the target folder's contents. In contrast, a "folder shortcut" will show the contents of the target folder as a submenu instead of opening a separate window.</p>
<p>This flag is currently ignored when running on Windows 7 (or later), as folder shortcuts do not expand properly on the Start Menu anymore. It is not known whether this is a bug in Windows 7 or a removed feature.</p>
<p>When this flag is used, a folder name must be specified in the <tt>Filename</tt> parameter. Specifying the name of a file will result in a non-working shortcut.</p>
</flag>
<flag name="preventpinning">
<p>Prevents a Start menu entry from being pinnable to Taskbar or the Start Menu on Windows 7 (or later). This also makes the entry ineligible for inclusion in the Start menu's Most Frequently Used (MFU) list. Ignored on earlier Windows versions.</p>
</flag>
<flag name="runmaximized">
<p>When this flag is set, Setup sets the "Run" setting of the icon to "Maximized" so that the program will be initially maximized when it is started.</p>
</flag>
<flag name="runminimized">
<p>When this flag is set, Setup sets the "Run" setting of the icon to "Minimized" so that the program will be initially minimized when it is started.</p>
</flag>
<flag name="uninsneveruninstall">
<p>Instructs the uninstaller not to delete the icon.</p>
</flag>
<flag name="useapppaths">
<p>When this flag is set, specify just a filename (no path) in the <tt>Filename</tt> parameter, and Setup will retrieve the pathname from the "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths" registry key and prepend it to the filename automatically.</p>
</flag>
</flaglist>

<example>
<pre>Flags: runminimized</pre>
</example>

</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="inisection" title="[INI] section">
<keyword value="[INI] section" />
<keyword value="INI" />
<body>

<p>This optional section defines any .INI file entries you would like Setup to set on the user's system.</p>

<p>Here is an example of an <tt>[INI]</tt> section:</p>

<precode>
[INI]
Filename: "MyProg.ini"; Section: "InstallSettings"; Flags: uninsdeletesection
Filename: "MyProg.ini"; Section: "InstallSettings"; Key: "InstallPath"; String: "{app}"
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Filename" required="yes">
<p>The name of the .INI file you want Setup to modify, which can include constants. If this parameter does not include a path, it will write to the Windows directory. If this parameter is blank, it will write to WIN.INI in the Windows directory.</p>
<example>
<pre>Filename: "{app}\MyProg.ini"</pre>
</example>
</param>

<param name="Section" required="yes">
<p>The name of the section in which to create the entry, which can include constants.</p>
<example>
<pre>Section: "Settings"</pre>
</example>
</param>

<param name="Key">
<p>The name of the key to set, which can include constants. If this parameter is not specified or is blank, no key is created.</p>
<example>
<pre>Key: "Version"</pre>
</example>
</param>

<param name="String">
<p>The value to assign to the key, which can use constants. If this parameter is not specified, no key is created.</p>
<example>
<pre>String: "1.0"</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="createkeyifdoesntexist">
<p>Assign to the key <i>only</i> if the key doesn't already exist in the file. If this flag is <i>not</i> specified, the key will be set regardless of whether it already existed.</p>
</flag>
<flag name="uninsdeleteentry">
<p>Delete the entry when the program is uninstalled. This can be combined with the <tt>uninsdeletesectionifempty</tt> flag.</p>
</flag>
<flag name="uninsdeletesection">
<p>When the program is uninstalled, delete the entire section in which the entry is located. It obviously wouldn't be a good idea to use this on a section that is used by Windows itself (like some of the sections in WIN.INI). You should only use this on sections private to your application.</p>
</flag>
<flag name="uninsdeletesectionifempty">
<p>Same as <tt>uninsdeletesection</tt>, but deletes the section only if there are no keys left in it. This can be combined with the <tt>uninsdeleteentry</tt> flag.</p>
</flag>
</flaglist>

<example>
<pre>Flags: uninsdeleteentry</pre>
</example>

</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="installdeletesection" title="[InstallDelete] section">
<keyword value="[InstallDelete] section" />
<keyword value="InstallDelete" />
<body>

<p>This optional section is identical in format to the <link topic="uninstalldeletesection">[UninstallDelete]</link> section, except its entries are processed as the first step of <i>installation.</i></p>

</body>
</topic>



<topic name="languagessection" title="[Languages] section">
<keyword value="[Languages] section" />
<keyword value="Languages" />
<keyword value="language" />
<body>

<p>Inno Setup supports multilingual installations. The [Languages] section defines the languages to make available to the Setup program.</p>

<p>Setup determines the default language to use for its messages in the following order:</p>

<ol>
<li>It searches for a language whose <tt>LanguageID</tt> setting (normally specified in the [LangOptions] section of the language's .isl file) matches both the primary language identifier and sublanguage identifier of the current user's UI language or locale (depending on the setting of <link topic="setup_languagedetectionmethod">LanguageDetectionMethod</link>).</li>
<li>If no match is found, it searches for just a primary language identifier match. If two or more available languages have the same primary language identifier, it selects the first one listed in the [Languages] section.<br />Exception: Simplified Chinese is excluded from consideration in this step if the user's UI language or locale (depending on the setting of <link topic="setup_languagedetectionmethod">LanguageDetectionMethod</link>) is Traditional Chinese, and vice versa.</li>
<li>If no match is found, it defaults to the first language specified in the [Languages] section.</li>
</ol>

<p>If the <link topic="setup_showlanguagedialog">ShowLanguageDialog</link> [Setup] section directive is set to <tt>yes</tt> (the default), a <i>Select Language</i> dialog will be displayed which gives the user an opportunity to override the language Setup chose. See the <link topic="langoptionssection">[LangOptions] section</link> help topic for details.</p>

<p>The following is an example of a <tt>[Languages]</tt> section. It defines two languages: English, based on the standard Default.isl file, and Dutch, based on a third-party translation.</p>

<precode>
[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"
Name: "nl"; MessagesFile: "compiler:Languages\Dutch.isl"
</precode>

<paramlist>

<param name="Name" required="yes">
<p>The internal name of the language, which you can set to anything you like. This can used as a prefix on [LangOptions] or [Messages] section entries to have the entries apply to only one language. The {language} constant returns the internal name of the selected language.</p>
<example>
<pre>Name: "en"</pre>
</example>
</param>

<param name="MessagesFile" required="yes">
<p>Specifies the name(s) of the .isl file(s) to read the default messages from. The file(s) must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>Each message file may contain a <link topic="langoptionssection">[LangOptions] section</link>, a <link topic="messagessection">[Messages] section</link>, and a <link topic="custommessagessection">[CustomMessages] section.</link></p>
<p>When multiple files are specified, they are read in the order they are specified, thus the last message file overrides any language options or messages from previous files. Any language options or messages in the main script override the ones from message files.</p>
<examples>
<pre>
MessagesFile: "compiler:Dutch.isl"
MessagesFile: "compiler:Default.isl,compiler:MyMessages.isl"
</pre>
</examples>
</param>

<param name="LicenseFile">
<p>Specifies the name of an optional license agreement file, in .txt or .rtf (rich text) format, which is displayed before the user selects the destination directory for the program. This file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<example>
<pre>LicenseFile: "license-Dutch.txt"</pre>
</example>
</param>

<param name="InfoBeforeFile">
<p>Specifies the name of an optional "readme" file, in .txt or .rtf (rich text) format, which is displayed before the user selects the destination directory for the program. This file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<example>
<pre>InfoBeforeFile: "infobefore-Dutch.txt"</pre>
</example>
</param>

<param name="InfoAfterFile">
<p>Specifies the name of an optional "readme" file, in .txt or .rtf (rich text) format, which is displayed after a successful install. This file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>This differs from <tt>isreadme</tt> files in that this text is displayed as a page of the wizard, instead of in a separate Notepad window.</p>
<example>
<pre>InfoAfterFile: "infoafter-Dutch.txt"</pre>
</example>
</param>

</paramlist>

</body>
</topic>



<topic name="messagessection" title="[Messages] section">
<keyword value="[Messages] section" />
<keyword value="Messages" />
<keyword value="Default.isl" anchor="Default.isl" />
<keyword value="language" />
<keyword value="BeveledLabel" anchor="BeveledLabel" />
<body>

<p>A [Messages] section is used to define the messages displayed by the Setup program and uninstaller. Normally, you need not create a [Messages] section in your script file, since all messages are, by default, pulled in from the file <a name="Default.isl"><i>Default.isl</i></a> included with Inno Setup (or whichever file is specified by a [Languages] section entry).</p>

<p>However, particular messages can be overridden by creating a [Messages] section in your script file. To do this, first you will need to know the ID of the message you want to change. This can be easily found by searching Default.isl. For example, say you wanted to change the "&amp;Next &gt;" button on the wizard to read "&amp;Forward &gt;". The ID of this message is "ButtonNext", so you would create a [Messages] section like this:</p>

<precode>
[Messages]
ButtonNext=&amp;Forward &gt;
</precode>

<p>Some messages take arguments such as %1 and %2. You can rearrange the order of the arguments (i.e. move the %2 before a %1) and also duplicate arguments if needed (i.e. "%1 ... %1 %2"). On messages with arguments, use two consecutive "%" characters to embed a single "%". "%n" creates a line break.</p>

<p>If you wish to translate all of Inno Setup's text to another language, instead of modifying Default.isl or overriding each message in every script you create, make a copy of Default.isl with another name like <i>MyTranslation.isl.</i> On any installation you wish to use MyTranslation.isl, create a <link topic="languagessection">[Languages] section</link> entry pointing to the file.</p>

<p>In cases where there are multiple [Languages] section entries, specifying a [Messages] section entry in your script (as opposed to an .isl file) will by default override that message for all languages. To apply a [Messages] section entry to only one language, prefix it with the language's internal name followed by a period. For example:</p>

<precode>
en.ButtonNext=&amp;Forward &gt;
</precode>

<heading>Special-purpose messages</heading>

<p>The <a name="BeveledLabel"><tt>BeveledLabel</tt></a> message can be used to specify a line of text that is shown in the lower left corner of the wizard window and uninstaller window. The following is an example:</p>

<precode>
[Messages]
BeveledLabel=Inno Setup
</precode>

<p>The <tt>HelpTextNote</tt> message can be used to specify one or more lines of text that are added to the list of parameters in the summary shown when passing <link topic="setupcmdline" anchor="HELP">/HELP</link> on the command line. The following is an example:</p>

<precode>
[Messages]
HelpTextNote=/PORTABLE=1%nEnable portable mode.
</precode>

<p>These special-purpose messages default to an empty string so make sure to provide a non-empty default for all languages from your main script if you want to use these messages.</p>

</body>
</topic>



<topic name="custommessagessection" title="[CustomMessages] section">
<keyword value="[CustomMessages] section" />
<keyword value="CustomMessages" />
<body>

<p>A [CustomMessages] section is used to define the custom message values for {cm:...} constants. See the <link topic="consts" anchor="cm">Constants</link> documentation for more information.</p>

<p>An example of a task with a description taken from the [CustomMessages] section using a {cm:...} constant:</p>

<precode>
[CustomMessages]
CreateDesktopIcon=Create a &amp;desktop icon

[Tasks]
Name: desktopicon; Description: "{cm:CreateDesktopIcon}"
</precode>

<p>Messages may take arguments, from %1 up to %9. You can rearrange the order of the arguments (i.e. move the %2 before a %1) and also duplicate arguments if needed (i.e. "%1 ... %1 %2"). On messages with arguments, use two consecutive "%" characters to embed a single "%". "%n" creates a line break.</p>

<p>In cases where there are multiple [Languages] section entries, specifying a [CustomMessages] section entry in your script (as opposed to an .isl file) will by default override that message for all languages. To apply a [CustomMessages] section entry to only one language, prefix it with the language's internal name followed by a period. For example:</p>

<precode>
nl.CreateDesktopIcon=Maak een snelkoppeling op het &amp;bureaublad
</precode>

<p>Currently, the .isl files for all languages that come with Inno Setup have the following custom messages defined and translated for each language (shown here with their English values):</p>

<precode>
NameAndVersion=%1 version %2
AdditionalIcons=Additional icons:
CreateDesktopIcon=Create a &amp;desktop icon
CreateQuickLaunchIcon=Create a &amp;Quick Launch icon
ProgramOnTheWeb=%1 on the Web
UninstallProgram=Uninstall %1
LaunchProgram=Launch %1
AssocFileExtension=&amp;Associate %1 with the %2 file extension
AssocingFileExtension=Associating %1 with the %2 file extension...
AutoStartProgramGroupDescription=Startup:
AutoStartProgram=Automatically start %1
AddonHostProgramNotFound=%1 could not be located in the folder you selected.%n%nDo you want to continue anyway?
</precode>

<p>You may use these predefined custom messages in your own script. An example which uses <tt>UninstallProgram</tt>:</p>

<precode>
[Icons]
Name: "{group}\{cm:UninstallProgram,My Program}"; Filename: "{uninstallexe}"
</precode>

</body>
</topic>



<topic name="langoptionssection" title="[LangOptions] section">
<keyword value="[LangOptions] section" />
<keyword value="LangOptions" anchor="LangOptions" />
<keyword value="LanguageName" anchor="LanguageName" />
<keyword value="LanguageID" anchor="LanguageID" />
<keyword value="LanguageCodePage" anchor="LanguageCodePage" />
<keyword value="DialogFontName" anchor="DialogFontName" />
<keyword value="DialogFontSize" anchor="DialogFontSize" />
<keyword value="WelcomeFontName" anchor="WelcomeFontName" />
<keyword value="WelcomeFontSize" anchor="WelcomeFontSize" />
<keyword value="TitleFontName" anchor="TitleFontName" />
<keyword value="TitleFontSize" anchor="TitleFontSize" />
<keyword value="CopyrightFontName" anchor="CopyrightFontName" />
<keyword value="CopyrightFontSize" anchor="CopyrightFontSize" />
<keyword value="RightToLeft" anchor="RightToLeft" />
<keyword value="language" />
<keyword value="fonts" />
<body>

<p>A <a name="LangOptions">[LangOptions]</a> section is used to define the language-specific settings, such as fonts, used by the Setup program and uninstaller. Normally, you need not create a [LangOptions] section in your script file, since the language-specific settings are, by default, pulled in from the file <i>Default.isl</i> included with Inno Setup (or whichever file is specified by a [Languages] section entry).</p>

<p>The following is an example of a <tt>[LangOptions]</tt> section. (The settings listed below are the defaults.)</p>

<precode>
[LangOptions]
LanguageName=English
LanguageID=$0409
LanguageCodePage=0
DialogFontName=
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no
</precode>

<p><b><a name="LanguageName">LanguageName</a></b> is the native name of the language (so not the English name). It is displayed in the list of available languages on the <i>Select Language</i> dialog in a multilingual installation.</p>

<p><b><a name="LanguageID">LanguageID</a></b> is the numeric "language identifier" of the language. Refer to the <extlink href="http://msdn.microsoft.com/en-us/library/dd318693.aspx">list of valid language identifiers on MSDN</extlink>. This, along with <tt>LanguageCodePage</tt>, is used for the purpose of auto-detecting the most appropriate language to use by default, so be sure it is set correctly. It should always begin with a "$" sign, since language identifiers are in hexadecimal. If no language identifier currently exists for the language, set this to zero.</p>

<p><b><a name="LanguageCodePage">LanguageCodePage</a></b> specifies the "code page" (character set) used by the compiler to convert any ASCII text in the language's files to Unicode text. Note that any text in the .iss file such as a [CustomMessages] entry for the language is never converted and should be in Unicode already.<br/>
If no code page currently exists for the language, set <tt>LanguageCodePage</tt> to zero and only use Unicode text (UTF-8) in the languages's files.<br/>
If <tt>LanguageCodePage</tt> is set to zero but ASCII text is used in one of the language's files, the system code page will be used to convert the text in the file to Unicode.</p>

<p><b><a name="DialogFontName">DialogFontName</a></b> and <b><a name="DialogFontSize">DialogFontSize</a></b> specify the font name and point size to use in dialogs. If no <tt>DialogFontName</tt> setting is present, then the value of the <link topic="setup_defaultdialogfontname">DefaultDialogFontName</link> [Setup] section directive is used for the font name. If the specified font name does not exist on the user's system or is an empty string, 8-point <i>Microsoft Sans Serif</i> or <i>MS Sans Serif</i> will be substituted.</p>

<p><b><a name="WelcomeFontName">WelcomeFontName</a></b> and <b><a name="WelcomeFontSize">WelcomeFontSize</a></b> specify the font name and point size to use at the top of the <i>Welcome</i> and <i>Setup Completed</i> wizard pages. If the specified font name does not exist on the user's system or is an empty string, 12-point <i>Microsoft Sans Serif</i> or <i>MS Sans Serif</i> will be substituted.</p>

<p><b><a name="TitleFontName">TitleFontName</a></b> and <b><a name="TitleFontSize">TitleFontSize</a></b> specify the font name and point size to use when displaying the application name on the background window (only visible when <tt>WindowVisible=yes</tt>). If the specified font name does not exist on the user's system, 29-point <i>Arial</i> will be substituted. If the specified font name is an empty string, 29-point <i>Microsoft Sans Serif</i> or <i>MS Sans Serif</i> will be substituted.</p>

<p><b><a name="CopyrightFontName">CopyrightFontName</a></b> and <b><a name="CopyrightFontSize">CopyrightFontSize</a></b> specify the font name and point size to use when displaying the <tt>AppCopyright</tt> message on the background window (only visible when <tt>WindowVisible=yes</tt>). If the specified font name does not exist on the user's system, 8-point <i>Arial</i> will be substituted. If the specified font name is an empty string, 8-point <i>Microsoft Sans Serif</i> or <i>MS Sans Serif</i> will be substituted.</p>

<p><b><a name="RightToLeft">RightToLeft</a></b> specifies whether the language is written from right to left. If set to <tt>yes</tt>, text alignment and reading order will be reversed (with some intentional exceptions), and controls will be arranged from right to left ("flipped").</p>

<p><br/>
In cases where there are multiple [Languages] section entries, specifying a [LangOptions] section directive in your script (as opposed to an .isl file) will by default override that directive for all languages. To apply a [LangOptions] section directive to only one language, prefix it with the language's internal name followed by a period. For example:</p>

<precode>
en.LanguageName=English
</precode>

</body>
</topic>



<topic name="registrysection" title="[Registry] section">
<keyword value="[Registry] section" />
<keyword value="Registry" />
<keyword value="HKA" />
<keyword value="HKEY_AUTO" />
<keyword value="HKCR" />
<keyword value="HKEY_CLASSES_ROOT" />
<keyword value="HKCU" />
<keyword value="HKEY_CURRENT_USER" />
<keyword value="HKLM" />
<keyword value="HKEY_LOCAL_MACHINE" />
<keyword value="HKU" />
<keyword value="HKEY_USERS" />
<keyword value="HKCC" />
<keyword value="HKEY_CURRENT_CONFIG" />
<body>

<p>This optional section defines any registry keys/values you would like Setup to create, modify, or delete on the user's system.</p>

<p>By default, registry keys and values created by Setup are not deleted at uninstall time. If you want the uninstaller to delete keys or values, you must include one of the <tt>uninsdelete*</tt> flags described below.</p>

<p>The following is an example of a <tt>[Registry]</tt> section.</p>

<precode>
[Registry]
Root: HKLM; Subkey: "Software\My Company"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "Software\My Company\My Program"; Flags: uninsdeletekey
Root: HKLM; Subkey: "Software\My Company\My Program\Settings"; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Root" required="yes">
<p>The root key. This must be one of the following values:</p>
<indent>
<table>
<tr><td><tt>HKCU</tt></td><td>(HKEY_CURRENT_USER)</td></tr>
<tr><td><tt>HKLM</tt></td><td>(HKEY_LOCAL_MACHINE)</td></tr>
<tr><td><tt>HKCR</tt></td><td>(HKEY_CLASSES_ROOT)</td></tr>
<tr><td><tt>HKU</tt></td><td>(HKEY_USERS)</td></tr>
<tr><td><tt>HKCC</tt></td><td>(HKEY_CURRENT_CONFIG)</td></tr>
</table>
</indent>
<p>Additionally one special value is allowed:</p>
<indent>
<table>
<tr><td><tt>HKA</tt></td><td>(equals HKLM in <link topic="admininstallmode">administrative install mode</link>, HKCU otherwise)</td></tr>
</table>
</indent>
<p><tt>HKCU</tt> and <tt>HKA</tt> should only be used for settings which are compatible with roaming profiles.</p>
<p>Using <tt>HKCR</tt> is not recommended, use <tt>HKA</tt> with the <tt>Subkey</tt> parameter set to "Software\Classes" instead.</p>
<p>The values (including <tt>HKA</tt>) may have a suffix of <tt>32</tt> or <tt>64</tt>. Root key values with a suffix of <tt>32</tt> (for example, <tt>HKLM32</tt>) map to the 32-bit view of the registry; root key values with a suffix of <tt>64</tt> (for example, <tt>HKLM64</tt>) map to the 64-bit view of the registry.</p>
<p>Root key values with a suffix of <tt>64</tt> can only be used when Setup is running on 64-bit Windows, otherwise an error will occur. On an installation supporting both 32- and 64-bit architectures, it is possible to avoid the error by adding a <tt>Check: IsWin64</tt> parameter, which will cause the entry to be silently skipped when running on 32-bit Windows.</p>
<p>A root key value without a suffix (for example, <tt>HKLM</tt>) is equivalent to the value with a suffix of <tt>32</tt> (for example, <tt>HKLM32</tt>) unless the install is running in <link topic="32vs64bitinstalls">64-bit install mode</link>, in which case it is equivalent to the value with a suffix of <tt>64</tt> (for example, <tt>HKLM64</tt>).</p>
<example>
<pre>Root: HKLM</pre>
</example>
</param>

<param name="Subkey" required="yes">
<p>The subkey name, which can include constants.</p>
<example>
<pre>Subkey: "Software\My Company\My Program"</pre>
</example>
</param>

<param name="ValueType">
<p>The data type of the value. This must be one of the following:</p>
<indent><p><tt>
none<br/>
string<br/>
expandsz<br/>
multisz<br/>
dword<br/>
qword<br/>
binary</tt></p></indent>
<p>If <tt>none</tt> (the default setting) is specified, Setup will create the key but <i>not</i> a value. In this case the <tt>ValueData</tt> parameter is ignored.<br/>
If <tt>string</tt> is specified, Setup will create a string (REG_SZ) value.<br/>
If <tt>expandsz</tt> is specified, Setup will create an expand-string (REG_EXPAND_SZ) value.<br/>
If <tt>multisz</tt> is specified, Setup will create an multi-string (REG_MULTI_SZ) value.<br/>
If <tt>dword</tt> is specified, Setup will create a 32-bit integer (REG_DWORD) value.<br/>
If <tt>qword</tt> is specified, Setup will create a 64-bit integer (REG_QWORD) value.<br/>
If <tt>binary</tt> is specified, Setup will create a binary (REG_BINARY) value.</p>
<example>
<pre>ValueType: string</pre>
</example>
</param>

<param name="ValueName">
<p>The name of the value to modify, which can include constants. If this is blank, it will modify the "Default" value.</p>
<example>
<pre>ValueName: "Version"</pre>
</example>
</param>

<param name="ValueData">
<p>The data for the value. If the <tt>ValueType</tt> parameter is <tt>string</tt>, <tt>expandsz</tt>, or <tt>multisz</tt>, this is a string that can include constants. If the data type is <tt>dword</tt> or <tt>qword</tt>, this can be a decimal integer (e.g. "123"), a hexadecimal integer (e.g. "$7B"), or a constant which resolves to an integer. If the data type is <tt>binary</tt>, this is a sequence of hexadecimal bytes in the form: "00 ff 12 34". If the data type is <tt>none</tt>, this is ignored.</p>
<p>On a <tt>string</tt>, <tt>expandsz</tt>, or <tt>multisz</tt> type value, you may use a special constant called <tt>{olddata}</tt> in this parameter. <tt>{olddata}</tt> is replaced with the previous data of the registry value. The <tt>{olddata}</tt> constant can be useful if you need to append a string to an existing value, for example, <tt>{olddata};{app}</tt>. If the value does not exist or the existing value isn't a string type, the {olddata} constant is silently removed. {olddata} will also be silently removed if the value being created is a <tt>multisz</tt> type but the existing value is not a multi-string type (i.e. it's REG_SZ or REG_EXPAND_SZ), and vice versa.</p>
<p>On a <tt>multisz</tt> type value, you may use a special constant called <tt>{break}</tt> in this parameter to embed line breaks (nulls).</p>
<example>
<pre>ValueData: "1.0"</pre>
</example>
</param>

<param name="Permissions">
<p>Specifies additional permissions to grant in the registry key's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>
<p>For this parameter to have an effect the current user must be able to change the permissions on the registry key. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>
<p>This parameter should <i>only</i> be used on registry keys private to your application. Never change the ACLs on a top-level key like HKEY_LOCAL_MACHINE\SOFTWARE, otherwise you can open up security holes on your users' systems.</p>
<p>The specified permissions are set regardless of whether the registry key existed prior to installation. The permissions are not set if <tt>ValueType</tt> is <tt>none</tt> and the <tt>deletekey</tt> flag or <tt>deletevalue</tt> flag is used.</p>
<p>On Itanium editions of Windows, this parameter is only effectual on 32-bit registry keys. (There is no such limitation on x64 editions of Windows.)</p>
<p>This parameter can include one or more space separated values in the format:</p>
<indent><p><tt><link topic="usergroupids">&lt;user or group identifier&gt;</link>-&lt;access type&gt;</tt></p></indent>
<p>The following access types are supported for the [Registry] section:</p>
<flaglist>
<flag name="full">
<p>Grants "Full Control" permission, which is the same as <tt>modify</tt> (see below), but additionally allows the specified user/group to take ownership of the registry key and change its permissions. Use sparingly; generally, <tt>modify</tt> is sufficient.</p>
</flag>
<flag name="modify">
<p>Grants "Modify" permission, which allows the specified user/group to read, create, modify, and delete values and subkeys.</p>
</flag>
<flag name="read">
<p>Grants "Read" permission, which allows the specified user/group to read values and subkeys.</p>
</flag>
</flaglist>
<example>
<pre>Permissions: users-modify</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="createvalueifdoesntexist">
<p>When this flag is specified, Setup will create the value <i>only</i> if a value of the same name doesn't already exist. This flag has no effect if the data type is <tt>none</tt>, or if you specify the <tt>deletevalue</tt> flag.</p>
</flag>
<flag name="deletekey">
<p>When this flag is specified, Setup will first try deleting the entire key if it exists, including all values and subkeys in it. If <tt>ValueType</tt> is not <tt>none</tt>, it will then create a new key and value.</p>
<p>To prevent disasters, this flag is ignored during installation if <tt>Subkey</tt> is blank or contains only backslashes.</p>
</flag>
<flag name="deletevalue">
<p>When this flag is specified, Setup will first try deleting the value if it exists. If <tt>ValueType</tt> is not <tt>none</tt>, it will then create the key if it didn't already exist, and the new value.</p>
</flag>
<flag name="dontcreatekey">
<p>When this flag is specified, Setup will not attempt to create the key or any value if the key did not already exist on the user's system. No error message is displayed if the key does not exist.</p>
<p>Typically this flag is used in combination with the <tt>uninsdeletekey</tt> flag, for deleting keys during uninstallation but not creating them during installation.</p>
</flag>
<flag name="noerror">
<p>Don't display an error message if Setup fails to create the key or value for any reason.</p>
</flag>
<flag name="preservestringtype">
<p>This is only applicable when the <tt>ValueType</tt> parameter is <tt>string</tt> or <tt>expandsz</tt>. When this flag is specified and the value did not already exist or the existing value isn't a string type (REG_SZ or REG_EXPAND_SZ), it will be created with the type specified by <tt>ValueType</tt>. If the value did exist and is a string type, it will be replaced with the same value type as the pre-existing value.</p>
</flag>
<flag name="uninsclearvalue">
<p>When the program is uninstalled, set the value's data to a null string (type REG_SZ). This flag cannot be combined with the <tt>uninsdeletekey</tt> flag.</p>
</flag>
<flag name="uninsdeletekey">
<p>When the program is uninstalled, delete the entire key, including all values and subkeys in it. It obviously wouldn't be a good idea to use this on a key that is used by Windows itself. You should only use this on keys private to your application.</p>
<p>To prevent disasters, this flag is ignored during installation if <tt>Subkey</tt> is blank or contains only backslashes.</p>
</flag>
<flag name="uninsdeletekeyifempty">
<p>When the program is uninstalled, delete the key if it has no values or subkeys left in it. This flag can be combined with <tt>uninsdeletevalue.</tt></p>
<p>To prevent disasters, this flag is ignored during installation if <tt>Subkey</tt> is blank or contains only backslashes.</p>
</flag>
<flag name="uninsdeletevalue">
<p>Delete the value when the program is uninstalled. This flag can be combined with <tt>uninsdeletekeyifempty.</tt></p>
<p><b>NOTE:</b> In Inno Setup versions prior to 1.1, you could use this flag along with the data type <tt>none</tt> and it would function as a "delete key if empty" flag. This technique is no longer supported. You must now use the <tt>uninsdeletekeyifempty</tt> flag to accomplish this.</p>
</flag>
</flaglist>

<example>
<pre>Flags: uninsdeletevalue</pre>
</example>

</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="runsection" title="[Run] &amp; [UninstallRun] sections">
<keyword value="[Run] section" />
<keyword value="Run" />
<keyword value="[UninstallRun] section" />
<keyword value="UninstallRun" />
<body>

<p>The [Run] section is optional, and specifies any number of programs to execute after the program has been successfully installed, but before the Setup program displays the final dialog. The [UninstallRun] section is optional as well, and specifies any number of programs to execute as the first step of <i>uninstallation.</i> Both sections share an identical syntax, except where otherwise noted below.</p>

<p>Programs are executed in the order they appear in the script. By default, when processing a [Run]/[UninstallRun] entry, Setup/Uninstall will wait until the program has terminated before proceeding to the next one, unless the <tt>nowait</tt>, <tt>shellexec</tt>, or <tt>waituntilidle</tt> flags are used.</p>

<p>Note that by default, if a program executed in the [Run] section queues files to be replaced on the next reboot (by calling MoveFileEx or by modifying wininit.ini), Setup will detect this and prompt the user to restart the computer at the end of installation. If you don't want this, set the <link topic="setup_restartifneededbyrun">RestartIfNeededByRun</link> directive to <tt>no</tt>.</p>

<p>The following is an example of a <tt>[Run]</tt> section.</p>

<precode>
[Run]
Filename: "{app}\INIT.EXE"; Parameters: "/x"
Filename: "{app}\README.TXT"; Description: "View the README file"; Flags: postinstall shellexec skipifsilent
Filename: "{app}\MYPROG.EXE"; Description: "Launch application"; Flags: postinstall nowait skipifsilent unchecked
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Filename" required="yes">
<p>The program to execute, or file/folder to open. If <tt>Filename</tt> is not an executable (.exe or .com) or batch file (.bat or .cmd), you <i>must</i> use the <tt>shellexec</tt> flag on the entry. This parameter can include constants.</p>
<example>
<pre>Filename: "{app}\INIT.EXE"</pre>
</example>
</param>

<param name="Description">
<p>Valid only in a <tt>[Run]</tt> section. The description of the entry, which can include constants. This description is used for entries with the <tt>postinstall</tt> flag. If the description is not specified for an entry, Setup will use a default description. This description depends on the type of the entry (normal or <tt>shellexec</tt>).</p>
<example>
<pre>Description: "View the README file"</pre>
</example>
</param>

<param name="Parameters">
<p>Optional command line parameters for the program, which can include constants.</p>
<example>
<pre>Parameters: "/x"</pre>
</example>
</param>

<param name="WorkingDir">
<p>The initial current directory for the program. If this parameter is not specified or is blank, it uses the directory from the <tt>Filename</tt> parameter; if <tt>Filename</tt> does not include a path, it will use a default directory. This parameter can include constants.</p>
<example>
<pre>WorkingDir: "{app}"</pre>
</example>
</param>

<param name="StatusMsg">
<p>Valid only in a <tt>[Run]</tt> section. Determines the message displayed on the wizard while the program is executed. If this parameter is not specified or is blank, a default message of "Finishing installation..." will be used. This parameter can include constants.</p>
<example>
<pre>StatusMsg: "Installing BDE..."</pre>
</example>
</param>

<param name="RunOnceId">
<p>Valid only in an <tt>[UninstallRun]</tt> section. If the <link topic="sameappnotes">same application</link> is installed more than once, "run" entries will be duplicated in the uninstall log file. By assigning a string to <tt>RunOnceId</tt>, you can ensure that a particular <tt>[UninstallRun]</tt> entry will only be executed once during uninstallation. For example, if two or more "run" entries in the uninstall log have a <tt>RunOnceId</tt> setting of "DelService", only the latest entry with a <tt>RunOnceId</tt> setting of "DelService" will be executed; the rest will be ignored. Note that <tt>RunOnceId</tt> comparisons are case-sensitive.</p>
<example>
<pre>RunOnceId: "DelService"</pre>
</example>
</param>

<param name="Verb">
<p>Specifies the action to be performed on the file. Must be combined with the <tt>shellexec</tt> flag. Commonly available verbs include "open" and "print". If this parameter is not specified or is blank, the default verb for the file type will be used (typically "open").</p>
<example>
<pre>Verb: "print"</pre>
</example>
</param>

<param name="Flags">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<flaglist>
<flag name="32bit">
<p>Causes the <tt>{sys}</tt> constant to map to the 32-bit System directory when used in the <tt>Filename</tt> and <tt>WorkingDir</tt> parameters. This is the default behavior in <link topic="32vs64bitinstalls">32-bit install mode</link>.</p>
<p>This flag cannot be combined with the <tt>shellexec</tt> flag.</p>
</flag>
<flag name="64bit">
<p>Causes the <tt>{sys}</tt> constant to map to the 64-bit System directory when used in the <tt>Filename</tt> and <tt>WorkingDir</tt> parameters. This is the default behavior in <link topic="32vs64bitinstalls">64-bit install mode</link> install.</p>
<p>This flag can only be used when Setup is running on 64-bit Windows, otherwise an error will occur. On an installation supporting both 32- and 64-bit architectures, it is possible to avoid the error by adding a <tt>Check: IsWin64</tt> parameter, which will cause the entry to be silently skipped when running on 32-bit Windows.</p>
<p>This flag cannot be combined with the <tt>shellexec</tt> flag.</p>
</flag>
<flag name="hidewizard">
<p>If this flag is specified, the wizard will be hidden while the program is running.</p>
</flag>
<flag name="nowait">
<p>If this flag is specified, it will not wait for the process to finish executing before proceeding to the next [Run] entry, or completing Setup. Cannot be combined with <tt>waituntilidle</tt> or <tt>waituntilterminated</tt>.</p>
</flag>
<flag name="postinstall">
<p>Valid only in a [Run] section. Instructs Setup to create a checkbox on the <i>Setup Completed</i> wizard page. The user can uncheck or check this checkbox and thereby choose whether this entry should be processed or not. Previously this flag was called <tt>showcheckbox</tt>.</p>
<p>If Setup has to restart the user's computer (as a result of installing a file with the flag <tt>restartreplace</tt> or if the <tt>AlwaysRestart</tt> <tt>[Setup]</tt> section directive is <tt>yes</tt>), there will not be an opportunity for the checkbox to be displayed and therefore the entry will never be processed.</p>
<p>The <tt>isreadme</tt> flag for entries in the [Files] section is now obsolete. If the compiler detects a entry with an <tt>isreadme</tt> flag, it strips the <tt>isreadme</tt> flag from the [Files] entry and inserts a generated [Run] entry at the head of the list of [Run] entries. This generated [Run] entry runs the README file and has flags <tt>shellexec</tt>, <tt>skipifdoesntexist</tt>, <tt>postinstall</tt> and <tt>skipifsilent</tt>.</p>
</flag>
<flag name="runascurrentuser">
<p>If this flag is specified, the spawned process will inherit Setup/Uninstall's user credentials (typically, full administrative privileges).</p>
<p>This is the default behavior when the <tt>postinstall</tt> flag is not used.</p>
<p>This flag cannot be combined with the <tt>runasoriginaluser</tt> flag.</p>
</flag>
<flag name="runasoriginaluser">
<p>Valid only in a [Run] section. If this flag is specified, the spawned process will execute with the (normally non-elevated) credentials of the user that started Setup initially (i.e., the "pre-UAC dialog" credentials).</p>
<p>This is the default behavior when the <tt>postinstall</tt> flag is used.</p>
<p>If a user launches Setup by right-clicking its EXE file and selecting "Run as administrator", then this flag, unfortunately, will have no effect, because Setup has no opportunity to run any code with the original user credentials. The same is true if Setup is launched from an already-elevated process. Note, however, that this is not an Inno Setup-specific limitation; Windows Installer-based installers cannot return to the original user credentials either in such cases.</p>
<p>This flag cannot be combined with the <tt>runascurrentuser</tt> flag.</p>
</flag>
<flag name="runhidden">
<p>If this flag is specified, it will launch the program in a hidden window. Never use this flag when executing a program that may prompt for user input.</p>
</flag>
<flag name="runmaximized">
<p>If this flag is specified, it will launch the program or document in a maximized window.</p>
</flag>
<flag name="runminimized">
<p>If this flag is specified, it will launch the program or document in a minimized window.</p>
</flag>
<flag name="shellexec">
<p>This flag is required if <tt>Filename</tt> is not a directly executable file (an .exe or .com file). When this flag is set, <tt>Filename</tt> can be a folder or any registered file type -- including .chm, .doc, and so on. The file will be opened with the application associated with the file type on the user's system, the same way it would be if the user double-clicked the file in Explorer.</p>
<p>By default, when the <tt>shellexec</tt> flag is used it will not wait until the spawned process terminates. If you need that, you must add the flag <tt>waituntilterminated</tt>. Note that it cannot and will not wait if a new process isn't spawned -- for example, if <tt>Filename</tt> specifies a folder.</p>
</flag>
<flag name="skipifdoesntexist">
<p>If this flag is specified in the [Run] section, Setup won't display an error message if <tt>Filename</tt> doesn't exist.</p>
<p>If this flag is specified in the [UninstallRun] section, the uninstaller won't display the "some elements could not be removed" warning if <tt>Filename</tt> doesn't exist.</p>
<p>When this flag is used, <tt>Filename</tt> must be an absolute path.</p>
</flag>
<flag name="skipifnotsilent">
<p>Valid only in a [Run] section. Instructs Setup to skip this entry if Setup is not running (very) silent.</p>
</flag>
<flag name="skipifsilent">
<p>Valid only in a [Run] section. Instructs Setup to skip this entry if Setup is running (very) silent.</p>
</flag>
<flag name="unchecked">
<p>Valid only in a [Run] section. Instructs Setup to initially uncheck the checkbox. The user can still check the checkbox if he/she wishes to process the entry. This flag is ignored if the <tt>postinstall</tt> flag isn't also specified.</p>
</flag>
<flag name="waituntilidle">
<p>If this flag is specified, it will wait until the process is waiting for user input with no input pending, instead of waiting for the process to terminate. (This calls the <i>WaitForInputIdle</i> Win32 function.) Cannot be combined with <tt>nowait</tt> or <tt>waituntilterminated</tt>.</p>
</flag>
<flag name="waituntilterminated">
<p>If this flag is specified, it will wait until the process has completely terminated. Note that this is the default behavior (i.e. you don't need to specify this flag) unless you're using <tt>shellexec</tt> flag, in which case you do need to specify this flag if you want it to wait. Cannot be combined with <tt>nowait</tt> or <tt>waituntilidle</tt>.</p>
</flag>
</flaglist>

<example>
<pre>Flags: postinstall nowait skipifsilent</pre>
</example>

</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="uninstalldeletesection" title="[UninstallDelete] section">
<keyword value="[UninstallDelete] section" />
<keyword value="UninstallDelete" />
<body>

<p>This optional section defines any additional files or directories you want the uninstaller to delete, besides those that were installed/created using [Files] or [Dirs] section entries. Deleting .INI files created by your application is one common use for this section. The uninstaller processes these entries as the last step of uninstallation.</p>

<p>Here is a example of a <tt>[UninstallDelete]</tt> section:</p>

<precode>
[UninstallDelete]
Type: files; Name: "{win}\MYPROG.INI"
</precode>

<p>The following is a list of the supported <link topic="params">parameters</link>:</p>

<paramlist>

<param name="Type" required="yes">
<p>Specifies what is to be deleted by the uninstaller. This must be one of the following:</p>
<flaglist>
<flag name="files">
<p>The <tt>Name</tt> parameter specifies a name of a particular file, or a filename with wildcards.</p>
</flag>
<flag name="filesandordirs">
<p>Functions the same as <tt>files</tt> except it matches directory names also, and any directories matching the name are deleted including all files and subdirectories in them.</p>
</flag>
<flag name="dirifempty">
<p>When this is used, the <tt>Name</tt> parameter must be the name of a directory, but it cannot include wildcards. The directory will only be deleted if it contains no files or subdirectories.</p>
</flag>
</flaglist>
<example>
<pre>Type: files</pre>
</example>
</param>

<param name="Name" required="yes">
<p>Name of the file or directory to delete.</p>
<p><b>NOTE:</b> Don't be tempted to use a wildcard here to delete all files in the {app} directory. Doing this is strongly recommend against for two reasons. First, users usually don't appreciate having their data files they put in the application directory deleted without warning (they might only be uninstalling it because they want to move it to a different drive, for example). It's better to leave it up to the end users to manually remove them if they want. Also, if the user happened to install the program in the wrong directory by mistake (for example, C:\WINDOWS) and then went to uninstall it there could be disastrous consequences. So again, <b>DON'T DO THIS!</b></p>
<example>
<pre>Name: "{win}\MYPROG.INI"</pre>
</example>
</param>

</paramlist>

<p><b><link topic="componentstasksparams">Components and Tasks Parameters</link></b></p>

<p><b><link topic="commonparams">Common Parameters</link></b></p>

</body>
</topic>



<topic name="examples" title="Example Scripts">
<keyword value="Example Scripts" />
<body>

<p>The Inno Setup Example Scripts are located in a separate folder. Please click the "Inno Setup Example Scripts" shortcut created in the Start Menu when you installed Inno Setup, or open the "Examples" folder in your Inno Setup directory.</p>

</body>
</topic>



<topic name="unicode" title="Unicode Inno Setup">
<keyword value="Unicode Inno Setup" />
<body>

<p>Prior to Inno Setup 6 two versions of Inno Setup were available: Non Unicode Inno Setup and Unicode Inno Setup. Starting with Inno Setup 6 there's only one version available: Unicode Inno Setup.</p>
<p>Key features of Unicode Inno Setup are its ability to display any language on any system regardless of the system code page, and its ability to work with Unicode filenames. One could consider Unicode Inno Setup as the new standard Inno Setup and Non Unicode Inno Setup as an old special Inno Setup for those who want the very smallest size possible.</p>
<p>If you don't remember which version you installed, click the "Inno Setup Compiler" shortcut created in the Start Menu. If the version number displayed in its title bar says "(a)" you are running Non Unicode Inno Setup. If it says "(u)" you are running Unicode Inno Setup.</p>
<p>For the most part the two versions are used identically, and any differences between them are noted throughout the help file. However, the following overview lists the primary differences:</p>
  <ul>
  <li>Unicode Inno Setup supports UTF-8 encoded .iss and .isl files (but not UTF-16).</li>
  <li>Any existing ANSI .isl language files are automatically converted during compilation using the <tt>LanguageCodePage</tt> setting of the language.</li>
  <li>Any [Messages] and [CustomMessages] entries in existing ANSI .iss script files must to be converted to Unicode manually if the language used a special <tt>LanguageCodePage</tt>.</li>
  <li>Unicode Inno Setup supports UTF-8 and UTF-16LE encoded .txt files for <tt>LicenseFile</tt>, <tt>InfoBeforeFile</tt>, and <tt>InfoAfterFile</tt>.</li>
  <li>Any language specific plain text ANSI files used for <tt>LicenseFile</tt>, <tt>InfoBeforeFile</tt>, or <tt>InfoAfterFile</tt> are automatically converted during compilation using the <tt>LanguageCodePage</tt> setting of the language.</li>
  <li>The [Setup] directive <tt>ShowUndisplayableLanguages</tt> is ignored by Unicode Inno Setup.</li>
  <li>Existing installations of your programs done by non Unicode installers can be freely updated by Unicode installers, and vice versa.</li>
  <li>Unicode Pascal Scripting notes:
    <ul>
    <li>The Unicode compiler sees type 'String' as a Unicode string, and 'Char' as a Unicode character. Its 'AnsiString' type hasn't changed and still is an ANSI string. Its 'PChar' type has been renamed to 'PAnsiChar'.</li>
    <li>The Unicode compiler is more strict about correct ';' usage: it no longer accepts certain missing ';' characters.</li>
    <li>Some support functions had their prototype changed: some parameters of <tt>CreateOutputMsgMemoPage</tt>, <tt>RegQueryBinaryValue</tt>, <tt>RegWriteBinaryValue</tt>, <tt>OemToCharBuff</tt>, <tt>CharToOemBuff</tt>, <tt>LoadStringFromfile</tt>, <tt>SaveStringToFile</tt>, and <tt>GetMD5OfString</tt> are of type AnsiString now instead of String.</li>
    <li>Added new <tt>SaveStringsToUTF8File</tt>, and <tt>GetMD5OfUnicodeString</tt> support functions.</li>
    <li>Added new 'Int64' type, supported by <tt>IntToStr</tt>. Also added new <tt>StrToInt64</tt>, <tt>StrToInt64Def</tt>, and <tt>GetSpaceOnDisk64</tt> support functions.</li>
    <li>Added new <tt>TStringStream</tt> class.</li>
    <li>If you want to compile an existing script that imports ANSI Windows API calls with the Unicode compiler, either upgrade to the 'W' Unicode API call or change the parameters from 'String' or 'PChar' to 'AnsiString'. The 'AnsiString' approach will make your [Code] compatible with both the Unicode and the non Unicode version.</li>
    </ul>
  </li>
  </ul>
<p>Note: Unicode Inno Setup can only create Unicode installers and like wise the non Unicode version can only create non Unicode installers. If you want to be able to create both Unicode and non Unicode installers on one computer, you have to install both versions of Inno Setup into different folders.</p>

</body>
</topic>



<topic name="faq" title="Frequently Asked Questions">
<keyword value="Frequently Asked Questions" />
<keyword value="FAQ" />
<keyword value="file associations, creating" />
<keyword value="Visual Basic" />
<keyword value="BDE installation" />
<body>

<p>The Frequently Asked Questions is now located in a separate document. Please click the "Inno Setup FAQ" shortcut created in the Start Menu when you installed Inno Setup, or open the "isfaq.url" file in your Inno Setup directory.</p>

<p>For the most recent Frequently Asked Questions, go to <extlink href="http://www.jrsoftware.org/isfaq.php">http://www.jrsoftware.org/isfaq.php</extlink></p>

</body>
</topic>



<topic name="wizardpages" title="Wizard Pages">
<keyword value="Wizard Pages" />
<body>

<p>Below is a list of all the wizard pages Setup may potentially display, and the conditions under which they are displayed.</p>

<ul>

<li>
<b>Welcome</b><br/>
Shown if <link topic="setup_disablewelcomepage">DisableWelcomePage</link> is set to <tt>no</tt>.
</li>

<li>
<b>License Agreement</b><br/>
Shown if <link topic="setup_licensefile">LicenseFile</link> is set. Users may proceed to the next page only if the option "I accept the agreement" is selected.
</li>

<li>
<b>Password</b><br/>
Shown if <link topic="setup_password">Password</link> is set. Users may proceed to the next page only after entering the correct password.
</li>

<li>
<b>Information</b><br/>
Shown if <link topic="setup_infobeforefile">InfoBeforeFile</link> is set.
</li>

<li>
<b>User Information</b><br/>
Shown if <link topic="setup_userinfopage">UserInfoPage</link> is set to <tt>yes</tt>.
</li>

<li>
<b>Select Destination Location</b><br/>
Shown if <link topic="setup_disabledirpage">DisableDirPage</link> is set to <tt>no</tt> or <tt>auto</tt>.
</li>

<li>
<b>Select Components</b><br/>
Shown if there are any <link topic="componentssection">[Components]</link> entries.
</li>

<li>
<b>Select Start Menu Folder</b><br/>
Shown if there are any <link topic="iconssection">[Icons]</link> entries and if <link topic="setup_disableprogramgrouppage">DisableProgramGroupPage</link> is set to <tt>no</tt> or <tt>auto</tt>.
</li>

<li>
<b>Select Tasks</b><br/>
Shown if there are any <link topic="taskssection">[Tasks]</link> entries, unless the [Tasks] entries are all tied to components that were not selected on the <i>Select Components</i> page.
</li>

<li>
<b>Ready to Install</b><br/>
Shown by default, but can be disabled via <link topic="setup_disablereadypage">DisableReadyPage</link>.
</li>

<li>
<b>Preparing to Install</b><br/>
Normally, Setup will never stop or pause on this page. The only time it will is if Setup determines it can't continue or if it detects applications using files that need to be updated.<br/><br/>
The former can happen if the <link topic="scriptevents" anchor="PrepareToInstall"><tt>PrepareToInstall</tt></link> event function returned an error or if one or more files specified in the [Files] and [InstallDelete] sections were queued (by some other installation) to be replaced or deleted on the next restart. In this case, it tells the user they need to restart their computer and then run Setup again. Note that this check is performed on silent installations too, but any messages are displayed in a message box instead of inside a wizard page.<br/><br/>
The latter can happen if <link topic="setup_closeapplications">CloseApplications</link> is set to <tt>yes</tt> or <tt>force</tt>.
</li>

<li>
<b>Installing</b><br/>
Shown during the actual installation process.
</li>

<li>
<b>Information</b><br/>
Shown if <link topic="setup_infoafterfile">InfoAfterFile</link> is set.
</li>

<li>
<b>Setup Completed</b><br/>
Shown by default, but can be disabled in some cases via <link topic="setup_disablefinishedpage">DisableFinishedPage</link>.
</li>

</ul>

<p>See the <i>AllPagesExample.iss</i> example script for an example which shows all these pages.</p>

</body>
</topic>



<topic name="installorder" title="Installation Order">
<keyword value="Installation Order" />
<body>

<p>Once the actual installation process begins, this is the order in which the various installation tasks are performed:</p>

<ul>

<li><link topic="installdeletesection">[InstallDelete]</link> is processed.</li>

<li>The entries in <link topic="uninstalldeletesection">[UninstallDelete]</link> are stored in the uninstall log (which, at this stage, is stored in memory).</li>

<li>The application directory is created, if necessary.</li>

<li><link topic="dirssection">[Dirs]</link> is processed.</li>

<li>A filename for the uninstall log is reserved, if necessary.</li>

<li><link topic="filessection">[Files]</link> is processed. (File registration does not happen yet.)</li>

<li><link topic="iconssection">[Icons]</link> is processed.</li>

<li><link topic="inisection">[INI]</link> is processed.</li>

<li><link topic="registrysection">[Registry]</link> is processed.</li>

<li>Files that needed to be registered are now registered, unless the system needs to be restarted, in which case no files are registered until the system is restarted.</li>

<li>The <i>Add/Remove Programs</i> entry for the program is created, if necessary.</li>

<li>The entries in <link topic="runsection">[UninstallRun]</link> are stored in the uninstall log.</li>

<li>The uninstaller EXE and log are finalized and saved to disk. After this is done, the user is forbidden from cancelling the install, and any subsequent errors will not cause what was installed before to be rolled back.</li>

<li><link topic="runsection">[Run]</link> is processed, except for entries with the <tt>postinstall</tt> flag, which get processed after the <i>Setup Completed</i> wizard page is shown.</li>

<li>If <link topic="setup_changesassociations">ChangesAssociations</link> was set to <tt>yes</tt> or to a <link topic="scriptexpression">boolean expression</link> evaluating to <tt>True</tt>, file associations are refreshed now.</li>

<li>If <link topic="setup_changesenvironment">ChangesEnvironment</link> was set to <tt>yes</tt> or to a <link topic="scriptexpression">boolean expression</link> evaluating to <tt>True</tt>, other applications are notified at this point.</li>

</ul>

<p>All entries are processed by the installer in the order they appear in a section.</p>

<p>Changes are undone by the uninstaller in the <i>opposite</i> order in which the installer made them. This is because the uninstall log is parsed from end to beginning.</p>

<p>In this example:</p>

<precode>
[INI]
Filename: "{win}\MYPROG.INI"; Section: "InstallSettings"; Flags: uninsdeletesectionifempty
Filename: "{win}\MYPROG.INI"; Section: "InstallSettings"; Key: "InstallPath"; String: "{app}"; Flags: uninsdeleteentry
</precode>

<p>the installer will first record the data for first entry's <tt>uninsdeletesectionifempty</tt> flag in the uninstall log, create the key of the second entry, and then record the data for the <tt>uninsdeleteentry</tt> flag in the uninstall log. When the program is uninstalled, the uninstaller will first process the <tt>uninsdeleteentry</tt> flag, deleting the entry, and then the <tt>uninsdeletesectionifempty</tt> flag, deleting the section.</p>

<p>Note that the uninstaller processes <tt>[UninstallRun]</tt> and <tt>[UninstallDelete]</tt> entries in the same order they appear in the script (not in reverse order).</p>

</body>
</topic>


<topic name="admininstallmode" title="Non Administrative Install Mode">
<keyword value="Install Mode: administrative vs. non administrative" />
<keyword value="Administrative install mode" />
<keyword value="Non administrative install mode" />
<keyword value="install mode" />
<body>

<p>An installation can run in one of two modes: administrative or non administrative. Which mode is selected is specified by the <link topic="setup_privilegesrequired">PrivilegesRequired</link> and <link topic="setup_privilegesrequiredoverridesallowed">PrivilegesRequiredOverridesAllowed</link> [Setup] section directives.</p>

<p>In administrative install mode:</p>
<ul>
<li>The <tt>{group}</tt> folder is created in the <i>All Users</i> profile.</li>
<li>The "auto" form of the directory and Shell Folder constants is mapped to the "common" form.</li>
<li>The <link topic="registrysection">HKA</link> and uninstall info root keys will be HKEY_LOCAL_MACHINE.</li>
</ul>

<p>In non administrative install mode:</p>
<ul>
<li>The <tt>{group}</tt> folder is created in the current user's profile.</li>
<li>The "auto" form of the directory and Shell Folder constants is mapped to the "user" form.</li>
<li>The <link topic="registrysection">HKA</link> and uninstall info root keys will be HKEY_CURRENT_USER.</li>
</ul>

<p><b>Notes:</b></p>
<p>Regardless of the version of Windows, if the installation is running in administrative install mode then you should be careful about making any per-user area changes: such changes may not achieve what you are intending. The compiler will warn you about this, which can be disabled using <link topic="setup_useduserareaswarning">UsedUserAreasWarning</link>.</p>
<p>If the installation is running in non administrative install mode, but administrative privileges are available anyway then Setup or the [Code] section might still make use of these privileges. For this reason the uninstaller will always be marked as requiring administrative privileges in this case, just as if the installation was running in administrative install mode.</p>

</body>
</topic>


<topic name="32vs64bitinstalls" title="64-bit Install Mode">
<keyword value="Install Mode: 32-bit vs. 64-bit" />
<keyword value="32-bit install mode" />
<keyword value="64-bit install mode" />
<keyword value="install mode" />
<body>

<p>An installation can run in one of two modes: 32-bit or 64-bit. 64-bit install mode is selected if the user is running a 64-bit version of Windows and the system's processor architecture is included in the value of the <link topic="setup_architecturesinstallin64bitmode">ArchitecturesInstallIn64BitMode</link> [Setup] section directive. Otherwise, 32-bit install mode is used.</p>

<p>How do the two modes of installation differ? Primarily, the differences lie in where things are installed by default.</p>

<p>In 32-bit install mode:</p>

<ul>
<li>The System32 path returned by the <tt>{sys}</tt> constant maps to the 32-bit System directory by default.</li>
<li>The <tt>{commonpf}</tt> constant is equivalent to <tt>{commonpf32}</tt>.</li>
<li>The <tt>{commoncf}</tt> constant is equivalent to <tt>{commoncf32}</tt>.</li>
<li>[Registry] writes to the 32-bit view by default.</li>
<li>The <tt>{reg:...}</tt> constant reads the 32-bit view by default.</li>
<li>The <tt>Reg*</tt> [Code] support functions access the 32-bit view by default.</li>
<li>The <tt>useapppaths</tt> flag of the [Icons] section reads the "App Paths" key in the 32-bit view of the registry.</li>
<li>The <tt>regserver</tt> and <tt>regtypelib</tt> flags of the [Files] section load and register files inside a 32-bit process by default.</li>
<li>The <tt>sharedfile</tt> flag of the [Files] section updates the "SharedDLLs" key in the 32-bit view of the registry by default.</li>
<li>The Uninstall key is created in the 32-bit view of the registry.</li>
</ul>

<p>In 64-bit install mode:</p>

<ul>
<li>The System32 path returned by the <tt>{sys}</tt> constant maps to the 64-bit System directory by default when used in the [Dirs], [Files], [InstallDelete], [Run], [UninstallDelete], and [UninstallRun] sections. This is because Setup/Uninstall temporarily disables <extlink href="http://msdn.microsoft.com/en-us/library/aa384187.aspx">WOW64 file system redirection</extlink> when files/directories are accessed by those sections. Elsewhere, System32 and <tt>{sys}</tt> map to the 32-bit System directory, as is normal in a 32-bit process.</li>
<li>The <tt>{commonpf}</tt> constant is equivalent to <tt>{commonpf64}</tt>.</li>
<li>The <tt>{commoncf}</tt> constant is equivalent to <tt>{commoncf64}</tt>.</li>
<li>[Registry] writes to the 64-bit view by default.</li>
<li>The <tt>{reg:...}</tt> constant reads the 64-bit view by default.</li>
<li>The <tt>Reg*</tt> [Code] support functions access the 64-bit view by default.</li>
<li>The <tt>useapppaths</tt> flag of the [Icons] section reads the "App Paths" key in the 64-bit view of the registry.</li>
<li>The <tt>regserver</tt> and <tt>regtypelib</tt> flags of the [Files] section load and register files inside a 64-bit process by default.</li>
<li>The <tt>sharedfile</tt> flag of the [Files] section updates the "SharedDLLs" key in the 64-bit view of the registry by default.</li>
<li>The Uninstall key is created in the 64-bit view of the registry.</li>
</ul>

</body>
</topic>



<topic name="64bitlimitations" title="64-bit Installation Limitations">
<keyword value="64-bit Installation Limitations" />
<keyword value="64-bit install mode" />
<body>

<p>Because Inno Setup is a 32-bit application, there are some limitations to be aware of when utilizing its 64-bit installation features:</p>

<ul>

<li>The System32 path returned by the <tt>{sys}</tt> constant does not always map to the 64-bit System directory. When Setup/Uninstall is running in 64-bit install mode, it maps to the 64-bit System directory when used in the [Dirs], [Files], [InstallDelete], [Run], [UninstallDelete], and [UninstallRun] sections because Setup temporarily disables <extlink href="http://msdn.microsoft.com/en-us/library/aa384187.aspx">WOW64 file system redirection</extlink> when files/directories are accessed by those sections. Elsewhere, System32 and <tt>{sys}</tt> map to the 32-bit System directory, as is normal in a 32-bit process.</li>

<li>
<p>In the [Code] section, when Setup/Uninstall is running in 64-bit install mode, functions that access files disable WOW64 file system redirection (unless overridden by a call to <link topic="isxfunc_EnableFsRedirection">EnableFsRedirection</link>). However, there are exceptions, listed below. These functions never disable file system redirection, meaning you cannot pass them (or get back) the name of a file located in the 64-bit System directory:</p>
<table>
<tr><td><tt>*Ini*</tt></td><td>(all of the functions that manipulate .INI files)</td></tr>
<tr><td><tt>BrowseForFolder</tt></td></tr>
<tr><td><tt>CreateShellLink</tt></td></tr>
<tr><td><tt>GetOpenFileName</tt></td></tr>
<tr><td><tt>LoadDLL</tt></td><td>(see following point)</td></tr>
<tr><td><tt>ModifyPifFile</tt></td></tr>
<tr><td><tt>SetCurrentDir</tt></td></tr>
<tr><td><tt>ShellExec</tt></td><td>(use <tt>Exec</tt> instead)</td></tr>
<tr><td><tt>UnregisterFont</tt></td></tr>
</table>
<p>Additionally, no VCL classes are capable of disabling file system redirection. For example, you cannot call the <tt>LoadFromFile</tt> method of <tt>TBitmap</tt> to load a bitmap file from the 64-bit System directory.</p>
</li>

<li>You cannot load/use 64-bit DLLs in the [Code] section, because Windows does not allow 32-bit processes to load 64-bit DLLs (and vice versa). A 32-bit process can, however, launch 64-bit EXEs. Use the <tt>Exec</tt> function or the [Run] section to do that.</li>

</ul>

</body>
</topic>



<topic name="technotes" title="Miscellaneous Notes">
<keyword value="Miscellaneous Notes" />
<body>

<ul>

<li>
<p>To easily auto update your application, first make your application somehow detect a new version of your Setup.exe and make it locate or download this new version. Then, to auto update, start your Setup.exe from your application with for example the following command line:</p>

<precode>
/SP- /silent /noicons "/dir=expand:{autopf}\My Program"
</precode>

<p>After starting setup.exe, exit your application as soon as possible. Note that to avoid problems with updating your .exe, Setup has an auto retry feature.</p>

<p>Optionally you could also use the <tt>skipifsilent</tt> and <tt>skipifnotsilent</tt> flags and make your application aware of a '/updated' parameter to for example show a nice message box to inform the user that the update has completed.</p>
</li>

<li>Inno Setup's own installers accept an additional /PORTABLE=1 command line parameter to enable portable mode which causes the installers to not create an uninstaller nor an entry in the Add/Remove Programs Control Panel applet.</li>

<li>The Inno Setup backup website can be found at <extlink href="http://www.innosetup.nl/">www.innosetup.nl</extlink>. Normally this link will simply redirect you to the main website at <extlink href="http://www.jrsoftware.org/">www.jrsoftware.org</extlink> but in case of emergencies this redirect will be disabled.</li>

</ul>

</body>
</topic>



<topic name="compilercmdline" title="Command Line Compiler Execution">
<keyword value="Command Line Compiler Execution" />
<keyword value="command line parameters" />
<keyword value="compil32" />
<keyword value="ISCC" />
<body>

<ul>

<li>
<p>Scripts can also be compiled by the Setup Compiler from the command line. Command line usage is as follows:</p>

<indent>
<p>compil32 /cc <i>&lt;script name&gt;</i></p>
<example>compil32 /cc "c:\isetup\samples\my script.iss"</example>
</indent>

<p>As shown in the example above, filenames that include spaces must be enclosed in quotes.</p>

<p>Running the Setup Compiler from the command line does not suppress the normal progress display or any error messages. The Setup Compiler will return an exit code of 0 if the compile was successful, 1 if the command line parameters were invalid, or 2 if the compile failed.</p>
</li>

<li>
<p>Alternatively, you can compile scripts using the console-mode compiler, ISCC.exe. Command line usage is as follows:</p>

<indent>
<p>iscc <i>[options]</i> <i>&lt;script name&gt;</i></p>
<p>Or to read from standard input:</p>
<p>iscc <i>[options]</i> -</p>
<example>iscc "c:\isetup\samples\my script.iss"</example>
</indent>

<p>As shown in the example above, filenames that include spaces must be enclosed in quotes.</p>

<p>Valid options are: "/O-" to disable output (overriding any <tt>Output</tt> setting in the script), "/O+" to enable output (overriding any <tt>Output</tt> setting in the script), "/O" to specify an output path (overriding any <tt>OutputDir</tt> setting in the script), "/F" to specify an output filename (overriding any <tt>OutputBaseFilename</tt> setting in the script), "/S" to specify a Sign Tool (any Sign Tools configured using the IDE will be specified automatically), "/Q[p]" for quiet compile (print only error messages, "p" will show progress info), and "/?" to show a help screen.</p>

<indent>
<example>iscc /Qp /O"My Output" /F"MyProgram-1.0" /Sbyparam=$p "c:\isetup\samples\my script.iss"</example>
</indent>

<p>ISCC will return an exit code of 0 if the compile was successful, 1 if the command line parameters were invalid or an internal error occurred, or 2 if the compile failed.</p>
</li>

<li>
<p>The Setup Script Wizard can be started from the command line. Command line usage is as follows:</p>

<indent>
<p>compil32 /wizard <i>&lt;wizard name&gt; &lt;script name&gt;</i></p>
<example>compil32 /wizard "MyProg Script Wizard" "c:\temp.iss"</example>
</indent>

<p>As shown in the example above, wizard names and filenames that include spaces must be enclosed in quotes.</p>

<p>Running the wizard from the command line does not suppress any error messages. The Setup Script Wizard will return an exit code of 0 if there was no error and additionally it will save the generated script file to the specified filename, 1 if the command line parameters were invalid, or 2 if the generated script file could not be saved. If the user cancelled the Setup Script Wizard, an exit code of 0 is returned and no script file is saved.</p>
</li>

</ul>

</body>
</topic>



<topic name="setupcmdline" title="Setup Command Line Parameters">
<keyword value="Setup Command Line Parameters" />
<keyword value="command line parameters" />
<keyword value="/HELP" anchor="HELP" />
<keyword value="/?" anchor="HELP2" />
<keyword value="/SP-" anchor="SP-" />
<keyword value="/SILENT" anchor="SILENT" />
<keyword value="/VERYSILENT" anchor="VERYSILENT" />
<keyword value="/NORESTART" anchor="NORESTART" />
<keyword value="/CLOSEAPPLICATIONS" anchor="CLOSEAPPLICATIONS" />
<keyword value="/NOCLOSEAPPLICATIONS" anchor="NOCLOSEAPPLICATIONS" />
<keyword value="/FORCECLOSEAPPLICATIONS" anchor="FORCECLOSEAPPLICATIONS" />
<keyword value="/NOFORCECLOSEAPPLICATIONS" anchor="NOFORCECLOSEAPPLICATIONS" />
<keyword value="/RESTARTAPPLICATIONS" anchor="RESTARTAPPLICATIONS" />
<keyword value="/NORESTARTAPPLICATIONS" anchor="NORESTARTAPPLICATIONS" />
<keyword value="/LOADINF=" anchor="LOADINF" />
<keyword value="/SAVEINF=" anchor="SAVEINF" />
<keyword value="/LANG=" anchor="LANG" />
<keyword value="/DIR=" anchor="DIR" />
<keyword value="/GROUP=" anchor="GROUP" />
<keyword value="/NOICONS" anchor="NOICONS" />
<keyword value="/TYPE=" anchor="TYPE" />
<keyword value="/COMPONENTS=" anchor="COMPONENTS" />
<keyword value="/TASKS=" anchor="TASKS" />
<keyword value="/MERGETASKS=" anchor="MERGETASKS" />
<keyword value="/NOCANCEL" anchor="NOCANCEL" />
<keyword value="/LOG" anchor="LOG" />
<keyword value="/LOG=" anchor="LOG2" />
<keyword value="/PASSWORD=" anchor="PASSWORD" />
<keyword value="/RESTARTEXITCODE=" anchor="RESTARTEXITCODE" />
<keyword value="/SUPPRESSMSGBOXES" anchor="SUPPRESSMSGBOXES" />
<keyword value="/ALLUSERS" anchor="ALLUSERS" />
<keyword value="/CURRENTUSER" anchor="CURRENTUSER" />
<keyword value="silent installation" />
<keyword value="logging" />
<body>

<p>The Setup program accepts optional command line parameters. These can be useful to system administrators, and to other programs calling the Setup program.</p>

<dl>

<dt><b><a name="HELP">/HELP</a>, <a name="HELP2">/?</a></b></dt>
<dd>
<p>Shows a summary of this information. Ignored if the <tt>UseSetupLdr</tt> <tt>[Setup]</tt> section directive was set to <tt>no</tt>.</p>
</dd>

<dt><b><a name="SP-">/SP-</a></b></dt>
<dd>
<p>Disables the <i>This will install... Do you wish to continue?</i> prompt at the beginning of Setup. Of course, this will have no effect if the <tt>DisableStartupPrompt</tt> <tt>[Setup]</tt> section directive was set to <tt>yes</tt>.</p>
</dd>

<dt><b><a name="SILENT">/SILENT</a>, <a name="VERYSILENT">/VERYSILENT</a></b></dt>
<dd>
<p>Instructs Setup to be silent or very silent. When Setup is silent the wizard and the background window are not displayed but the installation progress window is. When a setup is very silent this installation progress window is not displayed. Everything else is normal so for example error messages during installation are displayed and the startup prompt is (if you haven't disabled it with DisableStartupPrompt or the '/SP-' command line option explained above).</p>
<p>If a restart is necessary and the '/NORESTART' command isn't used (see below) and Setup is silent, it will display a <i>Reboot now?</i> message box. If it's very silent it will reboot without asking.</p>
</dd>

<dt><b><a name="SUPPRESSMSGBOXES">/SUPPRESSMSGBOXES</a></b></dt>
<dd>
<p>Instructs Setup to suppress message boxes. Only has an effect when combined with '/SILENT' or '/VERYSILENT'.</p>
<p>The default response in situations where there's a choice is:</p>
<ul appearance="compact">
<li>Yes in a 'Keep newer file?' situation.</li>
<li>No in a 'File exists, confirm overwrite.' situation.</li>
<li>Abort in Abort/Retry situations.</li>
<li>Cancel in Retry/Cancel situations.</li>
<li>Yes (=continue) in a DiskSpaceWarning/DirExists/DirDoesntExist/NoUninstallWarning/ExitSetupMessage/ConfirmUninstall situation.</li>
<li>Yes (=restart) in a FinishedRestartMessage/UninstalledAndNeedsRestart situation.</li>
<li>The recommended choice in a PrivilegesRequiredOverridesAllowed=dialog situation.</li>
</ul>
<p>5 message boxes are not suppressible:</p>
<ul appearance="compact">
<li>The About Setup message box.</li>
<li>The Exit Setup? message box.</li>
<li>The FileNotInDir2 message box displayed when Setup requires a new disk to be inserted and the disk was not found.</li>
<li>Any (error) message box displayed before Setup (or Uninstall) could read the command line parameters.</li>
<li>Any task dialog or message box displayed by [Code] support functions <tt>TaskDialogMsgBox</tt> and <tt>MsgBox</tt>.</li>
</ul>
</dd>

<dt><b><a name="ALLUSERS">/ALLUSERS</a></b></dt>
<dd>
<p>Instructs Setup to install in <link topic="admininstallmode">administrative install</link> mode. Only has an effect when the <tt>[Setup]</tt> section directive <link topic="setup_privilegesrequiredoverridesallowed">PrivilegesRequiredOverridesAllowed</link> allows the <tt>commandline</tt> override.</p>
</dd>

<dt><b><a name="CURRENTUSER">/CURRENTUSER</a></b></dt>
<dd>
<p>Instructs Setup to install in <link topic="admininstallmode">non administrative install</link> mode. Only has an effect when the <tt>[Setup]</tt> section directive <link topic="setup_privilegesrequiredoverridesallowed">PrivilegesRequiredOverridesAllowed</link> allows the <tt>commandline</tt> override.</p>
</dd>

<dt><b><a name="LOG">/LOG</a></b></dt>
<dd>
<p>Causes Setup to create a log file in the user's TEMP directory detailing file installation and [Run] actions taken during the installation process. This can be a helpful debugging aid. For example, if you suspect a file isn't being replaced when you believe it should be (or vice versa), the log file will tell you if the file was really skipped, and why.</p>
<p>The log file is created with a unique name based on the current date. (It will not overwrite or append to existing files.)</p>
<p>The information contained in the log file is technical in nature and therefore not intended to be understandable by end users. Nor is it designed to be machine-parsable; the format of the file is subject to change without notice.</p>
</dd>

<dt><b><a name="LOG2">/LOG=</a>"<i>filename</i>"</b></dt>
<dd>
<p>Same as /LOG, except it allows you to specify a fixed path/filename to use for the log file. If a file with the specified name already exists it will be overwritten. If the file cannot be created, Setup will abort with an error message.</p>
</dd>

<dt><b><a name="NOCANCEL">/NOCANCEL</a></b></dt>
<dd>
<p>Prevents the user from cancelling during the installation process, by disabling the Cancel button and ignoring clicks on the close button. Useful along with '/SILENT' or '/VERYSILENT'.</p>
</dd>

<dt><b><a name="NORESTART">/NORESTART</a></b></dt>
<dd>
<p>Prevents Setup from restarting the system following a successful installation, or after a <i>Preparing to Install</i> failure that requests a restart. Typically used along with /SILENT or /VERYSILENT.</p>
</dd>

<dt><b><a name="RESTARTEXITCODE">/RESTARTEXITCODE=</a><i>exit code</i></b></dt>
<dd>
<p>Specifies a custom exit code that Setup is to return when the system needs to be restarted following a successful installation. (By default, 0 is returned in this case.) Typically used along with /NORESTART. See also: <link topic="setupexitcodes">Setup Exit Codes</link></p>
</dd>

<dt><b><a name="CLOSEAPPLICATIONS">/CLOSEAPPLICATIONS</a></b></dt>
<dd>
<p>Instructs Setup to close applications using files that need to be updated by Setup if possible.</p>
</dd>

<dt><b><a name="NOCLOSEAPPLICATIONS">/NOCLOSEAPPLICATIONS</a></b></dt>
<dd>
<p>Prevents Setup from closing applications using files that need to be updated by Setup. If /CLOSEAPPLICATIONS was also used, this command line parameter is ignored.</p>
</dd>

<dt><b><a name="FORCECLOSEAPPLICATIONS">/FORCECLOSEAPPLICATIONS</a></b></dt>
<dd>
<p>Instructs Setup to force close when closing applications.</p>
</dd>

<dt><b><a name="NOFORCECLOSEAPPLICATIONS">/NOFORCECLOSEAPPLICATIONS</a></b></dt>
<dd>
<p>Prevents Setup from force closing when closing applications. If /FORCECLOSEAPPLICATIONS was also used, this command line parameter is ignored.</p>
</dd>

<dt><b><a name="RESTARTAPPLICATIONS">/RESTARTAPPLICATIONS</a></b></dt>
<dd>
<p>Instructs Setup to restart applications if possible. Only has an effect when combined with '/CLOSEAPPLICATIONS'.</p>
</dd>

<dt><b><a name="NORESTARTAPPLICATIONS">/NORESTARTAPPLICATIONS</a></b></dt>
<dd>
<p>Prevents Setup from restarting applications. If /RESTARTAPPLICATIONS was also used, this command line parameter is ignored.</p>
</dd>

<dt><b><a name="LOADINF">/LOADINF=</a>"<i>filename</i>"</b></dt>
<dd>
<p>Instructs Setup to load the settings from the specified file after having checked the command line. This file can be prepared using the '/SAVEINF=' command as explained below.</p>
<p>Don't forget to use quotes if the filename contains spaces.</p>
</dd>

<dt><b><a name="SAVEINF">/SAVEINF=</a>"<i>filename</i>"</b></dt>
<dd>
<p>Instructs Setup to save installation settings to the specified file.</p>
<p>Don't forget to use quotes if the filename contains spaces.</p>
</dd>

<dt><b><a name="LANG">/LANG=</a><i>language</i></b></dt>
<dd>
<p>Specifies the language to use. <i>language</i> specifies the internal name of the language as specified in a [Languages] section entry.</p>
<p>When a valid /LANG parameter is used, the <i>Select Language</i> dialog will be suppressed.</p>
</dd>

<dt><b><a name="DIR">/DIR=</a>"<i>x</i>:\<i>dirname</i>"</b></dt>
<dd>
<p>Overrides the default directory name displayed on the <i>Select Destination Location</i> wizard page. A fully qualified pathname must be specified. May include an "expand:" prefix which instructs Setup to expand any constants in the name. For example: '/DIR=expand:{autopf}\My Program'.</p>
</dd>

<dt><b><a name="GROUP">/GROUP=</a>"<i>folder name</i>"</b></dt>
<dd>
<p>Overrides the default folder name displayed on the <i>Select Start Menu Folder</i> wizard page. May include an "expand:" prefix, see '/DIR='. If the <tt>[Setup]</tt> section directive <tt>DisableProgramGroupPage</tt> was set to <tt>yes</tt>, this command line parameter is ignored.</p>
</dd>

<dt><b><a name="NOICONS">/NOICONS</a></b></dt>
<dd>
<p>Instructs Setup to initially check the <i>Don't create a Start Menu folder</i> check box on the <i>Select Start Menu Folder</i> wizard page.</p>
</dd>

<dt><b><a name="TYPE">/TYPE=</a><i>type name</i></b></dt>
<dd>
<p>Overrides the default <link topic="typessection">setup type</link>.</p>
<p>If the specified type exists and isn't a custom type, then any /COMPONENTS parameter will be ignored.</p>
</dd>

<dt><b><a name="COMPONENTS">/COMPONENTS=</a>"<i>comma separated list of component names</i>"</b></dt>
<dd>
<p>Overrides the default <link topic="componentssection">component</link> settings. Using this command line parameter causes Setup to automatically select a custom type. If no custom type is defined, this parameter is ignored.</p>
<p>Only the specified components will be selected; the rest will be deselected.</p>
<p>If a component name is prefixed with a "*" character, any child components will be selected as well (except for those that include the <tt>dontinheritcheck</tt> flag). If a component name is prefixed with a "!" character, the component will be deselected.</p>
<p>This parameter does not change the state of components that include the <tt>fixed</tt> flag.</p>
<example>
Deselect all components, then select the "help" and "plugins" components:<br/>
/COMPONENTS="help,plugins"
</example>
<example>
Deselect all components, then select a parent component and all of its children with the exception of one:<br/>
/COMPONENTS="*parent,!parent\child"
</example>
</dd>

<dt><b><a name="TASKS">/TASKS=</a>"<i>comma separated list of task names</i>"</b></dt>
<dd>
<p>Specifies a list of <link topic="taskssection">tasks</link> that should be initially selected.</p>
<p>Only the specified tasks will be selected; the rest will be deselected. Use the /MERGETASKS parameter instead if you want to keep the default set of tasks and only select/deselect some of them.</p>
<p>If a task name is prefixed with a "*" character, any child tasks will be selected as well (except for those that include the <tt>dontinheritcheck</tt> flag). If a task name is prefixed with a "!" character, the task will be deselected.</p>
<example>
Deselect all tasks, then select the "desktopicon" and "fileassoc" tasks:<br/>
/TASKS="desktopicon,fileassoc"
</example>
<example>
Deselect all tasks, then select a parent task and all of its children with the exception of one:<br/>
/TASKS="*parent,!parent\child"
</example>
</dd>

<dt><b><a name="MERGETASKS">/MERGETASKS=</a>"<i>comma separated list of task names</i>"</b></dt>
<dd>
<p>Like the /TASKS parameter, except the specified tasks will be merged with the set of tasks that would have otherwise been selected by default.</p>
<p>If <link topic="setup_useprevioustasks">UsePreviousTasks</link> is set to <tt>yes</tt>, the specified tasks will be selected/deselected after any previous tasks are restored.</p>
<example>
Keep the default set of selected tasks, but additionally select the "desktopicon" and "fileassoc" tasks:<br/>
/MERGETASKS="desktopicon,fileassoc"
</example>
<example>
Keep the default set of selected tasks, but deselect the "desktopicon" task:<br/>
/MERGETASKS="!desktopicon"
</example>
</dd>

<dt><b><a name="PASSWORD">/PASSWORD=</a><i>password</i></b></dt>
<dd>
<p>Specifies the password to use. If the <tt>[Setup]</tt> section directive <tt>Password</tt> was not set, this command line parameter is ignored.</p>
<p>When an invalid password is specified, this command line parameter is also ignored.</p>
</dd>

</dl>

</body>
</topic>



<topic name="setupexitcodes" title="Setup Exit Codes">
<keyword value="Setup Exit Codes" />
<keyword value="exit codes" />
<keyword value="return codes" />
<body>

<p>Beginning with Inno Setup 3.0.3, the Setup program may return one of the following exit codes:</p>

<table>

<tr>
<td><b>0</b></td>
<td>
<p>Setup was successfully run to completion or the /HELP or /? command line parameter was used.</p>
</td>
</tr>

<tr>
<td><b>1</b></td>
<td>
<p>Setup failed to initialize.</p>
</td>
</tr>

<tr>
<td><b>2</b></td>
<td>
<p>The user clicked Cancel in the wizard before the actual installation started, or chose "No" on the opening "This will install..." message box.</p>
</td>
</tr>

<tr>
<td><b>3</b></td>
<td>
<p>A fatal error occurred while preparing to move to the next installation phase (for example, from displaying the pre-installation wizard pages to the actual installation process). This should never happen except under the most unusual of circumstances, such as running out of memory or Windows resources.</p>
</td>
</tr>

<tr>
<td><b>4</b></td>
<td>
<p>A fatal error occurred during the actual installation process.</p>
<p><i>Note:</i> Errors that cause an Abort-Retry-Ignore box to be displayed are not fatal errors. If the user chooses <i>Abort</i> at such a message box, exit code 5 will be returned.</p>
</td>
</tr>

<tr>
<td><b>5</b></td>
<td>
<p>The user clicked Cancel during the actual installation process, or chose <i>Abort</i> at an Abort-Retry-Ignore box.</p>
</td>
</tr>

<tr>
<td><b>6</b></td>
<td>
<p>The Setup process was forcefully terminated by the debugger (<i>Run | Terminate</i> was used in the IDE).</p>
</td>
</tr>

<tr>
<td><b>7</b></td>
<td>
<p>The <link topic="wizardpages"><i>Preparing to Install</i></link> stage determined that Setup cannot proceed with installation. <i>(First introduced in Inno Setup 5.4.1.)</i></p>
</td>
</tr>

<tr>
<td><b>8</b></td>
<td>
<p>The <link topic="wizardpages"><i>Preparing to Install</i></link> stage determined that Setup cannot proceed with installation, and that the system needs to be restarted in order to correct the problem. <i>(First introduced in Inno Setup 5.4.1.)</i></p>
</td>
</tr>

</table>

<p>Before returning an exit code of 1, 3, 4, 7, or 8, an error message explaining the problem will normally be displayed.</p>

<p>Future versions of Inno Setup may return additional exit codes, so applications checking the exit code should be programmed to handle unexpected exit codes gracefully. Any non-zero exit code indicates that Setup was not run to completion.</p>

</body>
</topic>



<topic name="uninstcmdline" title="Uninstaller Command Line Parameters">
<keyword value="Uninstaller Command Line Parameters" />
<keyword value="command line parameters" />
<keyword value="/SILENT" anchor="SILENT" />
<keyword value="/VERYSILENT" anchor="VERYSILENT" />
<keyword value="/NORESTART" anchor="NORESTART" />
<keyword value="/LOG" anchor="LOG" />
<keyword value="/LOG=" anchor="LOG2" />
<keyword value="/SUPPRESSMSGBOXES" anchor="SUPPRESSMSGBOXES" />
<keyword value="silent uninstallation" />
<keyword value="logging" />
<body>

<p>The uninstaller program (unins???.exe) accepts optional command line parameters. These can be useful to system administrators, and to other programs calling the uninstaller program.</p>

<dl>

<dt><b><a name="SILENT">/SILENT</a>, <a name="VERYSILENT">/VERYSILENT</a></b></dt>
<dd>
<p>When specified, the uninstaller will not ask the user for startup confirmation or display a message stating that uninstall is complete. Shared files that are no longer in use are deleted automatically without prompting. Any critical error messages will still be shown on the screen. When '/VERYSILENT' is specified, the uninstallation progress window is not displayed.</p>
<p>If a restart is necessary and the '/NORESTART' command isn't used (see below) and '/VERYSILENT' is specified, the uninstaller will reboot without asking.</p>
</dd>

<dt><b><a name="SUPPRESSMSGBOXES">/SUPPRESSMSGBOXES</a></b></dt>
<dd>
<p>Instructs the uninstaller to suppress message boxes. Only has an effect when combined with '/SILENT' and '/VERYSILENT'. See '/SUPPRESSMSGBOXES' under <link topic="setupcmdline" anchor="SUPPRESSMSGBOXES">Setup Command Line Parameters</link> for more details.</p>
</dd>

<dt><b><a name="LOG">/LOG</a></b></dt>
<dd>
<p>Causes Uninstall to create a log file in the user's TEMP directory detailing file uninstallation and [UninstallRun] actions taken during the uninstallation process. This can be a helpful debugging aid.</p>
<p>The log file is created with a unique name based on the current date. (It will not overwrite or append to existing files.)</p>
<p>The information contained in the log file is technical in nature and therefore not intended to be understandable by end users. Nor is it designed to be machine-parsable; the format of the file is subject to change without notice.</p>
</dd>

<dt><b><a name="LOG2">/LOG=</a>"<i>filename</i>"</b></dt>
<dd>
<p>Same as /LOG, except it allows you to specify a fixed path/filename to use for the log file. If a file with the specified name already exists it will be overwritten. If the file cannot be created, Uninstall will abort with an error message.</p>
</dd>

<dt><b><a name="NORESTART">/NORESTART</a></b></dt>
<dd>
<p>Instructs the uninstaller not to reboot even if it's necessary.</p>
</dd>

</dl>

</body>
</topic>



<topic name="uninstexitcodes" title="Uninstaller Exit Codes">
<keyword value="Uninstaller Exit Codes" />
<keyword value="exit codes" />
<keyword value="return codes" />
<body>

<p>Beginning with Inno Setup 4.0.8, the uninstaller will return a non-zero exit code if the user cancels or a fatal error is encountered. Programs checking the exit code to detect failure should not check for a specific non-zero value; any non-zero exit code indicates that the uninstaller was not run to completion.</p>

<p>Note that at the moment you get an exit code back from the uninstaller, some code related to uninstallation might still be running. Because Windows doesn't allow programs to delete their own EXEs, the uninstaller creates and spawns a copy of itself in the TEMP directory. This "clone" performs the actual uninstallation, and at the end, terminates the original uninstaller EXE (at which point you get an exit code back), deletes it, then displays the "uninstall complete" message box (if it hasn't been suppressed with /SILENT or /VERYSILENT).</p>

</body>
</topic>



<topic name="unsafefiles" title="Unsafe Files">
<keyword value="Unsafe Files" />
<body>

<p>As a convenience to new users who are unfamiliar with which files they should and should not distribute, the compiler will display an error message if one attempts to install certain "unsafe" files using the <link topic="filessection">[Files] section</link>. These files are listed below.</p>

<p>(Note: It is possible to disable the error message by using a certain flag on the [Files] section entry, but this is NOT recommended.)</p>

<dl>

<dt><b>Any DLL file from own Windows System directory</b></dt>
<dd>
<p>You should not deploy any DLLs out of your own Windows System directory to <tt>{sys}</tt> because most of them are tailored for your own specific version of Windows, and will not work when installed on other versions. Often times a user's system will be <b>rendered unbootable</b> if you install a DLL from a different version of Windows. Another reason why it's a bad idea is that when you install programs on your computer, the DLLs may be replaced with different/incompatible versions without your knowledge. This could lead to unexpected and difficult-to-trace problems on users' systems when you build new installations.</p>
<p>Instead of deploying the DLLs from your Windows System directory, you should find versions that are specifically deemed "redistributable". Redistributable DLLs typically work on more than one version of Windows. To find redistributable versions of the Visual Basic and Visual C++ run-time DLLs, see the Inno Setup FAQ.</p>
<p>If you have a DLL residing in the Windows System directory that you are <b>absolutely sure</b> is redistributable, copy it to your script's source directory and deploy it from there instead.</p>
</dd>

<dt><b>ADVAPI32.DLL, COMDLG32.DLL, GDI32.DLL, KERNEL32.DLL, RICHED32.DLL, SHELL32.DLL, USER32.DLL, UXTHEME.DLL</b></dt>
<dd>
<p>These are all core components of Windows and must never be deployed with an installation. Users may only get new versions of these DLLs by installing a new version of Windows or a service pack or hotfix for Windows.</p>
</dd>

<dt><i>(Special case)</i> <b>COMCAT.DLL, MSVBVM50.DLL, MSVBVM60.DLL, OLEAUT32.DLL, OLEPRO32.DLL, STDOLE2.TLB</b></dt>
<dd>
<p>If <tt>DestDir</tt> is set to a location <i>other</i> than <tt>{sys}</tt> and the <tt>regserver</tt> or <tt>regtypelib</tt> flag is used, then the above files will be considered "unsafe". These files must never be deployed to and registered in a directory other than <tt>{sys}</tt> because doing so can potentially cause <i>all</i> programs on the system to use them in favor of the files in <tt>{sys}</tt>. Problems would result if your copies of the files are older than the ones in <tt>{sys}</tt>. Also, if your copies of the files were removed, other applications would break.</p>
</dd>

<dt><b>COMCTL32.DLL</b></dt>
<dd>
<p>Microsoft does not allow separate redistribution of COMCTL32.DLL (and for good reason - the file differs between platforms), so you should never place COMCTL32.DLL in a script's [Files] section. You can however direct your users to <extlink href="http://www.microsoft.com/downloads/details.aspx?FamilyID=cb2cf3a2-8025-4e8f-8511-9b476a8d35d2&amp;DisplayLang=en">download the COMCTL32 update from Microsoft</extlink>, or distribute the COMCTL32 update along with your program.</p>
</dd>

<dt><b>SHDOCVW.DLL, SHLWAPI.DLL, URLMON.DLL, WININET.DLL</b></dt>
<dd>
<p>These are core components of Internet Explorer and are also used by Windows Explorer. Replacing them may prevent Explorer from starting. If your application depends on these DLLs, or a recent version of them, then your users will need to install a recent version of Internet Explorer to get them.</p>
</dd>

<dt><b>MSCOREE.DLL</b></dt>
<dd>
<p>This file is part of the Microsoft .NET Framework. You cannot safely install or update the .NET Framework by including this file with your installation. Call or direct your users to dotnetfx.exe instead.</p>
</dd>

</dl>

</body>
</topic>



<topic name="credits" title="Contributers">
<keyword value="Contributers" />
<body>

<p>Inno Setup was created by Jordan Russell and is currently (since 5.4.3, released in 2011) maintained by Martijn Laan.</p>

<p>The following is a list of those who have contributed significant code to the Inno Setup project, or otherwise deserve special recognition:</p>

<ul>

<li>Jean-loup Gailly &amp; Mark Adler: Creators of the <extlink href="http://www.zlib.net/">zlib</extlink> compression library that Inno Setup uses.</li>

<li>Julian Seward: Creator of the <extlink href="http://www.bzip.org/">bzlib</extlink> compression library that Inno Setup uses.</li>

<li>Igor Pavlov: Creator of the <extlink href="http://www.7-zip.org/sdk.html">LZMA</extlink> compression library that Inno Setup uses.</li>

<li>Vince Valenti: Most of the code for the "Window" <tt>[Setup]</tt> section directives (1.12.4).</li>

<li>Joe White: Code for ChangesAssociations <tt>[Setup]</tt> section directive (1.2).</li>

<li>Jason Olsen: Most of the code for <link topic="appendnotes">appending to existing uninstall logs</link> (1.3).</li>

<li>Martijn Laan: Rich Edit 2.0 &amp; URL detection support (1.3.13); Silent uninstallation (1.3.25); System image list support in drive and directory lists (1.3.25); Silent installation (2.0); The <tt>[Types]</tt>, <tt>[Components]</tt> and <tt>[Tasks]</tt> sections (2.0); The <tt>postinstall</tt> flag (2.0); The <tt>[Code]</tt> section (4.0); Subcomponents and subtasks support (4.0); Many other features after 4.0.</li>

<li>Alex Yackimoff: Portions of <link topic="scriptclasses" anchor="TNewCheckListBox">TNewCheckListBox</link> (4.0).</li>

<li>Carlo Kok: <extlink href="http://www.remobjects.com/ps">RemObjects Pascal Script</extlink> (4.0).</li>

<li>Creators of SynEdit: The syntax-highlighting editor used in the Compiler (2.0 - 5.2.4).</li>

<li>Creators of UniSynEdit: The syntax-highlighting editor used in the Compiler (5.3 - 5.3.11).</li>

<li>Creators of <extlink href="http://www.scintilla.org/">Scintilla</extlink>: The syntax-highlighting editor used in the Compiler (5.4).</li>

<li>Motaz Alnuweiri: 128x128 and 256x256 sizes of the compiler and document icons.</li>

<li>Zaher Dirkey: Initial work on improved right-to-left languages support.</li>

<li>Evgeny Karpov of RemObjects Software: Initial work on Unicode support.</li>

<li>DRON: Code for the improved image stretching (5.6.0).</li>

<li>Sherlock Software: Most of the code for the <tt>CreateCallback</tt> support function (6.0).</li>

</ul>

</body>
</topic>



<topic name="donate" title="Support Inno Setup">
<keyword value="Support Inno Setup" />
<body>

<p>To support Inno Setup, go to this page:<br/>
<extlink href="http://www.jrsoftware.org/isdonate.php">http://www.jrsoftware.org/isdonate.php</extlink></p>

</body>
</topic>



<setuptopic directive="UseSetupLdr">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>This tells the Setup Compiler which type of Setup to create. If this is <tt>yes</tt>, it compiles all setup data into a single EXE. If this is <tt>no</tt>, it compiles the setup data into at least three files: setup.exe, setup-0.bin, and setup-1.bin. The <b>only</b> reason you would probably want to use <tt>no</tt> is for debugging purposes.</p>
<p><i>Note:</i> Do not use <tt>UseSetupLdr=no</tt> on an installation which uses disk spanning (<tt>DiskSpanning=yes</tt>). When <tt>UseSetupLdr</tt> is <tt>yes</tt>, the setup program is copied to and run from the user's TEMP directory. This does not happen when <tt>UseSetupLdr</tt> is <tt>no</tt>, and could result in errors if Windows tries to locate the setup.exe file on the disk and can't find it because a different disk is in the drive.</p>
<p><i>Note:</i> Do not use <tt>UseSetupLdr=no</tt> to avoid digital signature verification startup delays on a large Setup, use disk spanning instead. See <link topic="setup_signtool">SignTool</link> for more information. Also note that digitally signing a <tt>UseSetupLdr=no</tt> based Setup will lead to an invalid digital signature for Uninstall.</p>
</body>
</setuptopic>

<setuptopic directive="BackColor" title="BackColor, BackColor2">
<keyword value="BackColor2" />
<setupvalid>A value in the form of <tt>$<i>bbggrr</i></tt>, where <tt>rr</tt>, <tt>gg</tt>, and <tt>bb</tt> specify the two-digit intensities (in hexadecimal) for red, green, and blue respectively. Or it may be one of the following predefined color names: clBlack, clMaroon, clGreen, clOlive, clNavy, clPurple, clTeal, clGray, clSilver, clRed, clLime, clYellow, clBlue, clFuchsia, clAqua, clWhite.</setupvalid>
<setupdefault><tt>clBlue</tt> for <tt>BackColor</tt>,<br/><tt>clBlack</tt> for <tt>BackColor2</tt></setupdefault>
<body>
<p>The <tt>BackColor</tt> directive specifies the color to use at the top (or left, if <tt>BackColorDirection=lefttoright</tt>) of the setup window's gradient background. <tt>BackColor2</tt> specifies the color to use at the bottom (or right).</p>
<p>The setting of <tt>BackColor2</tt> is ignored if <tt>BackSolid=yes</tt>.</p>
<examples>
<pre>
BackColor=clBlue
BackColor2=clBlack

BackColor=$FF0000
BackColor2=$000000
</pre>
</examples>
</body>
</setuptopic>

<setuptopic directive="BackColorDirection">
<setupvalid><tt>toptobottom</tt> or <tt>lefttoright</tt></setupvalid>
<setupdefault><tt>toptobottom</tt></setupdefault>
<body>
<p>This determines the direction of the gradient background on the setup window. If <tt>BackColorDirection</tt> is <tt>toptobottom</tt>, it is drawn from top to bottom; if it is <tt>lefttoright</tt>, it is drawn from left to right.</p>
</body>
</setuptopic>

<setuptopic directive="BackSolid">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>This specifies whether to use a solid or gradient background on the setup window. If this is <tt>yes</tt>, the background is a solid color (the color specified by <tt>BackColor</tt>; <tt>BackColor2</tt> is ignored).</p>
</body>
</setuptopic>

<setuptopic directive="AppName">
<body>
<p>This required directive specifies the name of the application being installed. Do not include the version number, as that is defined by the <link topic="setup_appversion">AppVersion</link> and/or <link topic="setup_appvername">AppVerName</link> directives. <tt>AppName</tt> is displayed throughout the Setup program and uninstaller in window titles, wizard pages, and dialog boxes. The value may include constants.</p>
<p>If <link topic="setup_disablewelcomepage">DisableWelcomePage</link> is set to <tt>yes</tt> (which it is by default) then <link topic="setup_appvername">AppVerName</link> is displayed in window titles instead of <tt>AppName</tt>.</p>
<p>The value of this directive is also used as the default value for the <link topic="setup_appid">AppId</link>, <link topic="setup_versioninfodescription">VersionInfoDescription</link>, and <link topic="setup_versioninfoproductname">VersionInfoProductName</link> directives if those are not specified.</p>
<example><pre>AppName=My Program</pre></example>
<p><b>See also:</b><br/>
<link topic="setup_appvername">AppVerName</link>
</p>
</body>
</setuptopic>

<setuptopic directive="AppVersion">
<body>
<p>This directive specifies the version number of the application being installed. The value of this directive, which may include constants, is used in the default value for the <link topic="setup_appvername">AppVerName</link> directive, and is displayed in the Version field of the application's <i>Add/Remove Programs</i> entry. It is also used to set the <tt>MajorVersion</tt> and <tt>MinorVersion</tt> values in the Uninstall registry key when possible.</p>
<p>This directive is required and cannot be empty if the <link topic="setup_appvername">AppVerName</link> directive is not set.</p>
<example><pre>AppVersion=1.5</pre></example>
</body>
</setuptopic>

<setuptopic directive="AppVerName">
<setupdefault><link topic="setup_appname">AppName</link> version <link topic="setup_appversion">AppVersion</link>, localized according to the active language's <tt>NameAndVersion</tt> <link topic="custommessagessection">custom message</link></setupdefault>
<body>
<p>This directive specifies the name of the application plus its version number. The value of this directive is displayed on the <i>Welcome</i> page of Setup's wizard, and is used as the default title of the application's <i>Add/Remove Programs</i> entry (see <link topic="setup_uninstalldisplayname">UninstallDisplayName</link>). The value may include constants.</p>
<p>If <link topic="setup_disablewelcomepage">DisableWelcomePage</link> is set to <tt>yes</tt> (which it is by default) then <tt>AppVerName</tt> is also displayed in window titles instead of <link topic="setup_appname">AppName</link>.</p>
<p>This directive is required if the <link topic="setup_appversion">AppVersion</link> directive is not set.</p>
<examples><pre>
AppVerName=My Program 1.5
AppVerName=My Program version 1.5
AppVerName={cm:NameAndVersion,My Program,1.5}
</pre></examples>
<p><b>See also:</b><br/>
<link topic="setup_appname">AppName</link>
</p>
</body>
</setuptopic>

<setuptopic directive="AppId">
<setupdefault><link topic="setup_appname">AppName</link></setupdefault>
<body>
<p>The value of <tt>AppId</tt> is stored inside uninstall log files (unins???.dat), and is checked by subsequent installations to determine whether it may <link topic="appendnotes">append to a particular existing uninstall log</link>. Setup will only append to an uninstall log if the <tt>AppId</tt> of the existing uninstall log is the same as the current installation's <tt>AppId</tt>. For a practical example, say you have two installations -- one entitled <i>My Program</i> and the other entitled <i>My Program 1.1 Update.</i> To get My Program 1.1 Update to append to My Program's uninstall log, you would have to set <tt>AppId</tt> to the same value in both installations.</p>
<p><tt>AppId</tt> also determines the actual name of the Uninstall registry key, to which Inno Setup tacks on "_is1" at the end. (Therefore, if <tt>AppId</tt> is "MyProgram", the key will be named "MyProgram_is1".) Pre-1.3 versions of Inno Setup based the key name on the value of <tt>AppVerName</tt>.</p>
<p>AppId is a not used for display anywhere, so feel free to make it as cryptic as you desire. The value may include constants.</p>
<p>If you use a {code:..} constant to allow your user to customize <tt>AppId</tt>, you do not need to return the real value until just before the installation starts: if necessary you may return an empty or generic value at earlier times. If not empty, this value will only be used to attempt to restore previous install settings (like the settings stored by [Setup] section directive <link topic="setup_usepreviousappdir">UsePreviousAppDir</link>). If empty, it isn't used for anything.</p>
<p>The length of <tt>AppId</tt> with all constants evaluated should never exceed 127 characters.</p>
<example><pre>AppId=MyProgram</pre></example>
</body>
</setuptopic>

<setuptopic directive="AppMutex">
<body>
<p>This directive is used to prevent the user from installing new versions of an application while the application is still running, and to prevent the user from uninstalling a running application. It specifies the names of one or more named mutexes (multiple mutexes are separated by commas), which Setup and Uninstall will check for at startup. If any exist, Setup/Uninstall will display the message: "[Setup or Uninstall] has detected that [AppName] is currently running. Please close all instances of it now, then click OK to continue, or Cancel to exit." The value may include constants.</p>
<p>Use of this directive requires that you add code to your application which creates a mutex with the name you specify in this directive. Examples of creating a mutex in Delphi, C, and Visual Basic are shown below. The code should be executed during your application's startup.</p>
<p>Delphi:</p>
<precode>
CreateMutex(nil, False, 'MyProgramsMutexName');
</precode>
<p>C:</p>
<precode>
CreateMutex(NULL, FALSE, "MyProgramsMutexName");
</precode>
<p>Visual Basic (submitted by Peter Young):</p>
<precode>
'Place in Declarations section:
Private Declare Function CreateMutex Lib "kernel32" _
        Alias "CreateMutexA" _
       (ByVal lpMutexAttributes As Long, _
        ByVal bInitialOwner As Long, _
        ByVal lpName As String) As Long

'Place in startup code (Form_Load or Sub Main):
CreateMutex 0&amp;, 0&amp;, "MyProgramsMutexName"
</precode>
<p>It is not necessary to explicitly destroy the mutex object upon your application's termination; the system will do this automatically. Nor is it recommended that you do so, because ideally the mutex object should exist until the process completely terminates.</p>
<p>Note that mutex name comparison in Windows is <i>case sensitive.</i></p>
<p>To specify a mutex name containing a comma, escape the comma with a backslash.</p>
<p>See the topic for CreateMutex in the MS SDK help for more information on mutexes.</p>
<example><pre>AppMutex=MyProgramsMutexName</pre></example>
<p><b>See also:</b><br/>
<link topic="setup_setupmutex">SetupMutex</link>
</p>
</body>
</setuptopic>

<setuptopic directive="SetupMutex">
<body>
<p>This directive is used to prevent Setup from running while Setup is already running. It specifies the names of one or more named mutexes (multiple mutexes are separated by commas), which Setup will check for at startup. If any exist, Setup will display the message: "Setup has detected that Setup is currently running. Please close all instances of it now, then click OK to continue, or Cancel to exit." If none exist, Setup will create the mutex(es) and continue normally. The value may include constants.</p>
<p>To specify a mutex name containing a comma, escape the comma with a backslash.</p>
<p>See the topic for CreateMutex in the MS SDK help for more information on mutexes.</p>
<example><pre>SetupMutex=MySetupsMutexName,Global\MySetupsMutexName</pre></example>
<p><b>See also:</b><br/>
<link topic="setup_appmutex">AppMutex</link>
</p>
</body>
</setuptopic>

<setuptopic directive="AppCopyright">
<body>
<p>Specifies a copyright message that Setup will display in the bottom-right corner of Setup's background window when <link topic="setup_windowvisible">WindowVisible</link> is <tt>yes</tt>.</p>
<p>The value of this directive is also used as the default value for the <link topic="setup_versioninfocopyright">VersionInfoCopyright</link> directive if it is not specified.</p>
<example><pre>AppCopyright=Copyright (C) 1997-2005 My Company, Inc.</pre></example>
</body>
</setuptopic>

<setuptopic directive="AppComments">
<body>
<p>This string is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppComments=Hello.
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppContact">
<body>
<p>This string is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppContact=My Company Customer Support
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppPublisher">
<body>
<p>This string is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<p>The value of this directive is also used as the default value for the <link topic="setup_versioninfocompany">VersionInfoCompany</link> directive if it is not specified.</p>
<example>
<pre>
AppPublisher=My Company, Inc.
AppPublisherURL=http://www.example.com/
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppPublisherURL">
<body>
<p>A link to the specified URL is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppPublisher=My Company, Inc.
AppPublisherURL=http://www.example.com/
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppReadmeFile">
<body>
<p>This string, which may be a URL, is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppReadmeFile=http://www.example.com/readme.html
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppSupportPhone">
<body>
<p>This string is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppSupportPhone=1-800-555-1212
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppSupportURL">
<body>
<p>A link to the specified URL is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppSupportURL=http://www.example.com/support.html
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="AppUpdatesURL">
<body>
<p>A link to the specified URL is displayed on the "Support" dialog of the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants.</p>
<example>
<pre>
AppUpdatesURL=http://www.example.com/updates.html
</pre>
</example>
</body>
</setuptopic>

<setuptopic directive="DefaultDirName">
<body>
<p>The value of this required directive is used for the default directory name, which is used in the <i>Select Destination Location</i> page of the wizard. Normally it is prefixed by a directory constant.</p>
<p>If <link topic="setup_usepreviousappdir">UsePreviousAppDir</link> is <tt>yes</tt> (the default) and Setup finds a previous version of the <link topic="sameappnotes">same application</link> is already installed, it will substitute the default directory name with the directory selected previously.</p>
<examples>
<b>If you used:</b><br/>
<pre>DefaultDirName={sd}\MYPROG</pre>
<b>In Setup, this would typically display:</b><br/>
C:\MYPROG<br/><br/>
<b>If you used:</b><br/>
<pre>DefaultDirName={autopf}\My Program</pre>
<b>In Setup, this would typically display:</b><br/>
C:\Program Files\My Program
</examples>
</body>
</setuptopic>

<setuptopic directive="Uninstallable">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link>, or a <link topic="scriptexpression">boolean expression</link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>This determines if Inno Setup's automatic uninstaller is to be included in the installation. If this is <tt>yes</tt> or to a <link topic="scriptexpression">boolean expression</link> evaluating to <tt>True</tt> the uninstaller is included. Otherwise, no uninstallation support is included, requiring the end-user to manually remove the files pertaining to your application.</p>
<p>Setting this to a boolean expression can be useful if you want to offer the user a 'portable mode' option.</p>
<example><pre>[Setup]
Uninstallable=not IsTaskSelected('portablemode')

[Tasks]
Name: portablemode; Description: "Portable Mode"</pre></example>
<p><b>See also:</b><br/>
<link topic="setup_createuninstallregkey">CreateUninstallRegKey</link>
</p>
</body>
</setuptopic>

<setuptopic directive="MinVersion">
<setupformat><tt><i>major</i>.<i>minor</i></tt></setupformat>
<setupdefault><tt>6.0</tt></setupdefault>
<body>
<p>This directive lets you specify a minimum <link topic="winvernotes">version of Windows</link> that your software runs on. <link topic="buildnumnotes">Build numbers and/or service pack levels</link> may be included.</p>
<p>If the user's system does not meet the minimum version requirement, Setup will give an error message and exit.</p>
<p>For compatibility with previous versions of Inno Setup, separate Windows 95/98/Me and Windows NT version numbers may be specified, separated by a comma. Example: <tt>MinVersion=0,6.2</tt>. The Windows 95/98/Me version number (the first number) must be <tt>0</tt>, however, as Inno Setup no longer supports Windows 95/98/Me.</p>
</body>
</setuptopic>

<setuptopic directive="OnlyBelowVersion">
<setupformat><tt><i>major</i>.<i>minor</i></tt></setupformat>
<setupdefault><tt>0</tt></setupdefault>
<body>
<p>This directive lets you specify a minimum <link topic="winvernotes">version of Windows</link> that your software <i>will not</i> run on. Specifying "0" means there is no upper version limit. <link topic="buildnumnotes">Build numbers and/or service pack levels</link> may be included.</p>
<p>This directive is essentially the opposite of <link topic="setup_minversion">MinVersion</link>.</p>
<p>For compatibility with previous versions of Inno Setup, separate Windows 95/98/Me and Windows NT version numbers may be specified, separated by a comma. Example: <tt>OnlyBelowVersion=0,6.2</tt>. The Windows 95/98/Me version number (the first number) isn't used, however, as Inno Setup no longer supports Windows 95/98/Me.</p>
</body>
</setuptopic>

<setuptopic directive="UsedUserAreasWarning">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>This directive lets you disable the used user areas warning. See <link topic="admininstallmode">Non Administrative Install Mode</link> for more information.</p>
</body>
</setuptopic>

<setuptopic directive="PrivilegesRequired">
<setupvalid><tt>admin</tt>, or <tt>lowest</tt></setupvalid>
<setupdefault><tt>admin</tt></setupdefault>
<body>
<!--
<p>The effect of this directive depends on which version of Windows the user is running:</p>
<p><b>On Windows Vista and later:</b></p>
-->
<p>This directive affects whether elevated rights are requested (via a User Account Control dialog) when the installation is started.</p>
<p>When set to <tt>admin</tt> (the default), Setup will always run with administrative privileges and in <link topic="admininstallmode">administrative install mode</link>. If Setup was started by an unprivileged user, Windows will ask for the password to an account that has administrative privileges, and Setup will then run under that account.</p>
<!-- <p>When set to <tt>none</tt>, Setup will only run with administrative privileges if it was started by a member of the Administrators group. Do not use this setting unless you are sure your installation will run successfully on unprivileged accounts.</p> -->
<p>When set to <tt>lowest</tt>, Setup will not request to be run with administrative privileges even if it was started by a member of the Administrators group and will always run in <link topic="admininstallmode">non administrative install mode</link>. Do not use this setting unless you are sure your installation will run successfully on unprivileged accounts.</p>
<!--
<p><b>On earlier versions of Windows:</b></p>
<p>This directive specifies the minimum user privileges required to run the installation.</p>
<p>When set to <tt>admin</tt> (the default), Setup will only run if the user is a member of the Administrators group and will always run in <link topic="admininstallmode">administrative install mode</link>. Otherwise, it will display the following message and exit: "You must be logged in as an administrator when installing this program."</p>
<p>When set to <tt>none</tt> Setup will not check the user's group membership. Do not use this setting unless you are sure your installation will run successfully on unprivileged accounts.</p>
<p>When set to <tt>lowest</tt> Setup will not check the user's group membership and will always run in <link topic="admininstallmode">non administrative install mode</link>. Do not use this setting unless you are sure your installation will run successfully on unprivileged accounts.</p>
-->
<p><b>See also:</b><br/>
<link topic="setup_privilegesrequiredoverridesallowed">PrivilegesRequiredOverridesAllowed</link>
</p>
</body>
</setuptopic>

<setuptopic directive="PrivilegesRequiredOverridesAllowed">
<keyword value="commandline" />
<keyword value="dialog" />
<setupvalid>One or more of the following, separated by spaces: <br/><tt>commandline</tt> <br/><tt>dialog</tt></setupvalid>
<setupdefault><i>(blank)</i></setupdefault>
<body>
<p>Can be set to one or more overrides which allow the end user to override the script's default <link topic="setup_privilegesrequired">PrivilegesRequired</link> setting.</p>
<p>If override <tt>commandline</tt> is allowed then Setup will support two additional command line parameters to override the script's default <link topic="setup_privilegesrequired">PrivilegesRequired</link> setting: /ALLUSERS and /CURRENTUSER. See <link topic="setupcmdline" anchor="ALLUSERS">Setup Command Line Parameters</link> for more details.</p>
<p>If override <tt>dialog</tt> is allowed then Setup will ask the user to choose the install mode based on the script's default <link topic="setup_privilegesrequired">PrivilegesRequired</link> setting using a suppressible dialog. Allowing <tt>dialog</tt> automatically allows <tt>commandline</tt> and when one of the command line parameters is used then Setup will not ask the user.</p>
<p><b>See also:</b><br/>
<link topic="setup_usepreviousprivileges">UsePreviousPrivileges</link></p>
</body>
</setuptopic>

<setuptopic directive="DisableAppendDir">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p><i>Obsolete in 4.1.2.</i> Pre-4.1.2 versions of Inno Setup had a different directory selection interface, and the <tt>DisableAppendDir</tt> directive was used to control its behaviour.</p>
</body>
</setuptopic>

<setuptopic directive="EnableDirDoesntExistWarning">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt>, Setup will display a message box if the directory the user selects doesn't exist. Usually you will also set <tt>DirExistsWarning=no</tt> when this is <tt>yes</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="AlwaysCreateUninstallIcon">
<body>
<p><i>Obsolete in 3.0.</i> This directive is no longer supported. If you wish to create an Uninstall icon, use the new <tt>{uninstallexe}</tt> constant in the <tt>Filename</tt> parameter of an <link topic="iconssection">[Icons]</link> section entry.</p>
</body>
</setuptopic>

<setuptopic directive="ExtraDiskSpaceRequired">
<setupdefault><tt>0</tt></setupdefault>
<body>
<p>Normally, the disk space requirement displayed on the wizard is calculated by adding up the size of all the files in the [Files] section. If you want to increase the disk space display for whatever reason, set <tt>ExtraDiskSpaceRequired</tt> to the amount of bytes you wish to add to this figure. (1048576 bytes = 1 megabyte)</p>
</body>
</setuptopic>

<setuptopic directive="Compression">
<keyword value="zip" />
<keyword value="bzip" />
<keyword value="lzma" />
<keyword value="lzma2" />
<setupvalid><tt>zip</tt><br/>
<tt>zip/1</tt> through <tt>zip/9</tt><br/>
<tt>bzip</tt><br/>
<tt>bzip/1</tt> through <tt>bzip/9</tt><br/>
<tt>lzma</tt><br/>
<tt>lzma/fast</tt><br/>
<tt>lzma/normal</tt><br/>
<tt>lzma/max</tt><br/>
<tt>lzma/ultra</tt> &nbsp;&nbsp;(review memory requirements below before using)<br/>
<tt>lzma/ultra64</tt> &nbsp;&nbsp;(review memory requirements below before using)<br/>
<tt>lzma2</tt><br/>
<tt>lzma2/fast</tt><br/>
<tt>lzma2/normal</tt><br/>
<tt>lzma2/max</tt><br/>
<tt>lzma2/ultra</tt> &nbsp;&nbsp;(review memory requirements below before using)<br/>
<tt>lzma2/ultra64</tt> &nbsp;&nbsp;(review memory requirements below before using)<br/>
<tt>none</tt></setupvalid>
<setupdefault><tt>lzma2/max</tt></setupdefault>
<body>
<p>This specifies the method of compression to use on the files, and optionally the level of compression. Higher levels compress better but take longer doing so, and may also require more memory while compressing/decompressing.</p>
<p><tt>zip</tt> is the method of compression employed by .zip files ("deflate"). It is fast in both compression and decompression, and has very low memory requirements (less than 1 MB for both compression and decompression at level 9), but generally does not compress nearly as well as the other supported methods. <tt>zip</tt>, like <tt>lzma2</tt>, has one special property, though: it will not expand incompressible data (e.g., files that are already compressed). If a compression level isn't specified, it defaults to 7.</p>
<p><tt>bzip</tt> is the method of compression employed by the <extlink href="http://www.bzip.org/">bzip2</extlink> compressor. It almost always compresses better than <tt>zip</tt> but is usually slower in both compression and decompression. Up to 4 MB of memory is required during decompression, and up to 8 MB during compression. If a compression level isn't specified, it defaults to 9.</p>
<p><tt>lzma</tt> is the method of compression employed by the <extlink href="http://www.7-zip.org/">7-Zip LZMA</extlink> compressor. It typically compresses significantly better than the <tt>zip</tt> and <tt>bzip</tt> methods. However, depending on the compression level used, it can be significantly slower at compressing, and consume a <i>lot</i> more memory. The following table summarizes the approximate memory requirements for each of the supported <tt>lzma</tt> compression levels. If a compression level isn't specified, it defaults to <tt>max</tt>.</p>
<indent>
<table>
<tr><td></td><td><u>Decompression (dictionary size)</u></td><td><u>Compression (4 MB + 11 * dictionary size)</u></td></tr>
<tr><td><tt>fast</tt> (worst)</td><td>32 KB</td><td>3 MB</td></tr>
<tr><td><tt>normal</tt></td><td>2 MB</td><td>26 MB</td></tr>
<tr><td><tt>max</tt> (default)</td><td>8 MB</td><td>92 MB</td></tr>
<tr><td><tt>ultra</tt></td><td>32 MB</td><td>356 MB</td></tr>
<tr><td><tt>ultra64</tt> (best)</td><td>64 MB</td><td>708 MB</td></tr>
<tr><td></td><td>128 MB</td><td>1.38 GB</td></tr>
<tr><td></td><td>256 MB</td><td>2.75 GB</td></tr>
<tr><td></td><td>512 MB</td><td>5.5 GB</td></tr>
<tr><td></td><td>1 GB</td><td>11 GB</td></tr>
</table>
</indent>
<p><tt>lzma2</tt> is the method of compression employed by the <extlink href="http://www.7-zip.org/">7-Zip LZMA2</extlink> compressor. LZMA2 is a modified version of LZMA that offers a better compression ratio for incompressible data (random data expands about 0.005%, compared to 1.35% with original LZMA), and optionally can compress multiple parts of large files in parallel, greatly increasing compression speed but with a possible reduction in compression ratio (see <link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link>). Like LZMA, it can consume a <i>lot</i> of memory; see the above table. If a compression level isn't specified, it defaults to <tt>max</tt>.</p>
<p><tt>none</tt> specifies that no compression be used.</p>
<p><b>See also:</b><br/>
<link topic="setup_solidcompression">SolidCompression</link><br/>
<link topic="setup_lzmaalgorithm">LZMAAlgorithm</link><br/>
<link topic="setup_lzmablocksize">LZMABlockSize</link><br/>
<link topic="setup_lzmadictionarysize">LZMADictionarySize</link><br/>
<link topic="setup_lzmamatchfinder">LZMAMatchFinder</link><br/>
<link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link><br/>
<link topic="setup_lzmanumfastbytes">LZMANumFastBytes</link><br/>
<link topic="setup_lzmauseseparateprocess">LZMAUseSeparateProcess</link>
</p>
</body>
</setuptopic>

<setuptopic directive="CompressionThreads">
<keyword value="threads" />
<keyword value="multi-threading" />
<setupvalid><tt>auto</tt><br/>
<tt>1</tt><br />
<tt>2</tt> (or higher)</setupvalid>
<setupdefault><tt>auto</tt></setupdefault>
<body>
<p>Controls whether the multi-threaded match finder is enabled on the LZMA and LZMA2 compressors. Enabling the multi-threaded match finder can speed up the compression process by 50% or more on systems with multiple processor cores, and 20% or more on systems with Intel processors featuring Hyper-Threading Technology.</p>
<p>A value of <tt>auto</tt> (the default) enables the multi-threaded match finder for all compression levels except <tt>fast</tt>, which doesn't support it.</p>
<p>A value of <tt>1</tt> always disables the multi-threaded match finder.</p>
<p>Values of <tt>2</tt> or higher are currently equivalent to <tt>auto</tt>.</p>
<p>Note that for the LZMA2 compressor, this directive only controls whether the multi-threaded match finder is used. To enable support for compressing multiple parts of large files in parallel, set <link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link>.</p>
<p><b>See also:</b><br/>
<link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link></p></body>
</setuptopic>

<setuptopic directive="SolidCompression">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If <tt>yes</tt>, solid compression will be enabled. This causes all files to be compressed at once instead of separately. This can result in a much greater overall compression ratio if your installation contains many files with common content, such as text files, especially if such common content files are grouped together within the [Files] section.</p>
<p>The disadvantage to using solid compression is that because all files are compressed into a single compressed stream, Setup can no longer randomly access the files. This can decrease performance. If a certain file isn't going to be extracted on the user's system, it has to decompress the data for that file anyway (into memory) before it can decompress the next file. And if, for example, there was an error while extracting a particular file and the user clicks Retry, it can't just seek to the beginning of that file's compressed data; since all files are stored in one stream, it has seek to the very beginning. If disk spanning was enabled, the user would have to re-insert disk 1.</p>
</body>
</setuptopic>

<setuptopic directive="InternalCompressLevel">
<setupvalid><tt>none</tt>, or one of the <link topic="setup_compression">LZMA compression levels</link></setupvalid>
<setupdefault><tt>normal</tt></setupdefault>
<body>
<p>This specifies the level of LZMA compression to use on Setup's internal structures. Generally, there is little reason to change this from the default setting of <tt>normal</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="CreateAppDir">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If this is set to <tt>no</tt>, no directory for the application will be created, the <i>Select Destination Location</i> wizard page will not be displayed, and the {app} directory constant is equivalent to the {win} directory constant. If the uninstall feature is enabled when <tt>CreateAppDir</tt> is <tt>no</tt>, the uninstall data files are created in the system's Windows directory.</p>
</body>
</setuptopic>

<setuptopic directive="CreateUninstallRegKey">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link>, or a <link topic="scriptexpression">boolean expression</link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If this is set to <tt>no</tt> or to a <link topic="scriptexpression">boolean expression</link> evaluating to <tt>False</tt>, Setup won't create an entry in the <i>Add/Remove Programs</i> Control Panel applet.</p>
<p>Setting this to <tt>no</tt> can be useful if your installation is merely an update to an existing application and you don't want another entry created, but don't want to the disable the uninstall features entirely (via <tt>Uninstallable=no</tt>). In this case, <link topic="setup_updateuninstalllogappname">UpdateUninstallLogAppName</link> is usually set to <tt>no</tt> as well.</p>
<p><b>See also:</b><br/>
<link topic="setup_uninstallable">Uninstallable</link>
</p>
</body>
</setuptopic>

<setuptopic directive="DirExistsWarning">
<setupvalid><tt>auto</tt>, <link topic="yesnonotes"><tt>yes</tt>, or <tt>no</tt></link></setupvalid>
<setupdefault><tt>auto</tt></setupdefault>
<body>
<p>When set to <tt>auto</tt>, the default setting, Setup will show a "The directory ... already exists. Would you like to install to that directory anyway?" message if the user selects a directory that already exists on the <i>Select Destination Location</i> wizard page, except when another version of the <link topic="sameappnotes">same application</link> is already installed and the selected directory is the same as the previous one (only if <tt>UsePreviousAppDir</tt> is <tt>yes</tt>, the default setting).</p>
<p>When set to <tt>yes</tt>, Setup will always display the "Directory Exists" message when the user selects an existing directory.</p>
<p>When set to <tt>no</tt>, Setup will never display the "Directory Exists" message.</p>
</body>
</setuptopic>

<setuptopic directive="DisableDirPage">
<setupvalid><tt>auto</tt>, <link topic="yesnonotes"><tt>yes</tt>, or <tt>no</tt></link></setupvalid>
<setupdefault><tt>auto</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will not show the <i>Select Destination Location</i> wizard page.</p>
<p>If this is set to <tt>auto</tt>, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will not show the <i>Select Destination Location</i> wizard page.</p>
<p>If the <i>Select Destination Location</i> wizard page is not shown, it will always use the default directory name.</p>
<p>Also see <link topic="setup_alwaysshowdironreadypage">AlwaysShowDirOnReadyPage</link>.</p>
</body>
</setuptopic>

<setuptopic directive="DisableFinishedPage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will not show the <i>Setup Completed</i> wizard page, and instead will immediately close the Setup program once the installation process finishes. This may be useful if you execute a program in the [Run] section using the <tt>nowait</tt> flag, and don't want the <i>Setup Completed</i> window to remain in the background after the other program has started.</p>
<p>Note that the <tt>DisableFinishedPage</tt> directive is ignored if a restart of the computer is deemed necessary, or if a file is assigned to the <tt>InfoAfterFile</tt> <tt>[Setup]</tt> section directive. In those cases, the <i>Setup Completed</i> wizard page will still be displayed.</p>
</body>
</setuptopic>

<setuptopic directive="DisableProgramGroupPage">
<setupvalid><tt>auto</tt>, <link topic="yesnonotes"><tt>yes</tt>, or <tt>no</tt></link></setupvalid>
<setupdefault><tt>auto</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will not show the <i>Select Start Menu Folder</i> wizard page.</p>
<p>If this is set to <tt>auto</tt>, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will not show the <i>Select Start Menu Folder</i> wizard page.</p>
<p>If the <i>Select Start Menu Folder</i> wizard page is not shown, it will always use the default Start Menu folder name.</p>
<p>Also see <link topic="setup_alwaysshowgrouponreadypage">AlwaysShowGroupOnReadyPage</link>.</p>
</body>
</setuptopic>

<setuptopic directive="DisableReadyMemo">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will not show a list of settings on the <i>Ready to Install</i> wizard page. Otherwise the list is shown and contains information like the chosen setup type and the chosen components.</p>
</body>
</setuptopic>

<setuptopic directive="DisableReadyPage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will not show the <i>Ready to Install</i> wizard page.</p>
<p>When Setup is not running silently, this directive is ignored if no other wizard page before the <i>Ready to Install</i> wizard page has been shown yet.</p>
<p>Setting this to <tt>yes</tt> does not automatically change the caption of the <i>Next</i> button on the new last pre-installation wizard page to <i>Install</i>. You must do so manually instead. For example, if the new last pre-installation wizard page is the <i>Select Program Group</i> page:</p>
<example><pre>[Setup]
DisableReadyPage=yes

[Code]
procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpSelectProgramGroup then
    WizardForm.NextButton.Caption := SetupMessage(msgButtonInstall)
  else
    WizardForm.NextButton.Caption := SetupMessage(msgButtonNext);
end;</pre></example>
</body>
</setuptopic>

<setuptopic directive="DisableWelcomePage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will not show the <i>Welcome</i> wizard page.</p>
</body>
</setuptopic>

<setuptopic directive="UserInfoPage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If this is set to <tt>yes</tt>, Setup will show a <i>User Information</i> wizard page which asks for the user's name, organization and possibly a serial number. The values the user enters are stored in the <tt>{userinfoname}</tt>, <tt>{userinfoorg}</tt> and <tt>{userinfoserial}</tt> constants. If the installation is running in <link topic="admininstallmode">non administrative install mode</link> you can use these constants in [Registry] or [INI] entries to save their values for later use.</p>
<p>For the serial number field to appear, a <link topic="scriptevents" anchor="CheckSerial">CheckSerial</link> event function must be present.</p>
<p>The <link topic="setup_defaultuserinfoname">DefaultUserInfoName</link>, <link topic="setup_defaultuserinfoorg">DefaultUserInfoOrg</link> and <link topic="setup_defaultuserinfoserial">DefaultUserInfoSerial</link> directives determine the default name, organization and serial number shown. If <link topic="setup_useprevioususerinfo">UsePreviousUserInfo</link> is <tt>yes</tt> (the default) and Setup finds that a previous version of the <link topic="sameappnotes">same application</link> is already installed, it will use the name, organization and serial number entered previously instead.</p>
<p>On silent installs, the default user name, organization, and serial number values will be assumed. Setup will not check whether the user name is blank (since the user has no way of correcting it), however it will still check the serial number.</p>
</body>
</setuptopic>

<setuptopic directive="DefaultUserInfoName">
<setupdefault><tt>{sysuserinfoname}</tt></setupdefault>
<body>
<p>Specifies the default name shown on the <i>User Information</i> wizard page. This can include constants.</p>
</body>
</setuptopic>

<setuptopic directive="DefaultUserInfoOrg">
<setupdefault><tt>{sysuserinfoorg}</tt></setupdefault>
<body>
<p>Specifies the default organization shown on the <i>User Information</i> wizard page. This can include constants.</p>
</body>
</setuptopic>

<setuptopic directive="DefaultUserInfoSerial">
<body>
<p>Specifies the default serial number shown on the <i>User Information</i> wizard page. This can include constants.</p>
</body>
</setuptopic>

<setuptopic directive="AlwaysUsePersonalGroup">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>Normally, Inno Setup's <tt>{group}</tt> constant points to the All Users start menu if the user has administrative privileges. If this directive is set to <tt>yes</tt>, it always uses current user's profile.</p>
<p>You should be careful about using this option: it may not achieve what you are intending. The compiler will warn you about this, which can be disabled using <link topic="setup_useduserareaswarning">UsedUserAreasWarning</link>.</p>
</body>
</setuptopic>

<setuptopic directive="Output">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>no</tt> the Setup Compiler will only check the script for errors and skip creating setup files. Note: it will still clean the output directory and delete the manifest file, unless <tt>OutputDir</tt> and <tt>OutputManifestFile</tt> are set to an empty string.</p>
</body>
</setuptopic>

<setuptopic directive="OutputBaseFilename">
<setupdefault><tt>mysetup</tt></setupdefault>
<body>
<p>This directive allows you to assign a different name for the resulting Setup file(s), so you don't have to manually rename them after running the Setup Compiler.</p>
<p>Setting this to <tt>setup</tt> is not recommended: all executables named "setup.exe" are shimmed by Windows application compatibility to load additional DLLs, such as version.dll. These DLLs are loaded unsafely by Windows and can be hijacked.</p>
<example><pre>OutputBaseFilename=MyProg100</pre></example>
</body>
</setuptopic>

<setuptopic directive="UninstallFilesDir">
<setupdefault><tt>{app}</tt></setupdefault>
<body>
<p>Specifies the directory where the "unins*.*" files for the uninstaller are stored.</p>
<p><i>Note:</i> You should not assign a different value here on a new version of an application, or else Setup won't find the uninstall logs from the previous versions and therefore won't be able to <link topic="appendnotes">append to</link> them.</p>
<example><pre>UninstallFilesDir={app}\uninst</pre></example>
</body>
</setuptopic>

<setuptopic directive="UninstallDisplayIcon">
<body>
<p>This lets you specify a particular icon file (either an executable or an .ico file) to display for the Uninstall entry in the <i>Add/Remove Programs</i> Control Panel applet. The filename will normally begin with a directory constant.</p>
<p>If the file you specify contains multiple icons, you may append the suffix ",<i>n</i>" to specify an icon index, where <i>n</i> is the zero-based numeric index.</p>
<p>If this directive is not specified or is blank, Windows will select an icon itself, which may not be the one you prefer.</p>
<examples>
<pre>
UninstallDisplayIcon={app}\MyProg.exe
UninstallDisplayIcon={app}\MyProg.exe,1
</pre>
</examples>
</body>
</setuptopic>

<setuptopic directive="UninstallDisplayName">
<body>
<p>This lets you specify a custom name for the program's entry in the <i>Add/Remove Programs</i> Control Panel applet. The value may include constants. If this directive is not specified or is blank, Setup will use the value of <tt>[Setup]</tt> section directive <tt>AppVerName</tt> for the name.</p>
<example><pre>UninstallDisplayName=My Program</pre></example>
<p><b>See also:</b><br/>
<link topic="sidebyside">Side-by-side installation</link></p>
</body>
</setuptopic>

<setuptopic directive="UninstallDisplaySize">
<body>
<p>On Windows 7 and later, Setup uses this directive to set the <tt>EstimatedSize</tt> value in the Uninstall registry key when possible since the Windows 7 <i>Add/Remove Programs</i> Control Panel (called <i>Program and Features</i>) no longer automatically calculates it. If an <tt>UninstallDisplaySize</tt> is not set, Setup estimates the size itself by taking the size of all files installed and adding any <tt>ExtraDiskSpaceRequired</tt> values set. Note: Windows 7 without any service pack only supports the display of values smaller than 4 GB.</p>
<p>Set in bytes. (1048576 bytes = 1 megabyte)</p>
<example><pre>UninstallDisplaySize=1073741824</pre></example>
</body>
</setuptopic>

<setuptopic directive="UninstallIconName">
<body>
<p><i>Obsolete in 3.0.</i> This directive is no longer supported. If you wish to create an Uninstall icon, use the new <tt>{uninstallexe}</tt> constant in the <tt>Filename</tt> parameter of an <link topic="iconssection">[Icons]</link> section entry.</p>
</body>
</setuptopic>

<setuptopic directive="UninstallLogMode">
<setupvalid><tt>append</tt>, <tt>new</tt>, or <tt>overwrite</tt></setupvalid>
<setupdefault><tt>append</tt></setupdefault>
<body>
<p><tt>append</tt>, the default setting, instructs Setup to <link topic="appendnotes">append to an existing uninstall log</link> when possible.</p>
<p><tt>new</tt>, which corresponds to the behavior in pre-1.3 versions of Inno Setup, instructs Setup to always create a new uninstall log.</p>
<p><tt>overwrite</tt> instructs Setup to overwrite any existing uninstall logs from the <link topic="sameappnotes">same application</link> instead of appending to them (this is <i>not</i> recommended). The same rules for appending to existing logs apply to overwriting existing logs.</p>
<example><pre>UninstallLogMode=append</pre></example>
</body>
</setuptopic>

<setuptopic directive="UninstallRestartComputer">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt>, the uninstaller will always prompt the user to restart the system at the end of a successful uninstallation, regardless of whether it is necessary (e.g., because of <tt>[Files]</tt> section entries with the <tt>uninsrestartdelete</tt> flag).</p>
</body>
</setuptopic>

<setuptopic directive="UpdateUninstallLogAppName">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If <tt>yes</tt>, when appending to an existing uninstall log, Setup will replace the <tt>AppName</tt> field in the log with the current installation's <tt>AppName</tt>. The <tt>AppName</tt> field of the uninstall log determines the title displayed in the uninstaller. You may want to set this to <tt>no</tt> if your installation is merely an upgrade or add-on to an existing program, and you don't want the title of the uninstaller changed.</p>
</body>
</setuptopic>

<setuptopic directive="DefaultGroupName">
<body>
<p>The value of this directive is used for the default Start Menu folder name on the <i>Select Start Menu Folder</i> page of the wizard. If this directive is blank or isn't specified, it will use "(Default)" for the name.</p>
<p>Keep in mind that Start Menu folders are stored as literal directories so any characters not allowed in normal directory names can't be used in Start Menu folder names.</p>
<example><pre>DefaultGroupName=My Program</pre></example>
</body>
</setuptopic>

<setuptopic directive="DisableStartupPrompt">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this is set to <tt>yes</tt>, Setup will not show the <i>This will install... Do you wish to continue?</i> prompt.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="DiskSpanning">
<keyword value="disk spanning" />
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt>, the disk spanning feature will be enabled. Instead of storing all the compressed file data inside SETUP.EXE, the compiler will split it into multiple SETUP-*.BIN files -- known as "slices" -- suitable for copying onto separate floppy disks, CD-ROMs, or DVD-ROMs. Each generated slice contains a number in its name which indicates the disk onto which it should be copied. (For example, SETUP-2.BIN should be placed on disk 2.) The generated SETUP.EXE always goes on disk 1 along with the SETUP-1*.BIN file.</p>
<p>The size of each slice and the number of slices to create for each disk are determined by the values of the <link topic="setup_diskslicesize">DiskSliceSize</link> and <link topic="setup_slicesperdisk">SlicesPerDisk</link> <tt>[Setup]</tt> section directives, respectively. Other disk spanning-related directives that you may want to tweak include <link topic="setup_diskclustersize">DiskClusterSize</link> and <link topic="setup_reservebytes">ReserveBytes</link>.</p>
<p>Note that it is required that you set this directive to <tt>yes</tt> if the compressed size of your installation exceeds 2,100,000,000 bytes, even if you don't intend to place the installation onto multiple disks. (The installation will still function correctly if all the SETUP-*.BIN files are placed on the same disk.)</p>
</body>
</setuptopic>

<setuptopic directive="DiskSliceSize">
<setupvalid><tt>262144</tt> through <tt>2100000000</tt>, or <tt>max</tt></setupvalid>
<setupdefault><tt>max</tt> (2100000000)</setupdefault>
<body>
<p>This specifies the maximum number of bytes per disk slice (SETUP-*.BIN file). Normally, this should be set to the total number of bytes available on the disk media divided by the value of the <tt>SlicesPerDisk</tt> <tt>[Setup]</tt> section directive, which defaults to 1.</p>
<p>This directive is ignored if disk spanning is not enabled using the <tt>DiskSpanning</tt> <tt>[Setup]</tt> section directive.</p>
<p>To optimally fill 4.7 GB recordable DVDs, use:</p>
<precode>
SlicesPerDisk=3
DiskSliceSize=1566000000
</precode>
<p>To optimally fill 8.5 GB (dual-layer) recordable DVDs, use:</p>
<precode>
SlicesPerDisk=5
DiskSliceSize=1708200000
</precode>
<p>To optimally fill 700 MB (80-minute) recordable CDs, use:</p>
<precode>
SlicesPerDisk=1
DiskSliceSize=736000000
</precode>
<p>To optimally fill 1.44MB floppy disks, use:</p>
<precode>
SlicesPerDisk=1
DiskSliceSize=1457664
</precode>
</body>
</setuptopic>

<setuptopic directive="DiskClusterSize">
<setupdefault><tt>512</tt> (the standard cluster size for floppy disks)</setupdefault>
<body>
<p>This specifies the cluster size of the disk media. The Setup Compiler needs to know this in order to properly fill each disk to capacity.</p>
<p>This directive is ignored if disk spanning is not enabled using the <tt>DiskSpanning</tt> <tt>[Setup]</tt> section directive.</p>
</body>
</setuptopic>

<setuptopic directive="SlicesPerDisk">
<setupvalid><tt>1</tt> through <tt>26</tt></setupvalid>
<setupdefault><tt>1</tt></setupdefault>
<body>
<p>The number of SETUP-*.BIN files to create for each disk. If this is 1 (the default setting), the files will be named SETUP-<i>x</i>.BIN, where <i>x</i> is the disk number. If this is greater than 1, the files will be named SETUP-<i>xy</i>.BIN, where <i>x</i> is the disk number and <i>y</i> is a unique letter.</p>
<p>One reason why you may need to increase this from the default value of 1 is if the size of your disk media exceeds 2,100,000,000 bytes -- the upper limit of the <tt>DiskSliceSize</tt> <tt>[Setup]</tt> section directive. If, for example, your disk media has a capacity of 3,000,000,000 bytes, you can avoid the 2,100,000,000-byte disk slice size limit by setting <tt>SlicesPerDisk</tt> to <tt>2</tt> and <tt>DiskSliceSize</tt> to <tt>1500000000</tt> (or perhaps slightly less, due to file system overhead).</p>
</body>
</setuptopic>

<setuptopic directive="ReserveBytes">
<setupdefault><tt>0</tt></setupdefault>
<body>
<p>This specifies the minimum number of free bytes to reserve on the first disk. This is useful if you have to copy other files onto the first disk that aren't part of the setup program, such as a Readme file.</p>
<p>The Setup Compiler rounds this number up to the nearest cluster.</p>
<p>This directive is ignored if disk spanning is not enabled using the <tt>DiskSpanning</tt> <tt>[Setup]</tt> section directive.</p>
</body>
</setuptopic>

<setuptopic directive="MergeDuplicateFiles">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>Normally two file entries referring to the same source file will be compressed and stored only once. If you have a bunch of identical files in your installation, make them point to the same source file in the script, and the size of your installation can drop significantly. If you wish to disable this feature for some reason, set this directive to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="DontMergeDuplicateFiles">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<body>
<p><i>Obsolete in 4.2.5.</i> Use <link topic="setup_mergeduplicatefiles">MergeDuplicateFiles</link> instead.</p>
<p><tt>MergeDuplicateFiles=no</tt> is equivalent to <tt>DontMergeDuplicateFiles=yes</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="AllowCancelDuringInstall">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>Setting this to <tt>no</tt> prevents the user from cancelling during the actual installation process, by disabling the Cancel button and ignoring clicks on the close button. This has the same effect as passing /NOCANCEL to Setup on the command line.</p>
</body>
</setuptopic>

<setuptopic directive="AllowNoIcons">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt>, Setup will display a <i>Don't create a Start Menu folder</i> check box on the <i>Select Start Menu Folder</i> wizard page, which allows the user to skip creation of program shortcuts on the Start Menu.</p>
<p>Only [Icons] entries that have a <tt>Name</tt> parameter starting with <tt>{group}\</tt> and no <tt>Tasks</tt> parameter are affected by default. To force the check box to have an effect on a particular [Icons] entry, add a <tt>Check: not <link topic="isxfunc_WizardNoIcons">WizardNoIcons</link></tt> parameter.</p>
</body>
</setuptopic>

<setuptopic directive="AllowRootDirectory">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>no</tt>, the default, the user will not be allowed to enter a root directory (such as "C:\") on the <i>Select Destination Location</i> page of the wizard.</p>
</body>
</setuptopic>

<setuptopic directive="AllowUNCPath">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>no</tt>, the user will not be allowed to enter a UNC path (such as "\\server\share") on the <i>Select Destination Location</i> page of the wizard. This was the default behavior in Inno Setup 2.0.17 and earlier.</p>
<p>To fully disallow installation to network locations, you must also set <link topic="setup_allownetworkdrive">AllowNetworkDrive</link> to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="AllowNetworkDrive">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>no</tt>, the user will not be allowed to enter a network drive on the <i>Select Destination Location</i> page of the wizard.</p>
<p>To fully disallow installation to network locations, you must also set <link topic="setup_allowuncpath">AllowUNCPath</link> to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="AlwaysRestart">
<keyword value="restart" />
<keyword value="reboot" />
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt>, Setup will always prompt the user to restart the system at the end of a successful installation, regardless of whether this is necessary (for example, because of <tt>[Files]</tt> section entries with the <tt>restartreplace</tt> flag).</p>
</body>
</setuptopic>

<setuptopic directive="RestartIfNeededByRun">
<keyword value="restart" />
<keyword value="reboot" />
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt>, and a program executed in the [Run] section queues files to be replaced on the next reboot (by calling MoveFileEx or by modifying wininit.ini), Setup will detect this and prompt the user to restart the computer at the end of installation.</p>
</body>
</setuptopic>

<setuptopic directive="MessagesFile">
<body>
<p><i>Obsolete in 4.0.</i> This directive is no longer supported. Use the new <link topic="languagessection">[Languages] section</link> to specify a custom messages file.</p>
</body>
</setuptopic>

<setuptopic directive="LicenseFile">
<body>
<p>Specifies the name of an optional license agreement file, in .txt or .rtf (rich text) format, which is displayed before the user selects the destination directory for the program. This file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>If the user selects a language for which the <tt>LicenseFile</tt> parameter is set, this directive is effectively ignored. See the <link topic="languagessection">[Languages] section</link> documentation for more information.</p>
<example><pre>LicenseFile=license.txt</pre></example>
</body>
</setuptopic>

<setuptopic directive="InfoBeforeFile">
<body>
<p>Specifies the name of an optional "readme" file, in .txt or .rtf (rich text) format, which is displayed before the user selects the destination directory for the program. This file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>If the user selects a language for which the <tt>InfoBeforeFile</tt> parameter is set, this directive is effectively ignored. See the <link topic="languagessection">[Languages] section</link> documentation for more information.</p>
<example><pre>InfoBeforeFile=infobefore.txt</pre></example>
</body>
</setuptopic>

<setuptopic directive="InfoAfterFile">
<body>
<p>Specifies the name of an optional "readme" file, in .txt or .rtf (rich text) format, which is displayed after a successful install. This file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>This differs from <tt>isreadme</tt> files in that this text is displayed as a page of the wizard, instead of in a separate Notepad window.</p>
<p>If the user selects a language for which the <tt>InfoAfterFile</tt> parameter is set, this directive is effectively ignored. See the <link topic="languagessection">[Languages] section</link> documentation for more information.</p>
<example><pre>InfoAfterFile=infoafter.txt</pre></example>
</body>
</setuptopic>

<setuptopic directive="ChangesAssociations">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link>, or a <link topic="scriptexpression">boolean expression</link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt> or to a <link topic="scriptexpression">boolean expression</link> evaluating to <tt>True</tt>, Setup will tell Explorer to refresh its file associations information at the end of the installation, and Uninstall will do the same at the end of uninstallation.</p>
<p>If your installation creates a file association but doesn't have <tt>ChangesAssociations</tt> set to <tt>yes</tt>, the correct icon for the file type likely won't be displayed until the user logs off or restarts the computer.</p>
</body>
</setuptopic>

<setuptopic directive="ChangesEnvironment">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link>, or a <link topic="scriptexpression">boolean expression</link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt> or to a <link topic="scriptexpression">boolean expression</link> evaluating to <tt>True</tt>, at the end of the installation Setup will notify other running applications (notably Windows Explorer) that they should reload their environment variables from the registry.</p>
<p>If your installation creates or changes an environment variable but doesn't have <tt>ChangesEnvironment</tt> set to <tt>yes</tt>, the new/changed environment variable will not be seen by applications launched from Explorer until the user logs off or restarts the computer.</p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousAppDir">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will use the directory of the previous installation as the default directory presented to the user in the wizard.</p>
<p>Note that Setup cannot re-use settings from a previous installation that had <tt>Uninstallable</tt> set to <tt>no</tt>, since the registry entries it looks for are not created when <tt>Uninstallable</tt> is <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousGroup">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will use the Start Menu folder name of the previous installation as the default Start Menu folder name presented to the user in the wizard. Additionally, if <tt>AllowNoIcons</tt> is set to <tt>yes</tt>, the <i>Don't create a Start Menu folder</i> setting from the previous installation will be restored.</p>
<p>Note that Setup cannot re-use settings from a previous installation that had <tt>Uninstallable</tt> set to <tt>no</tt>, since the registry entries it looks for are not created when <tt>Uninstallable</tt> is <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousLanguage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will use the language of the previous installation as the default language presented to the user in the wizard.</p>
<p>Note that this directive does not change the language used by the <i>Select Language</i> dialog itself. See the <link topic="languagessection">[Languages] section</link> help topic for details on which language the <i>Select Language</i> dialog uses by default.</p>
<p>Also note that Setup cannot re-use settings from a previous installation that had <tt>Uninstallable</tt> set to <tt>no</tt>, since the registry entries it looks for are not created when <tt>Uninstallable</tt> is <tt>no</tt>.</p>
<p><tt>UsePreviousLanguage</tt> must be set to <tt>no</tt> when <tt>AppId</tt> includes constants.</p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousPrivileges">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed in one of the two install modes, and if so, it will use that install mode and not ask the user.</p>
<p>If <tt>PrivilegesRequiredOverridesAllowed</tt> does not allow <tt>dialog</tt>, this directive is effectively ignored.</p>
<p><tt>UsePreviousPrivileges</tt> must be set to <tt>no</tt> when <tt>AppId</tt> includes constants and <tt>PrivilegesRequiredOverridesAllowed</tt> allows <tt>dialog</tt>.</p>
<p><b>See also:</b><br/>
<link topic="setup_privilegesrequiredoverridesallowed">PrivilegesRequiredOverridesAllowed</link></p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousSetupType">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will use the setup type and component settings of the previous installation as the default settings presented to the user in the wizard.</p>
<p>Note that Setup cannot re-use settings from a previous installation that had <tt>Uninstallable</tt> set to <tt>no</tt>, since the registry entries it looks for are not created when <tt>Uninstallable</tt> is <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousTasks">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will use the task settings of the previous installation as the default settings presented to the user in the wizard.</p>
<p>Note that Setup cannot re-use settings from a previous installation that had <tt>Uninstallable</tt> set to <tt>no</tt>, since the registry entries it looks for are not created when <tt>Uninstallable</tt> is <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="UsePreviousUserInfo">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is <tt>yes</tt>, the default, at startup Setup will look in the registry to see if the <link topic="sameappnotes">same application</link> is already installed, and if so, it will use the name, organization and serial number entered previously as the default settings presented to the user on the <i>User Information</i> wizard page.</p>
<p>Note that Setup cannot re-use settings from a previous installation that had <tt>Uninstallable</tt> set to <tt>no</tt>, since the registry entries it looks for are not created when <tt>Uninstallable</tt> is <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="Password">
<body>
<p>Specifies a password you want to prompt the user for at the beginning of the installation.</p>
<p>When using a password, you might consider setting <link topic="setup_encryption">Encryption</link> to <tt>yes</tt> as well, otherwise files will be stored as plain text and it would not be exceedingly difficult for someone to gain access to them through reverse engineering.</p>
<p>The password itself is not stored as clear text; it's stored as a 160-bit SHA-1 hash, salted with a 64-bit random number. (Note: When encryption is enabled, this stored hash is <i>not</i> used for the encryption key; a different hash with a different salt is generated for that.)</p>
</body>
</setuptopic>

<setuptopic directive="WizardImageFile">
<setupdefault><tt>compiler:WIZMODERNIMAGE.BMP</tt></setupdefault>
<body>
<p>Specifies the name(s) of the bitmap file(s) to display on the left side of the wizard. Wildcards are supported and the files(s) must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>256-color bitmaps may not display correctly in 256-color mode, since it does not handle palettes.</p>
<p>When multiple files are specified, Setup will automatically select the one which best matches the system's DPI setting. The recommended size of the bitmap per DPI setting is:</p>
<table>
<tr><td>100%</td><td>164x314</td></tr>
<tr><td>125%</td><td>192x386</td></tr>
<tr><td>150%</td><td>246x459</td></tr>
<tr><td>175%</td><td>273x556</td></tr>
<tr><td>200%</td><td>328x604</td></tr>
<tr><td>225%</td><td>355x700</td></tr>
<tr><td>250%</td><td>410x797</td></tr>
</table>
<example><pre>WizardImageFile=myimage.bmp,myimage2.bmp</pre></example>
<p><b>See also:</b><br/>
<link topic="setup_wizardsmallimagefile">WizardSmallImageFile</link><br/>
<link topic="setup_wizardimagealphaformat">WizardImageAlphaFormat</link><br/>
<link topic="setup_wizardimagestretch">WizardImageStretch</link></p>
</body>
</setuptopic>

<setuptopic directive="WizardSmallImageFile">
<setupdefault><tt>compiler:WIZMODERNSMALLIMAGE.BMP</tt></setupdefault>
<body>
<p>Specifies the name(s) of the bitmap file(s) to display in the upper right corner of the wizard. Wildcards are supported and the file(s) must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>256-color bitmaps may not display correctly in 256-color mode, since it does not handle palettes.</p>
<p>When multiple files are specified, Setup will automatically select the one which best matches the system's DPI setting. The recommended size of the bitmap per DPI setting is:</p>
<table>
<tr><td>100%</td><td>55x55</td></tr>
<tr><td>125%</td><td>64x68</td></tr>
<tr><td>150%</td><td>83x80</td></tr>
<tr><td>175%</td><td>92x97</td></tr>
<tr><td>200%</td><td>110x106</td></tr>
<tr><td>225%</td><td>119x123</td></tr>
<tr><td>250%</td><td>138x140</td></tr>
</table>
<example><pre>WizardSmallImageFile=mysmallimage.bmp,mysmallimage2.bmp</pre></example>
<p><b>See also:</b><br/>
<link topic="setup_wizardimagefile">WizardImageFile</link><br/>
<link topic="setup_wizardimagealphaformat">WizardImageAlphaFormat</link><br/>
<link topic="setup_wizardimagestretch">WizardImageStretch</link></p>
</body>
</setuptopic>

<setuptopic directive="WindowShowCaption">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>no</tt>, Setup will be truly "full screen" -- it won't have a caption bar or border, and it will be on top of the taskbar.</p>
<p>This directive has no effect if <tt>WindowVisible</tt> is not set to <tt>yes</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="WindowStartMaximized">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt>, the Setup program's background window will initially be displayed in a maximized state, where it won't cover over the taskbar.</p>
<p>This directive has no effect if <tt>WindowVisible</tt> is not set to <tt>yes</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="WindowResizable">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>no</tt>, the user won't be able to resize the Setup program's background window when it's not maximized.</p>
<p>This directive has no effect if <tt>WindowVisible</tt> is not set to <tt>yes</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="WindowVisible">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt>, there will be a gradient background window displayed behind the wizard.</p>
<p>Note that this is considered a legacy feature; it likely will be removed at some point in the future.</p>
</body>
</setuptopic>

<setuptopic directive="WizardImageAlphaFormat">
<setupvalid><tt>none</tt>, <tt>defined</tt>, <tt>premultiplied</tt></setupvalid>
<setupdefault><tt>none</tt></setupdefault>
<body>
<p>If set to <tt>none</tt>, the default, any wizard image which is a 32 bit bitmap file should not have an alpha channel.</p>
<p>If set to <tt>premultiplied</tt>, any wizard image which is a 32 bit bitmap file should have its red, green and blue channel values premultiplied with the alpha channel value.</p>
<p>If set to <tt>defined</tt>, any wizard image which is a 32 bit bitmap file should not have its red, green and blue channel values premultiplied with the alpha channel value.</p>
<p>This directive has no effect for a wizard image which is not a 32 bit bitmap file.</p>
</body>
</setuptopic>

<setuptopic directive="WizardImageBackColor">
<body>
<p><i>Obsolete in 5.5.7.</i> This directive formerly specified the background color used to fill any unused space around the wizard bitmap when <link topic="setup_wizardimagestretch">WizardImageStretch</link> was set to <tt>no</tt>. Now any unused space is filled with the standard window color (usually white). If you wish to create a colored border around the image, do so by modifying the bitmap itself.</p>
</body>
</setuptopic>

<setuptopic directive="WizardImageStretch">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt>, the default, the wizard images will be stretched or shrunk if the images are larger or smaller than required.</p>
<p>If set to <tt>no</tt>, the wizard images will be centered in their respective areas if the images are larger than required, and clipped if the images are smaller than required. (This corresponds to the default behavior of Inno Setup 4.1.2 and earlier.)</p>
</body>
</setuptopic>

<setuptopic directive="WizardResizable">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt> if <link topic="setup_wizardstyle">WizardStyle</link> is set to <tt>modern</tt>, <tt>no</tt> otherwise</setupdefault>
<body>
<p>If set to <tt>yes</tt>, the user will be able to resize the main Setup wizard window.</p>
<p>Use <tt>Anchors</tt> and <tt>KeepSizeY</tt> properties to add full support for <tt>WizardResizable</tt> and <tt>WizardSizePercent</tt> to all your custom controls, custom wizard pages and <tt>TSetupForm</tt> forms if you have any. See the <i>CodeClasses.iss</i> example script for an example.</p>
<p><b>See also:</b><br/>
<link topic="setup_wizardsizepercent">WizardSizePercent</link></p>
</body>
</setuptopic>

<setuptopic directive="WizardSizePercent">
<setupformat><tt><i>a</i>,<i>b</i></tt>, where <tt><i>a</i></tt> is the horizontal size, and <tt><i>b</i></tt> is the vertical size.</setupformat>
<setupvalid>each size: <tt>100</tt> through <tt>150</tt></setupvalid>
<setupdefault><tt>120,120</tt> if <link topic="setup_wizardstyle">WizardStyle</link> is set to <tt>modern</tt>, <tt>100,100</tt> otherwise</setupdefault>
<body>
<p>Lets you increase the default size of all Setup and Uninstall wizard windows without increasing the font size. A size of for example 120 means a 20% size increase.</p>
<p>If you specify only one size it will be used as both the horizontal and the vertical size.</p>
<example><pre>WizardSizePercent=120</pre></example>
<p>Use <tt>Anchors</tt> and <tt>KeepSizeY</tt> properties to add full support for <tt>WizardResizable</tt> and <tt>WizardSizePercent</tt> to all your custom controls and wizard pages if you have any. See the <i>CodeClasses.iss</i> example script for an example.</p>
<p>Note: Some of the wizard windows such as the <i>Select Language</i> dialog will only increase in size horizontally.</p>
<p><b>See also:</b><br/>
<link topic="setup_wizardresizable">WizardResizable</link><br/>
<link topic="langoptionssection" anchor="DialogFontSize">DialogFontSize</link></p>
</body>
</setuptopic>

<setuptopic directive="WizardSmallImageBackColor">
<body>
<p><i>Obsolete in 5.0.4.</i> This directive formerly specified the background color used to fill any unused space around the small wizard bitmap when <link topic="setup_wizardimagestretch">WizardImageStretch</link> was set to <tt>no</tt>. Now any unused space is filled with the standard window color (usually white). If you wish to create a colored border around the image, do so by modifying the bitmap itself.</p>
</body>
</setuptopic>

<setuptopic directive="SourceDir">
<body>
<p>Specifies a new <link topic="sourcedirectorynotes">source directory</link> for the script.</p>
<example><pre>SourceDir=c:\files</pre></example>
</body>
</setuptopic>

<setuptopic directive="OutputDir">
<setupdefault><tt>Output</tt></setupdefault>
<body>
<p>Specifies the "output" directory for the script, which is where the Setup Compiler will place the resulting SETUP.* files. By default, it creates a directory named "Output" under the directory containing the script for this.</p>
<p>If <tt>OutputDir</tt> is not a fully-qualified pathname, it will be treated as being relative to <tt>SourceDir</tt>, unless the pathname is prefixed by "userdocs:", in which case it will be treated as being relative to the the My Documents folder of the currently logged-in user. Setting <tt>OutputDir</tt> to <tt>.</tt> will result in the files being placed in the source directory.</p>
<example><pre>OutputDir=c:\output</pre></example>
</body>
</setuptopic>

<setuptopic directive="WizardStyle">
<setupvalid><tt>classic</tt> or <tt>modern</tt></setupvalid>
<setupdefault><tt>classic</tt></setupdefault>
<body>
<p>If this directive is set to <tt>modern</tt>, Setup and Uninstall will show a more modern look and also the defaults for <link topic="setup_wizardresizable">WizardResizable</link> and <link topic="setup_wizardsizepercent">WizardSizePercent</link> change to respectively <tt>yes</tt> and <tt>120,120</tt>.</p>
<p>Use <tt>Anchors</tt> and <tt>KeepSizeY</tt> properties to add full support for <tt>WizardResizable</tt> and <tt>WizardSizePercent</tt> to all your custom controls and wizard pages if you have any. See the <i>CodeClasses.iss</i> example script for an example.</p>
</body>
</setuptopic>

<setuptopic directive="UninstallStyle">
<body>
<p><i>Obsolete in 5.0.0.</i></p>
</body>
</setuptopic>

<setuptopic directive="AlwaysShowComponentsList">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If this directive is set to <tt>yes</tt>, Setup will always show the components list for customizable setups. If this is set to <tt>no</tt> Setup will only show the components list if the user selected a custom type from the type list.</p>
</body>
</setuptopic>

<setuptopic directive="AlwaysShowDirOnReadyPage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If this directive is set to <tt>yes</tt>, Setup will always show the selected directory in the list of settings on the <i>Ready to Install</i> wizard page. If this is set to <tt>no</tt>, Setup will not show the selected directory if <tt>DisableDirPage</tt> is <tt>yes</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="AlwaysShowGroupOnReadyPage">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If this directive is set to <tt>yes</tt>, Setup will always show the selected Start Menu folder name in the list of settings on the <i>Ready to Install</i> wizard page. If this is set to <tt>no</tt>, Setup will not show the selected Start Menu folder name if <tt>DisableProgramGroupPage</tt> is <tt>yes</tt>.</p>
<p>If no Start Menu folder is going to be created by Setup, this directive is effectively ignored.</p>
</body>
</setuptopic>

<setuptopic directive="FlatComponentsList">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is set to <tt>yes</tt>, Setup will use 'flat' checkboxes for the components list. Otherwise Setup will use '3D' checkboxes.</p>
</body>
</setuptopic>

<setuptopic directive="ShowComponentSizes">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When this directive is set to <tt>yes</tt>, Setup will show the size of a component in the components list. Depending on the largest component, Setup will display sizes in kilobytes or in megabytes.</p>
</body>
</setuptopic>

<setuptopic directive="ShowTasksTreeLines">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When this directive is set to <tt>yes</tt>, Setup will show 'tree lines' between parent and sub tasks.</p>
</body>
</setuptopic>

<setuptopic directive="DefaultDialogFontName">
<setupdefault><tt>Tahoma</tt></setupdefault>
<body>
<p>Specifies the name of the font that should be used in dialogs on languages that do not set <tt>DialogFontName</tt> in their <link topic="langoptionssection">[LangOptions] section</link>.</p>
<p>If the specified font name does not exist on the user's system or is an empty string, 8-point Microsoft Sans Serif or MS Sans Serif will be substituted.</p>
<p>Prior to the introduction of the <tt>DefaultDialogFontName</tt> directive in Inno Setup 5.3.9, the default dialog font name was always an empty string.</p>
</body>
</setuptopic>

<setuptopic directive="ShowLanguageDialog">
<setupvalid><link topic="yesnonotes"><tt>yes</tt>, <tt>no</tt></link>, or <tt>auto</tt></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt> and there are multiple <link topic="languagessection">[Languages] section</link> entries, a <i>Select Language</i> dialog will be displayed to give the user an opportunity to override the language Setup chose by default. See the [Languages] section documentation for more information.</p>
<p>When set to <tt>no</tt>, the dialog will never be displayed.</p>
<p>When set to <tt>auto</tt>, the dialog will only be displayed if Setup does not find a language identifier match.</p>
<p><b>See also:</b><br/>
<link topic="setup_usepreviouslanguage">UsePreviousLanguage</link></p>
</body>
</setuptopic>

<setuptopic directive="LanguageDetectionMethod">
<setupvalid><tt>uilanguage</tt>, <tt>locale</tt>, <tt>none</tt></setupvalid>
<setupdefault><tt>uilanguage</tt></setupdefault>
<body>
<p>When set to <tt>uilanguage</tt>, Setup will determine the default language to use by checking the user's "UI language" (by calling GetUserDefaultUILanguage(), or on Windows versions where that function is unsupported, by reading the registry). This is the method that Microsoft recommends. The "UI language" is the language used in Windows' own dialogs. Thus, on an English edition of Windows, English will be the default, while on a Dutch edition of Windows, Dutch will be the default. On the MUI edition of Windows, the default will be the currently selected UI language.</p>
<p>When set to <tt>locale</tt>, Setup will determine the default language to use by calling GetUserDefaultLangID(). This function returns the setting of "Your locale" in Control Panel's Regional Options. It should however be noted that the "Your locale" option is not intended to affect languages; it is only documented to affect "numbers, currencies, times, and dates".</p>
<p>When set to <tt>none</tt>, Setup will use the first language specified in the [Languages] section as the default language.</p>
</body>
</setuptopic>

<setuptopic directive="TimeStampRounding">
<setupvalid><tt>0</tt> through <tt>60</tt></setupvalid>
<setupdefault><tt>2</tt></setupdefault>
<body>
<p>By default, time stamps on files referenced by non <tt>external</tt> [Files] section entries are rounded down to the nearest 2-second boundary. FAT partitions have only a 2-second time stamp resolution, so this ensures that time stamps are set the same way on both FAT and NTFS partitions.</p>
<p>The rounding can be altered or disabled by setting the <tt>TimeStampRounding</tt> directive. Setting it to <tt>0</tt> will disable the rounding. Setting it to a number between <tt>1</tt> and <tt>60</tt> will cause time stamps to be rounded down to the nearest <tt>TimeStampRounding</tt>-second boundary.</p>
</body>
</setuptopic>

<setuptopic directive="TimeStampsInUTC">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>By default, time stamps on files referenced by non <tt>external</tt> [Files] section entries are saved and restored as local times. This means that if a particular file has a time stamp of 01:00 local time at compile time, Setup will extract the file with a time stamp of 01:00 local time, regardless of the user's time zone setting or whether DST is in effect.</p>
<p>If <tt>TimeStampsInUTC</tt> is set to <tt>yes</tt>, time stamps will be saved and restored in UTC -- the native time format of Win32 and NTFS. In this mode, a file with a time stamp of 01:00 local time in New York will have a time stamp of 06:00 local time when installed in London.</p>
</body>
</setuptopic>

<setuptopic directive="SetupIconFile">
<body>
<p>Specifies a custom program icon to use for Setup/Uninstall. The file must be located in your installation's <link topic="sourcedirectorynotes">source directory</link> when running the Setup Compiler, unless a fully qualified pathname is specified or the pathname is prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<example><pre>SetupIconFile=MyProgSetup.ico</pre></example>
</body>
</setuptopic>

<setuptopic directive="VersionInfoCompany">
<setupdefault><link topic="setup_apppublisher">AppPublisher</link> if <link topic="setup_apppublisher">AppPublisher</link> doesn't include constants, an empty string otherwise</setupdefault>
<body>
<p>Specifies the company name value for the Setup version info.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoCopyright">
<setupdefault><link topic="setup_appcopyright">AppCopyright</link> if <link topic="setup_appcopyright">AppCopyright</link> doesn't include constants, an empty string otherwise</setupdefault>
<body>
<p>Specifies the copyright value for the Setup version info.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoDescription">
<setupdefault>"<link topic="setup_appname">AppName</link> Setup" if <link topic="setup_appname">AppName</link> doesn't include constants, an empty string otherwise</setupdefault>
<body>
<p>Specifies the file description value for the Setup version info.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoOriginalFileName">
<body>
<p>Specifies the original file name value for the Setup version info.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoProductName">
<setupdefault><link topic="setup_appname">AppName</link> if <link topic="setup_appname">AppName</link> doesn't include constants, an empty string otherwise</setupdefault>
<body>
<p>Specifies the product name value for the Setup version info.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoProductTextVersion">
<setupdefault><link topic="setup_versioninfoproductversion">VersionInfoProductVersion</link> if set, else <link topic="setup_appversion">AppVersion</link> if set and does not include constants, else <link topic="setup_versioninfotextversion">VersionInfoTextVersion</link></setupdefault>
<body>
<p>Specifies the textual product version value for the Setup version info.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoProductVersion">
<setupvalid>A value in the form of up to 4 numbers separated by dots</setupvalid>
<setupdefault><link topic="setup_versioninfoversion">VersionInfoVersion</link></setupdefault>
<body>
<p>Specifies the binary product version value for the Setup version info.</p>
<p>Partial version numbers are allowed. Missing numbers will be appended as zero's.</p>
<p>Note that this value is only known to be displayed by Explorer on Windows Vista SP2. Other versions display the textual product version value (<link topic="setup_versioninfoproducttextversion">VersionInfoProductTextVersion</link>) instead.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoTextVersion">
<setupdefault><link topic="setup_versioninfoversion">VersionInfoVersion</link></setupdefault>
<body>
<p>Specifies the textual file version value for the Setup version info.</p>
<p>Note that this value was only displayed on Explorer's Version tab on Windows 98 and earlier. Later versions display the binary version value (<link topic="setup_versioninfoversion">VersionInfoVersion</link>) instead.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="VersionInfoVersion">
<setupvalid>A value in the form of up to 4 numbers separated by dots</setupvalid>
<setupdefault>0.0.0.0</setupdefault>
<body>
<p>Specifies the binary file version value for the Setup version info.</p>
<p>Partial version numbers are allowed. Missing numbers will be appended as zero's.</p>
<p>This setting has no effect if <tt>UseSetupLdr</tt> is set to <tt>no</tt>.</p>
</body>
</setuptopic>

<setuptopic directive="UninstallIconFile">
<body>
<p><i>Obsolete in 5.0.0.</i> As Setup and Uninstall have been merged into a single executable, setting a custom icon for Uninstall is no longer possible.</p>
</body>
</setuptopic>

<setuptopic directive="AppendDefaultDirName">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>By default, when a folder in the dialog displayed by the <i>Browse...</i> button on the <i>Select Destination Location</i> wizard page is clicked, Setup automatically appends the last component of <tt>DefaultDirName</tt> onto the new path. For example, if <tt>DefaultDirName</tt> is <tt>{autopf}\My Program</tt> and "Z:\" is clicked, the new path will become "Z:\My Program".</p>
<p>Setting this directive to <tt>no</tt> disables the aforementioned behavior. In addition, it causes a <i>Make New Folder</i> button to appear on the dialog.</p>
</body>
</setuptopic>

<setuptopic directive="AppendDefaultGroupName">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>By default, when a folder in the dialog displayed by the <i>Browse...</i> button on the <i>Select Start Menu Folder</i> wizard page is clicked, Setup automatically appends the last component of <tt>DefaultGroupName</tt> onto the new path. For example, if <tt>DefaultGroupName</tt> is <tt>My Program</tt> and "Accessories" is clicked, the new path will become "Accessories\My Program".</p>
<p>Setting this directive to <tt>no</tt> disables the aforementioned behavior. In addition, it causes a <i>Make New Folder</i> button to appear on the dialog.</p>
</body>
</setuptopic>

<setuptopic directive="TouchDate">
<setupvalid><tt>current</tt>, <tt>none</tt>, or <tt><i>YYYY</i>-<i>MM</i>-<i>DD</i></tt></setupvalid>
<setupdefault><tt>current</tt></setupdefault>
<body>
<p>The date used in the time/date stamp of files referenced by [Files] section entries that include the <tt>touch</tt> flag.</p>
<p>A value of <tt>current</tt> causes the current system date (at compile time) to be used. A value of <tt>none</tt> leaves the date as-is. Otherwise, <tt>TouchDate</tt> is interpreted as an explicit date in <tt><i>YYYY</i>-<i>MM</i>-<i>DD</i></tt> (ISO 8601) format. If <link topic="setup_timestampsinutc">TimeStampsInUTC</link> is set to <tt>yes</tt>, the date is assumed to be a UTC date.</p>
<example><pre>TouchDate=2004-01-31</pre></example>
</body>
</setuptopic>

<setuptopic directive="TouchTime">
<setupvalid><tt>current</tt>, <tt>none</tt>, <tt><i>HH</i>:<i>MM</i></tt>, or <tt><i>HH</i>:<i>MM</i>:<i>SS</i></tt></setupvalid>
<setupdefault><tt>current</tt></setupdefault>
<body>
<p>The time used in the time/date stamp of files referenced by [Files] section entries that include the <tt>touch</tt> flag.</p>
<p>A value of <tt>current</tt> causes the current system time (at compile time) to be used. A value of <tt>none</tt> leaves the time as-is. Otherwise, <tt>TouchTime</tt> is interpreted as an explicit time in <tt><i>HH</i>:<i>MM</i></tt> or <tt><i>HH</i>:<i>MM</i>:<i>SS</i></tt> format. If <link topic="setup_timestampsinutc">TimeStampsInUTC</link> is set to <tt>yes</tt>, the time is assumed to be a UTC time.</p>
<example><pre>TouchTime=13:00</pre></example>
</body>
</setuptopic>

<setuptopic directive="Encryption">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt>, files that are compiled into the installation (via [Files] section entries) will be encrypted using ARCFOUR encryption, with a 160-bit key derived from the value of the <link topic="setup_password">Password</link> [Setup] section directive.</p>
<p>Because of encryption import/export laws in some countries, encryption support is not included in the main Inno Setup installer and must be downloaded and installed separately if you wish to use it. See the <extlink href="http://www.jrsoftware.org/isdl.php">Inno Setup Downloads</extlink> page for more information.</p>
<p>If encryption is enabled and you call the <link topic="isxfunc_ExtractTemporaryFile">ExtractTemporaryFile</link> function from the [Code] section prior to the user entering the correct password, the function will fail unless the <tt>noencryption</tt> flag is used on the [Files] section entry for the file.</p>
<p>The key used for encryption is a 160-bit SHA-1 hash of 64-bit random salt plus the value of <link topic="setup_password">Password</link>.</p>
</body>
</setuptopic>

<setuptopic directive="AppModifyPath">
<body>
<p>When this directive is set, a separate "Modify" button in the Add/Remove Programs Control Panel applet will be displayed. Setting it is optional. The value may include constants.</p>
<example><pre>AppModifyPath="{app}\Setup.exe" /modify=1</pre></example>
</body>
</setuptopic>

<setuptopic directive="OutputManifestFile">
<body>
<p>When this directive is set, the compiler will create a manifest file detailing information about the files compiled into Setup. The file will be created in the <link topic="setup_outputdir">output directory</link> unless a path is included.</p>
<example><pre>OutputManifestFile=Setup-Manifest.txt</pre></example>
</body>
</setuptopic>

<setuptopic directive="ArchitecturesAllowed">
<keyword value="processors allowed" />
<keyword value="x86" />
<keyword value="AMD64" />
<keyword value="x64" />
<keyword value="IA-64" />
<keyword value="Itanium" />
<keyword value="ARM64" />
<setupvalid>One or more of the following, separated by spaces: <br/><tt>x86</tt> <br/><tt>x64</tt> <br/><tt>arm64</tt> <br/><tt>ia64</tt></setupvalid>
<setupdefault><i>(blank)</i></setupdefault>
<body>
<p>Specifies which processor architecture(s) Setup is allowed to run on. If this directive is not specified or is blank, Setup will be allowed to run on all processor architectures capable of executing its 32-bit code (including ones it doesn't recognize). Otherwise, if a user's processor architecture is not one of those specified in this directive, Setup will display an error message and exit.</p>
<p>If your application's binaries are all 32-bit and run in user mode, you should not change this directive from its default value (specifically, don't set it to <tt>x86</tt>), because normally such binaries will run without issue on the 64-bit Windows via the WOW64 emulator.</p>
<p>If you install any 32-bit device drivers, you should set this directive to <tt>x86</tt>, as 32-bit device drivers cannot function on 64-bit Windows.</p>
<p>If your application's binaries are built for the x64, ARM64 or Itanium architectures, you should set this directive to either <tt>x64</tt>, <tt>arm64</tt> or <tt>ia64</tt> respectively.</p>
<p><b>See also:</b><br/>
<link topic="setup_architecturesinstallin64bitmode">ArchitecturesInstallIn64BitMode</link></p>
</body>
</setuptopic>

<setuptopic directive="ArchitecturesInstallIn64BitMode">
<keyword value="32-bit install mode" />
<keyword value="64-bit install mode" />
<keyword value="AMD64" />
<keyword value="x64" />
<keyword value="IA-64" />
<keyword value="Itanium" />
<keyword value="ARM64" />
<setupvalid>One or more of the following, separated by spaces: <br/><tt>x64</tt> <br/><tt>arm64</tt> <br/><tt>ia64</tt></setupvalid>
<setupdefault><i>(blank)</i></setupdefault>
<body>
<p>Specifies the 64-bit processor architecture(s) on which Setup should install in <link topic="32vs64bitinstalls">64-bit install mode</link>. If this directive is not specified or is blank, Setup will always install in <link topic="32vs64bitinstalls">32-bit install mode</link>.</p>
<p>Normally, you should not change this directive from its default value unless your application contains native 64-bit binaries.</p>
<p>Be sure you have read the <link topic="64bitlimitations">64-bit Installation Limitations</link> topic before setting this directive.</p>
<p>If your application runs only on 64-bit processor architectures, you should set <link topic="setup_architecturesallowed">ArchitecturesAllowed</link> to the same value as this directive to prevent Setup from running on 32-bit Windows.</p>
<p><b>See also:</b><br/>
<link topic="setup_architecturesallowed">ArchitecturesAllowed</link></p>
</body>
</setuptopic>

<setuptopic directive="TerminalServicesAware">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>Specifies whether the compiler should set the "Terminal Services aware" flag in the headers of the Setup and Uninstall programs. This feature is new to version 5.1.7 and defaults to <tt>yes</tt>; previous versions never set the flag.</p>
<p>Most importantly, the "Terminal Services aware" flag affects the behavior of the {win} constant (and <link topic="isxfunc_GetWinDir">GetWinDir</link> support function) on servers with Terminal Services installed in application mode.</p>
<p>When the flag is set, {win} will consistently return the system's real Windows directory, typically "C:\WINDOWS", just as on systems that do not have Terminal Services installed.</p>
<p>When the flag is not set, Windows runs the program in compatibility mode, where {win} may return either the real Windows directory or a user-specific Windows directory, such as "C:\Documents and Settings\&lt;user name&gt;\WINDOWS". Which one you get depends on the name of the program's EXE file and how it is launched. If the program is named setup.exe or install.exe, or if it is launched from the <i>Add/Remove Programs</i> Control Panel applet, then Windows will put the system in "install mode", which effectively makes the program (and all other programs running in the session) behave as if the "Terminal Services aware" flag were set. Otherwise, the program is treated as a legacy application and is given a private Windows directory. (This is true even if the user running the program has full administrative privileges.)</p>
<p>Because the behavior that results from setting <tt>TerminalServicesAware</tt> to <tt>no</tt> is inconsistent and hard to predict, it is recommended that you use the default setting of <tt>yes</tt>. Only use <tt>no</tt> as a temporary fix if you encounter troubles on systems with Terminal Services after upgrading from a previous Inno Setup version.</p>
</body>
</setuptopic>

<setuptopic directive="DEPCompatible">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>Specifies whether the compiler should set the "NX Compatible" flag in the headers of the Setup and Uninstall programs to mark them compatible with data execution prevention (DEP). This feature is new to version 5.5.7 and defaults to <tt>yes</tt>; previous versions never set the flag.</p>
<p>Setting this to <tt>no</tt> might be needed if you're using a buggy third-party DLL from [Code].</p>
</body>
</setuptopic>

<setuptopic directive="ASLRCompatible">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>Specifies whether the compiler should set the "Dynamic Base" flag in the headers of the Setup and Uninstall programs. This feature is new to version 5.5.7 and defaults to <tt>yes</tt>; previous versions never set the flag.</p>
</body>
</setuptopic>

<setuptopic directive="SetupLogging">
<keyword value="logging" />
<keyword value="/LOG" />
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt>, Setup will always create a log file. Equivalent to passing <link topic="setupcmdline" anchor="LOG">/LOG</link> on the command line.</p>
</body>
</setuptopic>

<setuptopic directive="SignedUninstaller">
<keyword value="signature" />
<keyword value="digital signature" />
<keyword value="code signing" />
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt> if a <link topic="setup_signtool">SignTool</link> is set, <tt>no</tt> otherwise</setupdefault>
<body>
<p>Specifies whether the uninstaller program (unins???.exe) should be deployed with a digital signature attached. When the uninstaller has a valid digital signature, users will not see an "unknown publisher" warning when launching it.</p>
<p>The first time you compile a script with this directive set to <tt>yes</tt>, a uniquely-named copy of the uninstaller EXE file will be created in the directory specified by the <link topic="setup_signeduninstallerdir">SignedUninstallerDir</link> directive (which defaults to the <link topic="setup_outputdir">output directory</link>). Depending on the <link topic="setup_signtool">SignTool</link> setting, you will either then be prompted to attach a digital signature to this file using an external code-signing tool (such as Microsoft's signtool.exe) or the file will be automatically signed on the fly. On subsequent compiles, the signature from the file will be embedded into the compiled installations' uninstallers.</p>
<p>Upgrading to a newer version of Inno Setup, or changing certain [Setup] section directives that affect the contents of the uninstaller EXE file (such as <link topic="setup_setupiconfile">SetupIconFile</link>), will cause a new file to be created under a different name.</p>
<p>If a file generated by this directive is deleted, it will be recreated automatically if necessary on the next compile.</p>
<p>When the uninstaller has a digital signature, Setup will write the messages from the active language into a separate file (unins???.msg). It cannot embed the messages into the EXE file because doing so would invalidate the digital signature.</p>
<p>When set to <tt>yes</tt>, any temporary self-copies used by Setup are digitally signed too.</p>
<p>Details on obtaining signing certificates and using code-signing tools are beyond the scope of this documentation.</p>
</body>
</setuptopic>

<setuptopic directive="SignedUninstallerDir">
<setupdefault><link topic="setup_outputdir">OutputDir</link></setupdefault>
<body>
<p>Specifies the directory in which <link topic="setup_signeduninstaller">signed uninstaller</link> files should be stored. By default, such files are stored in the <link topic="setup_outputdir">output directory</link>.</p>
<p>Separate script files may share the same <tt>SignedUninstallerDir</tt> setting. By setting up a common directory to hold signed uninstaller files, you won't have to re-sign the uninstaller each time you compile a new script file with a distinct <tt>OutputDir</tt> setting.</p>
<p>If <tt>SignedUninstallerDir</tt> is not a fully-qualified pathname, it will be treated as being relative to <tt>SourceDir</tt>. Setting <tt>SignedUninstallerDir</tt> to <tt>.</tt> will result in the files being placed in the source directory.</p>
<example><pre>SignedUninstallerDir=c:\signeduninstallers</pre></example>
</body>
</setuptopic>

<setuptopic directive="SignTool">
<keyword value="signature" />
<keyword value="digital signature" />
<keyword value="code signing" />
<setupvalid>A name followed by zero or more parameters, space separated</setupvalid>
<body>
<p>Specifies the name and parameters of the Sign Tool to be used to digitally sign:</p>
<ul appearance="compact">
<li>Setup</li>
<li>Uninstall if <link topic="setup_signeduninstaller">SignedUninstaller</link> is set to <tt>yes</tt></li>
<li>Original source files if the <link topic="filessection">[Files]</link> section's <tt>sign</tt> or <tt>signonce</tt> flag is used</li>
</ul>
<p>When Setup has a valid digital signature, users will not see an "unidentified program" warning when launching it.</p>
<p>The specified Sign Tool name and its command have to be defined in the compiler IDE (via the <i>Tools | Configure Sign Tools...</i> menu) or on the <link topic="compilercmdline">compiler command line</link> (via the "/S" parameter), else an error will occur.</p>
<p>The following special sequences may be used in Sign Tool parameters and commands:</p>
<p><tt>$f</tt>, replaced by the quoted file name of the file to be signed. (required)</p>
<p><tt>$p</tt>, replaced by the Sign Tool parameters.</p>
<p><tt>$q</tt>, replaced by a quote, useful for defining a Sign Tool which contains quotes from the command line.</p>
<p><tt>$$</tt>, replaced by a single <tt>$</tt> character.</p>
<example>
<p>Assume the following Sign Tools have been defined in the IDE:</p>
<pre>
mystandard=signtool.exe sign /a /n $qMy Common Name$q /t http://timestamp.comodoca.com/authenticode /d $qMy Program$q $f
mycustom=signtool.exe $p
byparam=$p
</pre>
<p>then some examples would be:</p>
<pre>
[Setup]
SignTool=mystandard

[Setup]
SignTool=mycustom sign /a /n $qMy Common Name$q /t http://timestamp.comodoca.com/authenticode /d $qMy Program$q $f

[Setup]
SignTool=byparam signtool.exe sign /a /n $qMy Common Name$q /t http://timestamp.comodoca.com/authenticode /d $qMy Program$q $f
</pre>
<p>The Setup section may also list multiple SignTool directives which will be executed in order of appearance. This can be used to dual sign (SHA1 &amp; SHA256) Setup and Uninstall:</p>
<pre>
[Setup]
SignTool=mycustom sign /a /n $qMy Common Name$q /fd sha1 /t http://timestamp.comodoca.com/authenticode /d $qMy Program$q $f
;the /as parameter in the following SignTool requires a recent signtool.exe version and a SHA256 (SHA-2) certificate
SignTool=mycustom sign /a /n $qMy Common Name$q /as /fd sha256 /td sha256 /tr http://timestamp.comodoca.com/rfc3161 /d $qMy Program$q $f
</pre>
<p>Note: for security reasons you should give a unique name to any Sign Tool set to <tt>$p</tt>, and not use a <tt>byparam</tt> name copied from this example. Consider what happens if you #include a third-party file that says:</p>
<pre>
[Setup]
SignTool=byparam format c: 
</pre>
</example>
<p>Further details on obtaining signing certificates and using code-signing tools are beyond the scope of this documentation.</p>
<p><i>Note:</i> If you use a Sign Tool and your Setup contains a large amount of data, it is recommended that you enable <link topic="setup_diskspanning">Disk spanning</link> with <link topic="setup_diskslicesize">DiskSliceSize</link> set to <tt>max</tt>. If you don't do this, the user might experience a long delay after starting Setup caused by Windows verifying the digital signature against all your data. There should be no security reduction from using disk spanning in practice: all files extracted from the unsigned .bin files undergo SHA-1 verification (provided <tt>dontverifychecksum</tt> isn't used). The SHA-1 hashes for this (along with all other metadata) are kept inside Setup's EXE, which is protected by the digital signature.</p>
<p><b>See also:</b><br/>
<link topic="setup_signtoolminimumtimebetween">SignToolMinimumTimeBetween</link><br/>
<link topic="setup_signtoolretrycount">SignToolRetryCount</link><br/>
<link topic="setup_signtoolrunminimized">SignToolRunMinimized</link></p>
</body>
</setuptopic>

<setuptopic directive="SignToolMinimumTimeBetween">
<keyword value="signature" />
<keyword value="digital signature" />
<keyword value="code signing" />
<setupdefault><tt>0</tt></setupdefault>
<body>
<p>If not set to 0, specifies the minimum number of milliseconds that should have elapsed between consecutive digital signing actions by the Setup Compiler. For example, if set to 5000 then the Setup Compiler will perform 1 digital signing per 5 seconds at most. Can be used to avoid being rejected by rate limiting timestamp services.</p>
<p><b>See also:</b><br/>
<link topic="setup_signtool">SignTool</link></p>
</body>
</setuptopic>

<setuptopic directive="SignToolRetryCount">
<keyword value="signature" />
<keyword value="digital signature" />
<keyword value="code signing" />
<setupdefault><tt>2</tt></setupdefault>
<body>
<p>Specifies the number of times the Setup Compiler should automatically retry digital signing on any errors.</p>
<p><b>See also:</b><br/>
<link topic="setup_signtool">SignTool</link><br/>
<link topic="setup_signtoolretrydelay">SignToolRetryDelay</link></p>
</body>
</setuptopic>

<setuptopic directive="SignToolRetryDelay">
<keyword value="signature" />
<keyword value="digital signature" />
<keyword value="code signing" />
<setupdefault><tt>500</tt></setupdefault>
<body>
<p>Specifies the number of milliseconds the Setup Compiler should wait before any automatic digital signing retries specified by <link topic="setup_signtoolretrycount">SignToolRetryCount</link>.</p>
<p><b>See also:</b><br/>
<link topic="setup_signtool">SignTool</link><br/>
<link topic="setup_signtoolretrycount">SignToolRetryCount</link></p>
</body>
</setuptopic>

<setuptopic directive="SignToolRunMinimized">
<keyword value="signature" />
<keyword value="digital signature" />
<keyword value="code signing" />
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt>, the Setup Compiler will run Sign Tools in a minimized window.</p>
<p><b>See also:</b><br/>
<link topic="setup_signtool">SignTool</link></p>
</body>
</setuptopic>

<setuptopic directive="LZMAAlgorithm">
<setupvalid><tt>0</tt> or <tt>1</tt></setupvalid>
<setupdefault><tt>0</tt> if the <link topic="setup_compression">LZMA compression level</link> is set to <tt>fast</tt><br />
<tt>1</tt> otherwise</setupdefault>
<body>
<p>Controls the algorithm used by the LZMA and LZMA2 compressors.</p>
<p>A value of <tt>0</tt> enables the fast algorithm.</p>
<p>A value of <tt>1</tt> enables the normal algorithm.</p>
</body>
</setuptopic>

<setuptopic directive="LZMABlockSize">
<setupvalid><tt>1024</tt> through <tt>262144</tt></setupvalid>
<setupdefault>4 * <link topic="setup_lzmadictionarysize">LZMADictionarySize</link> with a minimum of 1024 and a maximum of 262144</setupdefault>
<body>
<p>Controls the block size used by the LZMA2 compressor, in kilobytes, when <link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link> is set to <tt>2</tt> or higher.</p>
<p>Note that setting this too high can negate the benefits of using multiple block threads. Typically, the block size should be no more than the total size of your data divided by the number of block threads.</p>
<p><b>See also:</b><br/>
<link topic="setup_lzmadictionarysize">LZMADictionarySize</link><br/>
<link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link></p>
</body>
</setuptopic>

<setuptopic directive="LZMADictionarySize">
<setupvalid><tt>4</tt> through <tt>131072</tt> (by default)<br />
<tt>4</tt> through <tt>1048576</tt> if <link topic="setup_lzmauseseparateprocess">LZMAUseSeparateProcess</link> is set to <tt>yes</tt> and running on 64-bit Windows (x64)</setupvalid>
<setupdefault><tt>32</tt> if the <link topic="setup_compression">LZMA compression level</link> is set to <tt>fast</tt><br />
<tt>2048</tt> if the LZMA compression level is set to <tt>normal</tt><br />
<tt>8192</tt> if the LZMA compression level is set to <tt>max</tt><br />
<tt>32768</tt> if the LZMA compression level is set to <tt>ultra</tt><br />
<tt>65536</tt> if the LZMA compression level is set to <tt>ultra64</tt></setupdefault>
<body>
<p>Controls the dictionary size used by the LZMA and LZMA2 compressors, in kilobytes. A larger dictionary size can provide a better compression ratio at the expense of compression speed and memory requirements.</p>
<p>Review the memory requirements listed in the <link topic="setup_compression">Compression</link> topic before using.</p>
<p>If an "Out of memory" error is seen after increasing the dictionary size, <link topic="setup_lzmauseseparateprocess">LZMAUseSeparateProcess</link> may need to be set.</p>
<p><b>See also:</b><br/>
<link topic="setup_lzmablocksize">LZMABlockSize</link></p>
</body>
</setuptopic>

<setuptopic directive="LZMAMatchFinder">
<setupvalid><tt>HC</tt> or <tt>BT</tt></setupvalid>
<setupdefault><tt>HC</tt> if the <link topic="setup_compression">LZMA compression level</link> is set to <tt>fast</tt><br />
<tt>BT</tt> otherwise</setupdefault>
<body>
<p>Controls the match finder method used by the LZMA and LZMA2 compressors.</p>
<p>A value of <tt>HC</tt> enables the Hash Chain method with 4 hash bytes.</p>
<p>A value of <tt>BT</tt> enables the Binary Tree method with 4 hash bytes.</p>
<p>The Binary Tree method can provide a better compression ratio at the expense of compression speed.</p>
</body>
</setuptopic>

<setuptopic directive="LZMANumBlockThreads">
<setupvalid><tt>1</tt> through <tt>32</tt></setupvalid>
<setupdefault><tt>1</tt></setupdefault>
<body>
<p>When compressing a large amount of data, the LZMA2 compressor has the ability to divide the data into "blocks" and compress two or more of these blocks in parallel through the use of additional threads (provided sufficient processor power is available). This directive specifies the number of threads to use -- that is, the maximum number of blocks that the LZMA2 compressor may compress in parallel.</p>
<p>The memory required during compression when multiple block threads are used is roughly:</p>
<indent><p>LZMANumBlockThreads * (<link topic="setup_compression">Normal memory usage</link> + (<link topic="setup_lzmablocksize">LZMABlockSize</link> * 2))</p></indent>
<p>Since LZMA2 (and LZMA) uses two threads for match-finding by default (see <link topic="setup_compressionthreads">CompressionThreads</link>), there ideally should be two processor cores available for each block thread. Thus, to see the maximum benefit from a value of <tt>2</tt>, four cores are needed.</p>
<p>Dividing the data into multiple blocks can reduce the compression ratio, as the compressor cannot find matches across blocks. Using a large <link topic="setup_lzmablocksize">block size</link> can help to mitigate this.</p>
<p>If an "Out of memory" error is seen when multiple block threads are enabled in combination with a compression level that uses a large dictionary size (such as <tt>ultra64</tt>), <link topic="setup_lzmauseseparateprocess">LZMAUseSeparateProcess</link> may need to be set.</p>
<p><b>See also:</b><br/>
<link topic="setup_lzmablocksize">LZMABlockSize</link></p>
</body>
</setuptopic>

<setuptopic directive="LZMANumFastBytes">
<setupvalid><tt>5</tt> through <tt>273</tt></setupvalid>
<setupdefault><tt>64</tt> if the <link topic="setup_compression">LZMA compression level</link> is set to <tt>max</tt>, <tt>ultra</tt>, or <tt>ultra64</tt><br />
<tt>32</tt> otherwise</setupdefault>
<body>
<p>Controls number of fast bytes used by the LZMA and LZMA2 compressors. A larger number of fast bytes can provide a better compression ratio at the expense of compression speed.</p>
</body>
</setuptopic>

<setuptopic directive="CloseApplications">
<setupvalid><tt>force</tt>, <link topic="yesnonotes"><tt>yes</tt>, or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>If set to <tt>yes</tt> or <tt>force</tt> and Setup is not running silently, Setup will pause on the <i>Preparing to Install</i> wizard page if it detects applications using files that need to be updated by the [Files] or [InstallDelete] section, showing the applications and asking the user if Setup should automatically close the applications and restart them after the installation has completed.</p>
<p>If set to <tt>yes</tt> or <tt>force</tt> and Setup is running silently, Setup will always close and restart such applications, unless told not to via the command line.</p>
<p>If set to <tt>force</tt> Setup will force close when closing applications, unless told not to via the command line. Use with care since this may cause the user to lose unsaved work.</p>
<p>Note: Setup uses the Windows <extlink href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa373524.aspx">Restart Manager</extlink> API to close and restart applications.</p>
<p><b>See also:</b><br/>
<link topic="setup_closeapplicationsfilter">CloseApplicationsFilter</link><br/>
<link topic="scriptevents" anchor="RegisterExtraCloseApplicationsResources">RegisterExtraCloseApplicationsResources</link><br/>
<link topic="setup_restartapplications">RestartApplications</link></p>
</body>
</setuptopic>

<setuptopic directive="CloseApplicationsFilter">
<setupvalid>A list of file name wildcards, separated by commas</setupvalid>
<setupdefault><tt>*.exe,*.dll,*.chm</tt></setupdefault>
<body>
<p>Controls which files Setup will check for being in use.</p>
<p>Setting this to <tt>*.*</tt> can provide better checking at the expense of speed.</p>
<p><b>See also:</b><br/>
<link topic="setup_closeapplications">CloseApplications</link><br/>
<link topic="setup_restartapplications">RestartApplications</link></p>
</body>
</setuptopic>

<setuptopic directive="RestartApplications">
<setupvalid><link topic="yesnonotes"><tt>yes</tt> or <tt>no</tt></link></setupvalid>
<setupdefault><tt>yes</tt></setupdefault>
<body>
<p>When set to <tt>yes</tt> and <link topic="setup_closeapplications">CloseApplications</link> is also set to <tt>yes</tt>, Setup restarts the closed applications after the installation has completed.</p>
<p>Note: For Setup to be able to restart an application after the installation has completed, the application needs to be using the Windows <tt>RegisterApplicationRestart</tt> API function.</p>
<p><b>See also:</b><br/>
<link topic="setup_closeapplications">CloseApplications</link><br/>
<link topic="setup_closeapplicationsfilter">CloseApplicationsFilter</link></p>
</body>
</setuptopic>

<topic name="yesnonotes" title="Notes on &quot;yes&quot; and &quot;no&quot;">
<keyword value="Notes on &quot;yes&quot; and &quot;no&quot;" />
<body>
<p>For compatibility with previous Inno Setup versions, <tt>1</tt> and <tt>0</tt> may be used in place of <tt>yes</tt> and <tt>no</tt>, respectively.</p>
<p>Additionally, it allows <tt>true</tt> and <tt>false</tt> to be used in place of <tt>yes</tt> and <tt>no</tt>.</p>
</body>
</topic>

<setuptopic directive="LZMAUseSeparateProcess">
<setupvalid><link topic="yesnonotes"><tt>yes</tt>, <tt>no</tt></link>, or <tt>x86</tt></setupvalid>
<setupdefault><tt>no</tt></setupdefault>
<body>
<p>Controls whether LZMA compression is performed inside the main compiler process or in a separate process.</p>
<p>Using a separate process for LZMA compression allows the compressor to allocate larger amounts of memory, which makes it possible for higher <link topic="setup_lzmadictionarysize">LZMADictionarySize</link> and <link topic="setup_lzmanumblockthreads">LZMANumBlockThreads</link> settings to be used. Additionally, on 64-bit Windows (x64), a small increase in compression speed may be observed.</p>
<p>On 64-bit Windows (x64), there are no limitations on the amount of memory the compressor may use, as it runs inside a native 64-bit process. On 32-bit Windows, however, due to address space constraints, typically only about 1.5 GB is available for use by the compressor.</p>
<p>A value of <tt>yes</tt> enables the use of a 64-bit process on 64-bit Windows (x64), and a 32-bit process on 32-bit Windows.</p>
<p>A value of <tt>x86</tt> enables the use of a 32-bit process only (normally only useful for debugging purposes).</p>
<p>A value of <tt>no</tt> disables the use of a separate process for LZMA compression.</p>
<p>Note that this directive only affects the compression of files specified in the [Files] section; compression of Setup's internal structures is always performed inside the main compiler process.</p>
</body>
</setuptopic>

<topic name="appendnotes" title="Appending to Existing Uninstall Logs">
<keyword value="Appending to Existing Uninstall Logs" />
<body>
<p>When a new version of an application is installed over an existing version, instead of creating a new uninstall log file (unins???.dat), Setup will by default look for and append to an existing uninstall log file that belongs to the <link topic="sameappnotes">same application</link> and is in the same directory. This way, when the application is uninstalled, changes made by all the different installations will be undone (starting with the most recent installation).</p>
<p>The uninstaller will use the <link topic="messagessection">messages</link> from the most recent installation of the application. However, there is an exception: if an installation was built with an older version of Inno Setup that included an older version of the uninstaller than the existing one on the user's system, neither the existing uninstaller nor its messages will be replaced. In this case the uninstall log will still be appended to, though, since the file format is backward compatible.</p>
<p>The application name displayed in the uninstaller will be the same as the value of the <tt>[Setup]</tt> section directive <link topic="setup_appname">AppName</link> from the most recent installation, unless <link topic="setup_updateuninstalllogappname">UpdateUninstallLogAppName</link> is set to <tt>no</tt>.</p>
<p>The uninstall log-appending feature is new to Inno Setup 1.3. If you wish to disable it, set the <tt>[Setup]</tt> section directive <link topic="setup_uninstalllogmode">UninstallLogMode</link>.</p>
<p><i>Note:</i> Setup can only append to uninstall log files that were created by an Inno Setup 1.3.1 (or later) installation.</p>
</body>
</topic>

<topic name="sameappnotes" title="Same Application">
<keyword value="Same Application" />
<body>
<p>"Same application" refers to two separate installation runs that share the same <link topic="setup_appid">AppId</link> setting (or if <tt>AppId</tt> is not set, the same <link topic="setup_appname">AppName</link> setting), and the same <link topic="admininstallmode">administrative or non administrative install mode</link>, and the same <link topic="32vs64bitinstalls">32-bit or 64-bit install mode</link>*. Two of such installation runs will usually lead to only one actual installation of the files.</p>
<p>(* = This requirement does not apply to any same application information retrieved from the registry in non administrative install mode since the HKEY_CURRENT_USER key is shared between the 32-bit and 64-bit registry. It does however always apply to the uninstall log since the 32-bit and 64-bit uninstall logs are kept separate, even in non administrative install mode. In practice this means you should avoid offering both a 32-bit and a 64-bit non administrative installer to your users without giving these installers different <tt>AppId</tt>, <tt>DefaultDirName</tt>, <tt>DefaultGroupName</tt>, and <tt>UninstallDisplayName</tt> settings.)</p>
<p><b>See also:</b><br/>
<link topic="sidebyside">Side-by-side installation</link></p>
</body>
</topic>

<topic name="sidebyside" title="Side-by-side installation">
<keyword value="Side-by-side installation" />
<body>
<p>"Side-by-side installation" refers to two separate installation runs that share the same <link topic="setup_appid">AppId</link> setting (or if <tt>AppId</tt> is not set, the same <link topic="setup_appname">AppName</link> setting) but not the other <link topic="sameappnotes">"Same application"</link> requirements. Two of such installation runs will usually lead to two actual installations of the files. To avoid entries with identical names in the <i>Add/Remove Programs</i> Control Panel applet Setup will automatically mark the new entry with a text like "Current user" or "64-bit" when necessary during a side-by-side installation.</p>
</body>
</topic>

<topic name="sourcedirectorynotes" title="Source Directory">
<keyword value="Source Directory" />
<body>
<p>By default, the Setup Compiler expects to find files referenced in the script's <tt>[Files]</tt> section <tt>Source</tt> parameters, and files referenced in the <tt>[Setup]</tt> section, under the same directory the script file is located if they do not contain fully qualified pathnames. To specify a different source directory, create a <link topic="setup_sourcedir">SourceDir</link> directive in the script's <tt>[Setup]</tt> section.</p>
</body>
</topic>

<topic name="buildnumnotes" title="Using Build Number and/or Service Pack Levels">
<keyword value="Using Build Number and/or Service Pack Levels" />
<body>
<p>The versions specified in <tt>MinVersion</tt> and <tt>OnlyBelowVersion</tt> can optionally include build numbers and/or service pack levels.</p>
<examples>
<pre>
5.0.2195
5.0sp4
5.0.2195sp4
</pre>
</examples>
<p>If a build number is not specified or is zero, Setup will not check the system's build number.</p>
<p>If a service pack level is not specified or is zero, Setup will not check the system's service pack level.</p>
<p>When a service pack level is specified, Setup will only compare it against the system's service pack level if the specified major and minor versions match the system's version. For example, if <tt>MinVersion</tt> specifies <tt>5.0sp4</tt>, Setup will only check for SP4 on Windows 2000 (5.0) systems.</p>
<p>In an <tt>OnlyBelowVersion</tt> parameter, if the specified version matches the system's version, then Setup will normally consider the system's version to be too high. However, when a service pack level is specified, the specified version is allowed to match the system's version. For example, on Windows 2000 SP4, values of <tt>5.0</tt> and <tt>5.0.2195</tt> will fail the <tt>OnlyBelowVersion</tt> test, but <tt>5.0sp5</tt> and <tt>5.0.2195sp5</tt> will pass (as SP4 &lt; <tt>sp5</tt>).</p>
</body>
</topic>

<topic name="winvernotes" title="Windows Versions">
<keyword value="Windows Versions" />
<body>
<table>
<tr><td>6.0.6000</td><td>Windows Vista</td></tr>
<tr><td>6.0.6001</td><td>Windows Vista with Service Pack 1<br/>or Windows Server 2008</td></tr>
<tr><td>6.1.7600</td><td>Windows 7<br/>or Windows Server 2008 R2</td></tr>
<tr><td>6.1.7601</td><td>Windows 7 with Service Pack 1<br/>or Windows Server 2008 R2 with Service Pack 1</td></tr>
<tr><td>6.2.9200</td><td>Windows 8<br/>or Windows Server 2012</td></tr>
<tr><td>6.3.9200</td><td>Windows 8.1<br/>or Windows Server 2012 R2</td></tr>
<tr><td>6.3.9600</td><td>Windows 8.1 with Update 1</td></tr>
<tr><td>10.0.10240</td><td>Windows 10 Version 1507</td></tr>
<tr><td>10.0.10586</td><td>Windows 10 Version 1511 (November Update)</td></tr>
<tr><td>10.0.14393</td><td>Windows 10 Version 1607 (Anniversary Update)<br/>or Windows Server 2016</td></tr>
<tr><td>10.0.15063</td><td>Windows 10 Version 1703 (Creators Update)</td></tr>
<tr><td>10.0.16299</td><td>Windows 10 Version 1709 (Fall Creators Update)</td></tr>
<tr><td>10.0.17134</td><td>Windows 10 Version 1803 (April 2018 Update)</td></tr>
<tr><td>10.0.17763</td><td>Windows 10 Version 1809 (October 2018 Update)<br/>or Windows Server 2019</td></tr>
<tr><td>10.0.18362</td><td>Windows 10 Version 1903 (May 2019 Update)</td></tr>
</table>
<p>Note that there is normally no need to specify the build numbers (i.e., you may simply use "6.2" for Windows 8).</p>
</body>
</topic>

<topic name="usergroupids" title="User &amp; Group Identifiers">
<keyword value="User &amp; Group Identifiers" />
<body>
<table>
<tr><td><tt>admins</tt></td><td>Administrators group</td></tr>
<tr><td><tt>authusers</tt></td><td>Authenticated Users group</td></tr>
<tr><td><tt>creatorowner</tt></td><td>Creator Owner</td></tr>
<tr><td><tt>everyone</tt></td><td>Everyone group</td></tr>
<tr><td><tt>guests</tt></td><td>Guests group</td></tr>
<tr><td><tt>networkservice</tt></td><td>Network service account</td></tr>
<tr><td><tt>service</tt></td><td>Local service account</td></tr>
<tr><td><tt>system</tt></td><td>Local system account</td></tr>
<tr><td><tt>users</tt></td><td>Users group</td></tr>
</table>
</body>
</topic>

</ishelp>
